{"version":3,"file":"1297.bundle.6f07daeb8ca1ae66e578.js","mappings":"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","sources":["webpack:///../../../extensions/ReportExtension/Report/storage.ts","webpack:///../../../extensions/ReportExtension/Report/src/utils.ts","webpack:///../../../extensions/ReportExtension/Report/src/api.ts","webpack:///../../../extensions/ReportExtension/Report/src/types/ReportAnalysisTypes.ts","webpack:///../../../extensions/ReportExtension/Report/src/components/notify.ts","webpack:///../../../extensions/ReportExtension/Report/src/components/LabelHWrap.tsx","webpack:///../../../extensions/ReportExtension/Report/src/components/CustomInput.tsx","webpack:///../../../extensions/ReportExtension/Report/src/components/CustomImageUpload.tsx","webpack:///../../../extensions/ReportExtension/Report/src/components/ReportImages.tsx","webpack:///../../../extensions/ReportExtension/Report/src/components/CustomSelectBox.tsx","webpack:///../../../extensions/ReportExtension/Report/src/components/TextEditor.tsx","webpack:///../../../extensions/ReportExtension/Report/src/components/DiagnosisSection.tsx","webpack:///../../../extensions/ReportExtension/Report/src/hooks/useToken.ts","webpack:///../../../extensions/ReportExtension/Report/src/Report.tsx","webpack:///../../../extensions/ReportExtension/Report/src/index.tsx","webpack:///../../../node_modules/suneditor/src/lang/ sync ^\\.\\/.*\\.js$"],"sourcesContent":["import secureLocalStorage from 'react-secure-storage';\n\n/**** purpose of admin login ******/\nconst setApiToken = (token: string) => {\n  return secureLocalStorage.setItem('token', token);\n};\n\nconst removeApiToken = () => {\n  return secureLocalStorage.removeItem('token');\n};\nconst getApiToken = (): string => {\n  const token = secureLocalStorage.getItem('token');\n  return String(token);\n};\n\n/**\n * set storage item\n * @param key\n * @param value\n */\n\nconst setStorageItem = (key: string, value: string) => {\n  return secureLocalStorage.setItem(key, value);\n};\n/**\n * get storage item\n * @param key\n */\n\nconst getStorageItem = (key: string) => {\n  return secureLocalStorage.getItem(key);\n};\n\n/**\n * remove storage item\n * @param key\n */\n\nconst removeStorageItem = (key: string) => {\n  return secureLocalStorage.removeItem(key);\n};\n\nexport {\n  setApiToken,\n  getApiToken,\n  removeApiToken,\n  setStorageItem,\n  getStorageItem,\n  removeStorageItem,\n};\n","import lodash from 'lodash';\n/**\n * check if given domain or url is https enabled or not\n * @param url\n */\nfunction ensureHTTPS(url: string | null) {\n  if (!url) {\n    return '';\n  }\n  return url;\n  /*    if (!/^https?:\\/\\//i.test(url)) {\n        url = 'https://' + url;\n    } else if (/^http:\\/\\//i.test(url)) {\n        url = url.replace(/^http:/i, 'https:');\n    }\n    return url;*/\n}\n\n/**\n * check if given string is non empty valid string\n * @param str\n */\nfunction isValidString(str: any): boolean {\n  return str !== undefined && str !== null && str?.length > 0;\n}\n\n/**\n * check if given string is non empty valid string\n * @param str\n */\nfunction isStr(str: any): boolean {\n  return str !== undefined && str !== null && str?.length > 0;\n}\n\n/**\n * check is an array is non-empty valid array\n * @param array\n */\n\nfunction isArray(array: any[] | undefined | null): boolean {\n  return array !== undefined && array !== null && array?.length > 0;\n}\n\n/**\n * converts string to lowercase\n * @param str\n */\nfunction convertToLower(str: string) {\n  if (str?.length <= 0) {\n    return str;\n  }\n  return str?.toLowerCase();\n}\n\n/**\n * formats string to lowercase to compare with each other\n * @param str\n */\n\nfunction strcmp(str: string | undefined) {\n  str = str?.replace(/\\s/g, '-');\n  str = str?.replace(/[^a-zA-Z ]/g, '-');\n  return convertToLower(str ?? '');\n}\n\nfunction filterDigits(inputString: string): string {\n  return inputString.replace(/\\D/g, '');\n}\n\n/**\n * check if given string is non-empty valid number\n * @param num\n */\nfunction isNum(num: number | undefined | null): boolean {\n  return num !== undefined && num !== null && num > 0;\n}\n\nfunction isValidUrl(string: string) {\n  try {\n    new URL(string);\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nfunction humanTimeDiff(date: string) {\n  const givenDate = new Date(date);\n  // Current date\n  const currentDate = new Date();\n  // Calculate the difference in milliseconds\n  const timeDifference = currentDate.getTime() - givenDate.getTime();\n  // Convert milliseconds to days\n  const days = Math.floor(timeDifference / (1000 * 60 * 60 * 24));\n  return isNum(days) ? days : 1;\n}\n\nfunction formatTitle(title: string) {\n  return lodash.startCase(title);\n}\n\nfunction formatDate(date: any) {\n  // Extract day, month, and year\n  date = new Date(date);\n  const day = date.getDate();\n  const month = date.getMonth() + 1; // Note: January is 0\n  const year = date.getFullYear();\n\n  // Pad day and month with leading zeros if needed\n  const paddedDay = day < 10 ? '0' + day : day;\n  const paddedMonth = month < 10 ? '0' + month : month;\n\n  // Format the date as dd/mm/yyyy\n  return `${paddedDay}/${paddedMonth}/${year}`;\n}\n\nfunction isEncodedURIComponent(html: string) {\n  // Check if the string contains typical URI encoded patterns like %20, %21, etc.\n  return /%[0-9A-Fa-f]{2}/.test(html);\n}\n\nfunction formatContent(html: string) {\n  try {\n    if (isEncodedURIComponent(html)) {\n      return decodeURIComponent(html);\n    }\n    return html;\n  } catch (e) {\n    return html;\n  }\n}\n\nexport {\n  isNum,\n  isStr,\n  strcmp,\n  isArray,\n  formatDate,\n  isValidUrl,\n  filterDigits,\n  ensureHTTPS,\n  formatTitle,\n  humanTimeDiff,\n  isValidString,\n  formatContent,\n};\n","import axios from 'axios';\nimport { getApiToken } from '../storage';\nimport { ensureHTTPS } from './utils';\n\n// api base url should change according to environment it is deployed\n\nexport const BASE_URL = 'https://api.smaro.app/api';\nexport const AWS_BUCKET_URL = 'https://myradonapp.s3.amazonaws.com';\n\nexport const api = {\n  get: async (url: string, params?: any) => {\n    const token = getApiToken();\n    console.log(token);\n    url = ensureHTTPS(url);\n    const config = {\n      headers: {\n        Token: token,\n      },\n      params,\n    };\n    return axios.get(url, config);\n  },\n\n  post: async (url: string, formData: any, headers = {}) => {\n    const token = getApiToken();\n    const config = {\n      method: 'post',\n      url: ensureHTTPS(url),\n      headers: {\n        ...headers,\n        Token: token,\n      },\n      data: formData,\n    };\n    return axios(config);\n  },\n  put: async (url: string, params: any, headers = {}) => {\n    const token = getApiToken();\n    const config = {\n      method: 'put',\n      url: ensureHTTPS(url),\n      headers: {\n        ...headers,\n        Token: token,\n      },\n      data: params,\n    };\n    return axios(config);\n  },\n  delete: async (url: string, params: any, headers = {}) => {\n    const token = getApiToken();\n    const config = {\n      method: 'delete',\n      url: ensureHTTPS(url),\n      headers: {\n        ...headers,\n        Token: token,\n      },\n      data: params,\n    };\n    return axios(config);\n  },\n  endpoints: {\n    report: {\n      get: BASE_URL + '/diagnostics/patient/report',\n    },\n    report_analysis: {\n      get: {\n        id: BASE_URL + '/patient/report/analysis',\n        radiologist: BASE_URL + '/radiologist/report/analysis',\n        patient: BASE_URL + '/radiologist/report/analysis/patient',\n      },\n      update: BASE_URL + '/patient/report/analysis/update',\n      reportPDF: BASE_URL + '/patient/report/analysis/pdf',\n    },\n    upload: {\n      image: BASE_URL + '/upload/picture',\n      document: BASE_URL + '/upload/picture',\n    },\n    modality: {\n      get: BASE_URL + '/modality',\n    },\n    test_type: {\n      get: BASE_URL + '/test-type',\n      get_by_modality: BASE_URL + '/test-type/by/modality-id',\n    },\n    dicom: {\n      upload: BASE_URL + '/upload/dicom/file ',\n    },\n    template: {\n      get_radiologist_templates: BASE_URL + '/report-templates/template/by/radiologist-id',\n    },\n    report_images: {\n      create: BASE_URL + '/patient/report/analysis/image/create',\n      get: BASE_URL + '/patient/report/analysis/image',\n      update: BASE_URL + '/patient/report/analysis/image/update',\n    },\n    authCheck: BASE_URL + '/check-auth-status',\n  },\n};\n","interface AnalysisTypes {\n  report_analysis_id: number;\n  patient_report_id: number;\n  findings: string;\n  impression: string;\n  comments: string;\n  report_status: string;\n  radiologist_id: number;\n  radiologist_name: string;\n  assigned_by: number;\n  registration_date?: any;\n  updated_time?: any;\n}\n\ninterface PatientTypes {\n  PatientId: string;\n  gender: string;\n  dob: string | Date;\n  patient_name: string;\n  patient_email: string;\n  patient_mobile: string;\n  address: string;\n  age: number;\n}\n\nexport interface ReportTypes {\n  id: number; // report table id\n  report_title: string;\n  referral_doctor: string;\n  ref_code: string;\n  patient_id: number;\n  patient_study_id: string;\n  techniques: string;\n  clinical_history: string | null;\n  clinical_history_file: string | null;\n  results_type: string;\n  doctor_id: number;\n  hospital_id: number;\n  client_login_id: number;\n  client_id: number;\n  branch_id: number;\n  doctor_name: string | null;\n  modality_id: number;\n  test_type_id: number;\n  modality: string;\n  test_type: string;\n  report_status: string;\n  clinical_history_count: number;\n  priority_type: string;\n  patient_study_instance_id: string;\n  inserted_time: string;\n  estatus: number;\n  short_code: string;\n  client_name: string;\n  branch_name: string;\n  impression: string;\n  images: string[];\n  template: {\n    label: string;\n    value: number;\n    findings: string;\n    impressions: string;\n    comments: string;\n    modality_id: string;\n  };\n}\n\nexport const initialAnalysisValues: ReportAnalysisTypes = {\n  images: [],\n  template: { comments: '', findings: '', impressions: '', label: '', modality_id: '', value: 0 },\n  PatientId: '',\n  address: '',\n  age: 0,\n  assigned_by: 0,\n  branch_id: 0,\n  branch_name: '',\n  client_id: 0,\n  client_login_id: 0,\n  client_name: '',\n  clinical_history: '',\n  findings: '',\n  comments: '',\n  techniques: '',\n  clinical_history_count: 0,\n  clinical_history_file: '',\n  dob: '',\n  doctor_id: 0,\n  doctor_name: '',\n  estatus: 0,\n  gender: '',\n  hospital_id: 0,\n  id: 0,\n  referral_doctor: '',\n  report_title: '',\n  radiologist_name: '',\n  impression: '',\n  inserted_time: '',\n  modality: '',\n  modality_id: 0,\n  patient_email: '',\n  patient_id: 0,\n  patient_mobile: '',\n  patient_name: '',\n  patient_report_id: 0,\n  patient_study_id: '',\n  patient_study_instance_id: '',\n  priority_type: '',\n  radiologist_id: 0,\n  ref_code: '',\n  registration_date: undefined,\n  report_analysis_id: 0,\n  report_status: '',\n  results_type: '',\n  short_code: '',\n  test_type: '',\n  test_type_id: 0,\n  updated_time: undefined,\n};\n\nexport type ReportAnalysisTypes = AnalysisTypes & ReportTypes & PatientTypes;\n","import toast from 'react-hot-toast';\n\nfunction notify(message: string) {\n  toast(message, {\n    position: 'top-right',\n  });\n}\nfunction showSuccessToast(message: string) {\n  toast.success(message, {\n    position: 'top-right',\n  });\n}\n\nfunction showErrorToast(message: string) {\n  toast.error(message, {\n    position: 'top-right',\n  });\n}\n\nexport { notify, showSuccessToast, showErrorToast };\n","import React from 'react';\nimport classNames from 'classnames';\nimport { FunctionComponent } from 'react';\n\ninterface LabelContainerProps {\n  label: string;\n  children: React.ReactNode;\n  bold?: boolean;\n  style?: React.CSSProperties;\n}\n\nconst LabelHWrap: FunctionComponent<LabelContainerProps> = ({ label, children, bold, style }) => {\n  return (\n    <div className=\"mr-[10px] flex items-center\">\n      <div className=\"w-[35%]\">\n        <h3\n          style={style}\n          className={classNames(\n            'min-w-max text-sm font-normal capitalize text-black',\n            bold && 'font-bold'\n          )}\n        >\n          {label}\n        </h3>\n      </div>\n      <div className=\"text-wrap w-[65%] p-1 text-sm capitalize\">{children}</div>\n    </div>\n  );\n};\n\nexport default LabelHWrap;\n","import React from 'react';\ninterface CustomInputProps {\n  value?: string;\n  onChange?: (arg: React.ChangeEvent<HTMLInputElement>) => void;\n  placeholder?: string;\n  type?: React.HTMLInputTypeAttribute;\n}\n\nconst CustomInput: React.FC<CustomInputProps> = ({\n  onChange,\n  value,\n  placeholder = 'Choose file',\n  type = 'text',\n}) => {\n  return (\n    <input\n      type={type}\n      className=\"w-full rounded-[6px] border border-[#DEE2E6] bg-white px-2 py-[5px] text-base font-normal text-black outline-none\"\n      value={value}\n      onChange={onChange}\n      placeholder={placeholder}\n    />\n  );\n};\n\nexport default CustomInput;\n","import React, { useRef } from 'react';\nimport { FormikErrors, FormikTouched } from 'formik';\nimport { showErrorToast } from './notify';\nimport { api, AWS_BUCKET_URL } from '../api';\nimport { isValidUrl } from '../utils';\nimport classNames from 'classnames';\nimport { isStr } from '../utils';\n\ninterface CustomUploaderWithSelectBoxProps {\n  label: string;\n  value: string;\n  width?: number | string;\n  setValue: (filepath: string) => void;\n  errorText?: string | string[] | FormikErrors<any> | FormikErrors<any>[];\n  touched?: boolean | FormikTouched<any> | FormikTouched<any>[] | undefined;\n  bold?: boolean;\n}\n\nconst CustomImageUpload: React.FC<CustomUploaderWithSelectBoxProps> = ({\n  label,\n  value,\n  setValue,\n  errorText,\n  touched,\n  bold,\n}) => {\n  const inputRef = useRef<any>(null);\n  // const auth = useAuth();\n\n  const onChange = async (event: any) => {\n    const file = event?.target?.files[0];\n    if (!file) {\n      showErrorToast('Invalid file');\n      return;\n    }\n\n    const size = file.size / (1024 * 1024);\n\n    if (size <= 0) {\n      showErrorToast('Please upload valid file');\n      return;\n    }\n    if (size > 3) {\n      showErrorToast('File size is more than 3MB,please upload file size less than 3 mb');\n      return;\n    }\n\n    const type = file.type;\n    const formData = new FormData();\n    formData.append('file', file);\n\n    try {\n      let API_URL: string;\n      if (type === 'application/pdf') {\n        API_URL = `${api.endpoints.upload.document}/${1}`;\n      } else {\n        API_URL = `${api.endpoints.upload.image}/${1}`;\n      }\n\n      const headers = {\n        'Content-Type': 'multipart/form-data',\n      };\n\n      const { status: apiStatus, data: apiData } = await api.post(API_URL, formData, headers);\n\n      if (apiStatus === 200) {\n        const { statusCode, data }: any = apiData;\n        if (statusCode === 200) {\n          setValue(data); // Ensure the returned data is the correct file path\n        }\n      } else {\n        showErrorToast('Failed to upload file');\n      }\n    } catch (error) {\n      showErrorToast('An error occurred during the file upload');\n    }\n  };\n\n  const getUrl = (url: string) => {\n    return isValidUrl(url) ? url : `${AWS_BUCKET_URL}/${url}`;\n  };\n\n  return (\n    <div className=\"flex flex-col\">\n      <h4\n        className={classNames(\n          'mb-[6px] text-sm capitalize text-black',\n          bold && '!text-base !font-normal'\n        )}\n      >\n        {label}\n      </h4>\n      <div className=\"rounded border border-dashed border-gray-400 p-4\">\n        <input\n          ref={inputRef}\n          type=\"file\"\n          accept=\".png ,.jpg ,.jpeg\"\n          name=\"file\"\n          className=\"hidden\"\n          onChange={onChange}\n        />\n        <label\n          onClick={() => inputRef?.current?.click()}\n          className=\"cursor-pointer text-blue-500 hover:underline\"\n        >\n          Choose file\n        </label>\n      </div>\n      <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-300\">PNG or JPG (MAX.3MB).</p>\n      {isStr(value) && (\n        <a\n          href={getUrl(value)}\n          className=\"h-[25px] w-[75px] cursor-pointer content-center rounded-lg bg-green-700 text-center text-xs font-medium text-white\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          View File\n        </a>\n      )}\n      {touched && errorText && String(errorText)?.length > 0 && (\n        <span className=\"text-xs text-red-600\">{String(errorText)}</span>\n      )}\n    </div>\n  );\n};\n\nexport default CustomImageUpload;\n","import React, { useEffect, useState } from 'react';\nimport { IoMdTrash } from 'react-icons/io';\nimport CustomImageUpload from './CustomImageUpload';\nimport { isArray } from '../utils';\n\ninterface ReportImagesProps {\n  initialImages?: string[]; // URLs or base64 strings of the images\n  onChange: (images: string[]) => void;\n}\n\nconst ReportImages: React.FC<ReportImagesProps> = ({ initialImages = [], onChange }) => {\n  const [uploads, setUploads] = useState<any[]>([]);\n\n  const handleOnChange = (filter: any[]) => {\n    const images = filter.map(item => {\n      return item.file;\n    });\n    onChange(images);\n  };\n\n  const handleAddUpload = () => {\n    setUploads([...uploads, { id: Date.now(), file: '' }]);\n  };\n\n  const handleSetFile = (id: number, value: string) => {\n    const updatedUploads = uploads.map(upload =>\n      upload.id === id ? { ...upload, file: value } : upload\n    );\n    setUploads(updatedUploads);\n    handleOnChange(updatedUploads);\n  };\n\n  const handleRemoveUpload = (id: number) => {\n    const filter = uploads.filter(upload => upload.id !== id);\n    setUploads(filter);\n    handleOnChange(filter);\n  };\n\n  useEffect(() => {\n    if (!isArray(uploads) && isArray(initialImages)) {\n      const arr = initialImages.map((img, index) => ({\n        id: Date.now() + index, // Create unique ids for initial images\n        file: img,\n      }));\n      setUploads(arr);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [initialImages]);\n\n  return (\n    <div className=\"flex flex-wrap gap-10\" style={{ gap: '20px' }}>\n      {uploads.map((upload, index) => (\n        <div key={upload.id} className=\"relative\" style={{ position: 'relative' }}>\n          <CustomImageUpload\n            label={`Upload ${index + 1}`}\n            value={upload.file}\n            setValue={value => handleSetFile(upload.id, value)}\n          />\n          <IoMdTrash\n            style={{ position: 'absolute', right: '-8px', top: '-15px' }}\n            className=\"absolute -top-2 -right-2 mt-2 mr-2 cursor-pointer text-red-500\"\n            size={24}\n            onClick={() => handleRemoveUpload(upload.id)}\n          />\n        </div>\n      ))}\n      <button\n        className=\"mt-4 h-fit rounded bg-blue-500 p-2 text-white\"\n        onClick={handleAddUpload}\n        style={{ backgroundColor: '#0ea5e9', height: 'fit-content' }}\n      >\n        Upload\n      </button>\n    </div>\n  );\n};\n\nexport default ReportImages;\n","import React, { useEffect, useState } from 'react';\nimport Select, { StylesConfig } from 'react-select';\n\ninterface OwnProps {\n  label: string;\n  value: any;\n  setValue: (val: any) => void;\n  options: { label: string; value: any; color: string }[];\n}\n\ntype Props = OwnProps;\n\nconst CustomSelectBox: React.FC<Props> = ({ label, value, setValue, options }) => {\n  const selectStyles: StylesConfig<{ label: string; value: string; color: string }, true> = {\n    option: baseStyles => {\n      return {\n        ...baseStyles,\n        color: 'black',\n      };\n    },\n    container: baseStyles => {\n      return {\n        ...baseStyles,\n        width: '100%',\n        backgroundColor: 'white',\n      };\n    },\n    singleValue: baseStyle => {\n      return {\n        ...baseStyle,\n        paddingLeft: '10px',\n        paddingRight: '10px',\n      };\n    },\n  };\n\n  const [selected, setSelected] = useState({\n    value: '',\n    label: label,\n    color: 'black',\n  });\n\n  useEffect(() => {\n    const item = options.find(item => item.value === value);\n    if (item !== undefined && item !== null) {\n      setSelected(item);\n    } else {\n      setSelected({ color: '', label: label, value: '' });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [options, value]);\n  return (\n    <Select\n      value={selected}\n      styles={selectStyles}\n      onChange={item => setValue(item)}\n      options={options}\n      className=\"bg-white text-base font-normal text-black\"\n      placeholder={label}\n    />\n  );\n};\n\nexport default CustomSelectBox;\n","import React, { useRef } from 'react';\nimport SunEditor from 'suneditor-react';\nimport 'suneditor/dist/css/suneditor.min.css';\nimport SunEditorCore from 'suneditor/src/lib/core';\nimport { SunEditorOptions } from 'suneditor/src/options';\nimport katex from 'katex';\nimport { formatContent } from '../utils';\nimport DOMPurify from 'dompurify';\n\ninterface Props {\n  value: string;\n  onChange: (content: string) => void;\n  placeholder?: string;\n}\n\nconst options: SunEditorOptions = {\n  height: '200px',\n  buttonList: [\n    ['undo', 'redo'],\n    ['removeFormat'],\n    ['bold', 'underline', 'italic'],\n    ['fontColor', 'hiliteColor'],\n    ['align', 'horizontalRule', 'list'],\n    ['table', 'link'],\n    ['fullScreen'],\n  ],\n  katex: katex,\n  fontSize: [8, 9, 10, 11, 12, 14, 16, 18, 20],\n  font: [\n    'Arial',\n    'Comic Sans MS',\n    'Courier New',\n    'Impact',\n    'Georgia',\n    'tahoma',\n    'Trebuchet MS',\n    'Verdana',\n  ],\n  colorList: [\n    '#828282',\n    '#FF5400',\n    '#676464',\n    '#F1F2F4',\n    '#FF9B00',\n    '#F00',\n    '#fa6e30',\n    '#000',\n    'rgba(255, 153, 0, 0.1)',\n    '#FF6600',\n    '#0099FF',\n    '#74CC6D',\n    '#FF9900',\n    '#CCCCCC',\n  ],\n};\n\n// eslint-disable-next-line react/prop-types\nconst TextEditor: React.FC<Props> = ({ onChange, value, placeholder }) => {\n  const editor = useRef<SunEditorCore>();\n\n  const getSunEditorInstance = (sunEditor: SunEditorCore) => {\n    editor.current = sunEditor;\n  };\n\n  const onChangeEditorValue = (html: string) => {\n    html = formatContent(html);\n    html = DOMPurify.sanitize(html);\n    onChange(encodeURIComponent(html));\n  };\n\n  return (\n    <SunEditor\n      setContents={formatContent(value)}\n      height=\"200px\"\n      placeholder={placeholder}\n      setOptions={options}\n      onChange={onChangeEditorValue}\n      getSunEditorInstance={getSunEditorInstance}\n    />\n  );\n};\n\nexport default TextEditor;\n","import React, { useState } from 'react';\nimport { MdEdit } from 'react-icons/md';\nimport { FaEye } from 'react-icons/fa';\nimport { ReportAnalysisTypes } from '../types/ReportAnalysisTypes';\nimport TextEditor from './TextEditor';\nimport { formatContent } from '../utils';\n\ninterface OwnProps {\n  sectionName: string;\n  value: keyof ReportAnalysisTypes;\n  dataName: string;\n  isEditEnabled: boolean;\n  onChangeValue: (dataName: string, diagnosisText: string) => void;\n}\n\ntype Props = OwnProps;\n\nconst DiagnosisSection: React.FC<Props> = ({ ...props }) => {\n  const [isEdit, setIsEdit] = useState(true);\n\n  const onChangeValue = (encodedHtml: string) => {\n    props.onChangeValue(props.dataName, encodedHtml);\n  };\n\n  return (\n    <div>\n      <div className=\"flex items-center justify-between text-black\">\n        <strong>{props.sectionName}</strong>\n        <div>\n          {props.isEditEnabled && !isEdit && (\n            <MdEdit className=\"fill-green-600\" size={20} onClick={() => setIsEdit(true)} />\n          )}\n          {props.isEditEnabled && isEdit && (\n            <FaEye className=\"fill-blue-600\" size={20} onClick={() => setIsEdit(false)} />\n          )}\n        </div>\n      </div>\n\n      {isEdit && props.isEditEnabled ? (\n        <div>\n          <br />\n          <TextEditor value={props.value} onChange={onChangeValue} />\n        </div>\n      ) : (\n        <div\n          className=\"text-black\"\n          dangerouslySetInnerHTML={{ __html: formatContent(props.value) }}\n        />\n      )}\n      <br />\n    </div>\n  );\n};\n\nexport default DiagnosisSection;\n","import { useLocation } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { isStr } from '../utils';\nimport { setApiToken } from '../../storage';\nexport default function useToken() {\n  const location = useLocation();\n  const [token, setToken] = useState<string | null>(null);\n  const [reportId, setReportId] = useState<number | null>(null);\n\n  useEffect(() => {\n    const params = new URLSearchParams(location.search);\n    const _token = params.get('bearer');\n    if (isStr(_token)) {\n      const decoded_token = decodeURIComponent(_token);\n      setApiToken(decoded_token);\n      setToken(decoded_token);\n    }\n    const report_id = params.get('reportId');\n    if (isStr(report_id)) {\n      setReportId(Number(report_id));\n    }\n  }, [location.search]);\n\n  return { token, reportId };\n}\n","import React, { useEffect, useState } from 'react';\nimport { useFormik } from 'formik';\n\nimport { api, AWS_BUCKET_URL, BASE_URL } from './api';\nimport { isNum, isStr, isArray, isValidUrl } from './utils';\nimport { ReportAnalysisTypes } from './types/ReportAnalysisTypes';\nimport { initialAnalysisValues } from './types/ReportAnalysisTypes';\nimport { showErrorToast, showSuccessToast } from './components/notify';\nimport { Toaster } from 'react-hot-toast';\nimport LabelHWrap from './components/LabelHWrap';\nimport CustomInput from './components/CustomInput';\nimport ReportImages from './components/ReportImages';\nimport CustomSelectBox from './components/CustomSelectBox';\nimport DiagnosisSection from './components/DiagnosisSection';\nimport useToken from './hooks/useToken';\n\ninterface TemplateDataTypes {\n  id: number;\n  label: string;\n  findings: keyof ReportAnalysisTypes;\n  comments: keyof ReportAnalysisTypes;\n  impression: keyof ReportAnalysisTypes;\n  modality_id: number;\n  report_template_name: string;\n}\n\ntype ApiDataTypes = {\n  statusCode: number;\n  data?: any;\n  message?: string;\n  error?: string;\n};\n\ninterface DefaultSectionDataTypes {\n  sectionName: string;\n  dataName: keyof ReportAnalysisTypes;\n  isEditable: boolean;\n}\nconst DataLabel = ({ label, value }: { label: string; value: any }) => {\n  return (\n    <div className=\"w-full min-w-max\">\n      <LabelHWrap label={label}>\n        <p className=\"min-w-max font-bold text-black\">{value}</p>\n      </LabelHWrap>\n    </div>\n  );\n};\n\nconst report_result_options = [\n  { label: 'Select Result Status', value: '', color: 'black' },\n  { label: 'Normal', value: 'Normal', color: 'black' },\n  { label: 'Abnormal', value: 'Abnormal', color: 'black' },\n];\n\nconst Report: React.FC = () => {\n  const { token, reportId } = useToken();\n  const { values, setFieldValue, handleSubmit } = useFormik({\n    initialValues: initialAnalysisValues,\n    onSubmit: async (params: ReportAnalysisTypes) => {\n      await updatePatientReportAnalysis(params);\n    },\n  });\n\n  const defaultSections: DefaultSectionDataTypes[] = [\n    { sectionName: 'Clinical Information', dataName: 'clinical_history', isEditable: false },\n    { sectionName: 'Technique', dataName: 'techniques', isEditable: false },\n    { sectionName: 'Findings', dataName: 'findings', isEditable: true },\n    { sectionName: 'Impressions', dataName: 'impression', isEditable: true },\n    { sectionName: 'Comments', dataName: 'comments', isEditable: true },\n  ];\n  const [modalities, setModalities] = useState<any[]>([]);\n  const [testTypes, setTestTypes] = useState<any[]>([]);\n  const [templates, setTemplates] = useState([]);\n  const onSelectTemplate = (option: any) => {\n    void setFieldValue('template', option);\n    void setFieldValue('report_title', option.label);\n    for (const item of defaultSections) {\n      if (item.isEditable) {\n        void setFieldValue(item.dataName, option[item.dataName]);\n      }\n    }\n  };\n\n  const getUrl = (url: string) => {\n    return isValidUrl(url) ? url : `${AWS_BUCKET_URL}/${url}`;\n  };\n\n  const onSelectModality = async (option: { value: number; label: string }) => {\n    void setFieldValue('modality_id', option.value);\n    await fetchTestTypes(option.value);\n    await getTemplates(values.radiologist_id, option.value);\n  };\n\n  const fetchModalities = async () => {\n    try {\n      const { status: apiStatus, data: apiData } = await api.get(api.endpoints.modality.get, {});\n      if (apiStatus === 200) {\n        const { statusCode, data } = apiData;\n        if (statusCode === 200) {\n          const filtered = data.map((item: { id: number; modality: string }) => {\n            return {\n              value: item.id,\n              label: item.modality,\n            };\n          });\n          setModalities(filtered);\n        }\n      }\n    } catch (e) {\n      showErrorToast('Not able to get modalities');\n    }\n  };\n\n  const fetchTestTypes = async (modalityId: number) => {\n    setTestTypes([]);\n    if (!isNum(modalityId)) {\n      return;\n    }\n    const { status, data: apiData } = await api.get(\n      api.endpoints.test_type.get_by_modality + '/' + modalityId,\n      {}\n    );\n    if (status === 200) {\n      const { statusCode, data } = apiData;\n      if (statusCode === 200) {\n        const list = data.map((item: { id: number; test_type: string }) => {\n          return {\n            value: item.id,\n            label: item.test_type,\n            color: 'black',\n          };\n        });\n        setTestTypes([...[{ label: 'Select Test Type', value: '' }], ...list]);\n      }\n    } else {\n      setTestTypes([]);\n    }\n  };\n\n  const getTemplates = async (radiologist_id: number, modality_id: number) => {\n    try {\n      if (!isNum(modality_id)) {\n        return;\n      }\n      if (!isNum(radiologist_id)) {\n        showErrorToast('Invalid User Id');\n        return;\n      }\n      const headers = {\n        'Content-Type': 'application/json',\n      };\n      const params = JSON.stringify({\n        radiologist_id: radiologist_id,\n        modality_id: modality_id,\n      });\n      const { status: apiStatus, data: apiData } = await api.post(\n        `${api.endpoints.template.get_radiologist_templates}`,\n        params,\n        headers\n      );\n\n      if (apiStatus === 200) {\n        const { statusCode, data } = apiData as unknown as ApiDataTypes;\n        if (statusCode === 200) {\n          const filtered = data.map((item: TemplateDataTypes) => {\n            return {\n              label: item.report_template_name,\n              value: item.id,\n              findings: item.findings,\n              impression: item.impression,\n              comments: item.comments,\n              modality_id: item.modality_id,\n            };\n          });\n\n          setTemplates(filtered);\n        } else {\n          showErrorToast('Report templates not found,please add some templates');\n        }\n      }\n    } catch (e) {\n      showErrorToast('Report templates not found,please add some templates');\n    }\n  };\n\n  const fetchReportImages = async (report_analysis_id: number) => {\n    if (!report_analysis_id) {\n      return;\n    }\n    try {\n      const { data: apiData } = await api.get(\n        `${api.endpoints.report_images.get}/${report_analysis_id}`\n      );\n      const { data, statusCode } = apiData;\n      if (statusCode === 200) {\n        const images_map = data.map((item: { image: string }) => {\n          return `${AWS_BUCKET_URL}/${item.image}`;\n        });\n        void setFieldValue('images', images_map);\n      }\n    } catch (e) {\n      showErrorToast('Something went wrong');\n    }\n  };\n\n  const createReportImages = async () => {\n    const params = values.images.map(item => {\n      return { report_analysis_id: values.report_analysis_id, image: item };\n    });\n    const payload = { reportImages: params };\n    try {\n      const { data: apiData } = await api.post(api.endpoints.report_images.create, payload);\n      const { statusCode, data } = apiData as unknown as ApiDataTypes;\n\n      if (statusCode === 200) {\n        showSuccessToast('Image uploaded successfully');\n        void setFieldValue('images', data);\n      } else {\n        showErrorToast('Something went wrong');\n      }\n    } catch (e) {\n      showErrorToast('Something went wrong,please try again');\n    }\n  };\n\n  const updatePatientReportAnalysis = async (params: ReportAnalysisTypes) => {\n    try {\n      if (!params.id) {\n        showErrorToast('Invalid Report Id');\n        return;\n      }\n      if (!params.report_analysis_id) {\n        showErrorToast('Invalid Report Analysis ID');\n        return;\n      }\n      const headers = {\n        'Content-Type': 'application/json',\n      };\n\n      const { status: apiStatus, data: apiData } = await api.post(\n        api.endpoints.report_analysis.update,\n        JSON.stringify({\n          ...params,\n          techniques: encodeURIComponent(params.techniques),\n          clinical_history: encodeURIComponent(params.clinical_history),\n        }),\n        headers\n      );\n      if (apiStatus === 200) {\n        const { statusCode } = apiData as unknown as ApiDataTypes;\n        if (statusCode === 200) {\n          if (isArray(values.images)) {\n            await handleReportImages();\n            await getPatientReport(values.id);\n          }\n          showSuccessToast('Success! Patient Report Saved');\n        }\n      } else {\n        showErrorToast('Failure! Patient Report Not Saved');\n      }\n    } catch (e) {\n      showErrorToast('Something went wrong,please try again');\n    }\n  };\n\n  const getPatientReport = async (id: number) => {\n    if (!isNum(id)) {\n      showErrorToast('Invalid Report Id');\n      return;\n    }\n    try {\n      const { status: apiStatus, data: apiData } = await api.get(\n        `${api.endpoints.report.get}/${id}`\n      );\n\n      if (apiStatus === 200) {\n        const { statusCode, data } = apiData;\n        if (statusCode === 200) {\n          if (isArray(data)) {\n            const result = data[0];\n            void setFieldValue('id', result?.id);\n            void setFieldValue('radiologist_id', result?.radiologist_id);\n            void setFieldValue('branch_name', result?.branch_name);\n            void setFieldValue('radiologist_name', result?.radiologist_name);\n            void setFieldValue('report_analysis_id', result?.report_analysis_id);\n            void setFieldValue(\n              'PatientId',\n              isStr(result?.PatientId) ? result?.PatientId : result?.patient_id ?? ''\n            );\n            void setFieldValue('patient_id', result?.patient_id);\n            void setFieldValue('patient_name', result?.patient_name);\n            void setFieldValue('age', result?.age);\n            void setFieldValue('gender', result?.gender);\n            void setFieldValue(\n              'referral_doctor',\n              isStr(result?.referral_doctor) ? result?.referral_doctor : result?.doctor_name ?? ''\n            );\n            void setFieldValue('priority_type', result?.priority_type);\n            void setFieldValue('results_type', result?.results_type);\n            void setFieldValue('report_status', result?.report_status);\n            void setFieldValue('modality_id', result?.modality_id);\n            void setFieldValue('test_type_id', result?.test_type_id);\n            void setFieldValue('clinical_history', result?.clinical_history);\n            void setFieldValue('clinical_history_file', result?.clinical_history_file);\n            void setFieldValue('techniques', result?.techniques);\n            void setFieldValue('findings', result?.findings);\n            void setFieldValue('impression', result?.impression);\n            void setFieldValue('comments', result?.comments);\n            void setFieldValue('report_title', result?.report_title);\n            void setFieldValue('patient_study_id', result?.patient_study_id);\n            await fetchTestTypes(result?.modality_id);\n            await getTemplates(result?.radiologist_id, result?.modality_id);\n            await fetchReportImages(result?.report_analysis_id);\n          } else {\n            showErrorToast('Unable to fetch patient report');\n          }\n        } else {\n          showErrorToast('Unable to fetch patient report');\n        }\n      }\n    } catch (e) {\n      showErrorToast('Unable to fetch patient report');\n    }\n  };\n\n  const updateReportImages = async (data: string[]) => {\n    const params = data.map(item => {\n      return { report_analysis_id: values.report_analysis_id, image: item };\n    });\n    const payload = {\n      report_analysis_id: values.report_analysis_id,\n      reportImages: params,\n    };\n    const headers = {\n      'Content-Type': 'application/json',\n    };\n    try {\n      const { data: apiData } = await api.put(api.endpoints.report_images.update, payload, headers);\n      const { statusCode } = apiData as unknown as ApiDataTypes;\n      if (statusCode === 200) {\n        showSuccessToast('Image updated successfully');\n      } else {\n        showErrorToast('Image update failed');\n      }\n    } catch (e) {\n      showErrorToast('Upload failed please try again');\n    }\n  };\n\n  const handleReportImages = async () => {\n    if (!values.images.length) {\n      await updateReportImages([]);\n      return;\n    }\n\n    const flag = values.images.find(item => item.includes(AWS_BUCKET_URL));\n    if (flag) {\n      const filtered_images = values.images.map(item => {\n        return item.replace(`${AWS_BUCKET_URL}/`, '');\n      });\n      await updateReportImages(filtered_images);\n      return;\n    }\n    await createReportImages();\n  };\n\n  const getReportStatus = (status: string) => {\n    if (status === 'Inprocess') {\n      return 'In Progress';\n    }\n    return status;\n  };\n\n  const referral_doctor = isStr(values?.referral_doctor)\n    ? values?.referral_doctor\n    : values?.doctor_name ?? '';\n\n  useEffect(() => {\n    if (isStr(token) && isNum(reportId)) {\n      void (async () => {\n        await fetchModalities();\n        await getPatientReport(reportId);\n      })();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [token, reportId]);\n\n  if (!isNum(values?.id)) {\n    return (\n      <div className=\"flex h-full w-full content-center items-center justify-center rounded border border-gray-400 bg-white p-1 text-center\">\n        {isStr(token) ? (\n          <span className=\"text-bold animate-pulse text-xl text-red-700\">\n            Loading, please wait...\n          </span>\n        ) : (\n          <span className=\"text-bold text-xl text-red-700\">\n            You are not authorised to view this panel, Please exit.\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      style={{ position: 'relative' }}\n      className=\"min-h-[calc(100vh-100px)] w-full overflow-y-auto rounded border border-gray-400 bg-white p-1\"\n    >\n      <Toaster />\n      <div className=\"w-full border-gray-400 bg-purple-200 p-1\">\n        <div className=\"mb-4 grid w-full grid-cols-2 gap-y-1 md:grid-cols-2 lg:grid-cols-2 xl:grid-cols-2\">\n          <DataLabel label=\"Patient Id\" value={values?.patient_id} />\n          <DataLabel label=\"Name\" value={values?.patient_name} />\n          <DataLabel label=\"Gender\" value={values?.gender} />\n          <DataLabel label=\"Age\" value={values?.age} />\n          <DataLabel label=\"Diagnostics\" value={values?.branch_name} />\n          <DataLabel label=\"Doctor\" value={referral_doctor} />\n          <DataLabel label=\"Radiologist\" value={values?.radiologist_name} />\n          <DataLabel label=\"Priority\" value={values?.priority_type} />\n          <DataLabel label=\"Report Status\" value={getReportStatus(values?.report_status)} />\n        </div>\n        <div className=\"grid w-full gap-y-3\">\n          <LabelHWrap label=\"Report Title\">\n            <CustomInput\n              value={values.report_title}\n              onChange={e => setFieldValue('report_title', e.target.value)}\n              placeholder=\"Enter Report Title\"\n            />\n          </LabelHWrap>\n          <LabelHWrap label=\"Result\">\n            <CustomSelectBox\n              label=\"Select Result\"\n              options={report_result_options}\n              setValue={option => setFieldValue('results_type', option.value)}\n              value={values.results_type}\n            />\n          </LabelHWrap>\n          <LabelHWrap label=\"Modality\">\n            <CustomSelectBox\n              label=\"Select Modality\"\n              value={values.modality_id}\n              setValue={option => onSelectModality(option)}\n              options={modalities}\n            />\n          </LabelHWrap>\n          <LabelHWrap label=\"Test Type\">\n            <CustomSelectBox\n              label=\"Select Test Type\"\n              options={testTypes}\n              setValue={option => setFieldValue('test_type_id', option.value)}\n              value={values.test_type_id}\n            />\n          </LabelHWrap>\n          <LabelHWrap label=\"Template\">\n            <CustomSelectBox\n              label=\"Select Template\"\n              options={templates}\n              setValue={option => onSelectTemplate(option)}\n              value={values.template.value}\n            />\n          </LabelHWrap>\n        </div>\n      </div>\n\n      <div>\n        {isStr(values?.clinical_history_file) && (\n          <div className=\"my-1\">\n            <h4 className=\"mb-2 text-sm font-bold text-black\">Prescription</h4>\n            <a\n              href={getUrl(String(values.clinical_history_file))}\n              target=\"_blank\"\n              className=\"h-[35px] w-[150px] content-center items-center rounded bg-blue-700 p-1 text-center text-sm text-white dark:text-white\"\n              rel=\"noreferrer\"\n            >\n              View File\n            </a>\n          </div>\n        )}\n      </div>\n      <div className=\"my-3 w-full\">\n        {values &&\n          defaultSections.map(section => (\n            <DiagnosisSection\n              key={section.dataName}\n              isEditEnabled={section.isEditable}\n              sectionName={section.sectionName}\n              dataName={section.dataName}\n              onChangeValue={setFieldValue}\n              value={values[section.dataName]}\n            />\n          ))}\n      </div>\n\n      <div className=\"my-3 w-full pt-5\">\n        <h1 className=\"mb-5 font-bold text-black\">Upload Images</h1>\n        <ReportImages\n          initialImages={values.images}\n          onChange={_images => setFieldValue('images', _images)}\n        />\n      </div>\n\n      <div\n        style={{ position: 'fixed', bottom: '10px', right: '10px' }}\n        className=\"absolute flex items-center justify-end gap-x-2 border-[#CED4DA] px-4\"\n      >\n        <button className=\"rounded-[4px] bg-[#6C757D] p-2 text-base font-semibold text-white\">\n          Cancel\n        </button>\n        <a\n          href={`${BASE_URL}/orthanc/study/files/${values.patient_study_id}`}\n          className=\"rounded-[4px] bg-green-700 p-2 text-base font-semibold text-white\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          Download Files\n        </a>\n        <button\n          className=\"rounded-[4px] bg-green-700 p-2 text-base font-semibold text-white\"\n          onClick={() => handleSubmit()}\n        >\n          Send Report Back\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Report;\n","import { id } from './id';\nimport PatientReportTab from './Report';\n\n/**\n * You can remove any of the following modules if you don't need them.\n */\nexport default {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   * Your ID can be anything you want, but it should be unique.\n   */\n  id,\n\n  /**\n   * Perform any pre-registration tasks here. This is called before the extension\n   * is registered. Usually we run tasks such as: configuring the libraries\n   * (e.g. cornerstone, cornerstoneTools, ...) or registering any services that\n   * this extension is providing.\n   */\n  preRegistration: ({ servicesManager, commandsManager, configuration = {} }) => {},\n  /**\n   * PanelModule should provide a list of panels that will be available in OHIF\n   * for Modes to consume and render. Each panel is defined by a {name,\n   * iconName, iconLabel, label, component} object. Example of a panel module\n   * is the StudyBrowserPanel that is provided by the default extension in OHIF.\n   */\n  getPanelModule: ({ servicesManager, commandsManager, extensionManager }) => {\n    return [\n      {\n        name: 'Report',\n        iconName: 'logo-ohif-small',\n        iconLabel: 'Report',\n        label: 'Report',\n        component: PatientReportTab,\n      },\n    ];\n  },\n  /**\n   * ViewportModule should provide a list of viewports that will be available in OHIF\n   * for Modes to consume and use in the viewports. Each viewport is defined by\n   * {name, component} object. Example of a viewport module is the CornerstoneViewport\n   * that is provided by the Cornerstone extension in OHIF.\n   */\n  getViewportModule: ({ servicesManager, commandsManager, extensionManager }) => {},\n  /**\n   * ToolbarModule should provide a list of tool buttons that will be available in OHIF\n   * for Modes to consume and use in the toolbar. Each tool button is defined by\n   * {name, defaultComponent, clickHandler }. Examples include radioGroupIcons and\n   * splitButton toolButton that the default extension is providing.\n   */\n  getToolbarModule: ({ servicesManager, commandsManager, extensionManager }) => {},\n  /**\n   * LayoutTemplateMOdule should provide a list of layout templates that will be\n   * available in OHIF for Modes to consume and use to layout the viewer.\n   * Each layout template is defined by a { name, id, component}. Examples include\n   * the default layout template provided by the default extension which renders\n   * a Header, left and right sidebars, and a viewport section in the middle\n   * of the viewer.\n   */\n  getLayoutTemplateModule: ({ servicesManager, commandsManager, extensionManager }) => {},\n  /**\n   * SopClassHandlerModule should provide a list of sop class handlers that will be\n   * available in OHIF for Modes to consume and use to create displaySets from Series.\n   * Each sop class handler is defined by a { name, sopClassUids, getDisplaySetsFromSeries}.\n   * Examples include the default sop class handler provided by the default extension\n   */\n  getSopClassHandlerModule: ({ servicesManager, commandsManager, extensionManager }) => {},\n  /**\n   * HangingProtocolModule should provide a list of hanging protocols that will be\n   * available in OHIF for Modes to use to decide on the structure of the viewports\n   * and also the series that hung in the viewports. Each hanging protocol is defined by\n   * { name, protocols}. Examples include the default hanging protocol provided by\n   * the default extension that shows 2x2 viewports.\n   */\n  getHangingProtocolModule: ({ servicesManager, commandsManager, extensionManager }) => {},\n  /**\n   * CommandsModule should provide a list of commands that will be available in OHIF\n   * for Modes to consume and use in the viewports. Each command is defined by\n   * an object of { actions, definitions, defaultContext } where actions is an\n   * object of functions, definitions is an object of available commands, their\n   * options, and defaultContext is the default context for the command to run against.\n   */\n  getCommandsModule: ({ servicesManager, commandsManager, extensionManager }) => {},\n  /**\n   * ContextModule should provide a list of context that will be available in OHIF\n   * and will be provided to the Modes. A context is a state that is shared OHIF.\n   * Context is defined by an object of { name, context, provider }. Examples include\n   * the measurementTracking context provided by the measurementTracking extension.\n   */\n  getContextModule: ({ servicesManager, commandsManager, extensionManager }) => {},\n  /**\n   * DataSourceModule should provide a list of data sources to be used in OHIF.\n   * DataSources can be used to map the external data formats to the OHIF's\n   * native format. DataSources are defined by an object of { name, type, createDataSource }.\n   */\n  getDataSourcesModule: ({ servicesManager, commandsManager, extensionManager }) => {},\n};\n","var map = {\n\t\"./ckb.js\": 42897,\n\t\"./cs.js\": 28798,\n\t\"./da.js\": 92304,\n\t\"./de.js\": 55406,\n\t\"./en.js\": 6731,\n\t\"./es.js\": 90466,\n\t\"./fa.js\": 35339,\n\t\"./fr.js\": 88693,\n\t\"./he.js\": 42788,\n\t\"./index.js\": 75193,\n\t\"./it.js\": 13703,\n\t\"./ja.js\": 1735,\n\t\"./ko.js\": 2042,\n\t\"./lv.js\": 96497,\n\t\"./nl.js\": 25778,\n\t\"./pl.js\": 75869,\n\t\"./pt_br.js\": 7581,\n\t\"./ro.js\": 27834,\n\t\"./ru.js\": 83074,\n\t\"./se.js\": 63661,\n\t\"./tr.js\": 62429,\n\t\"./ua.js\": 79684,\n\t\"./ur.js\": 38337,\n\t\"./zh_cn.js\": 92534\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 86509;"],"names":["getApiToken","token","secureLocalStorage","getItem","String","ensureHTTPS","url","isStr","str","length","isArray","array","isNum","num","isValidUrl","string","URL","err","formatContent","html","test","isEncodedURIComponent","decodeURIComponent","e","BASE_URL","AWS_BUCKET_URL","api","get","async","params","console","log","config","headers","Token","axios","post","formData","method","data","put","delete","endpoints","report","report_analysis","id","radiologist","patient","update","reportPDF","upload","image","document","modality","test_type","get_by_modality","dicom","template","get_radiologist_templates","report_images","create","authCheck","initialAnalysisValues","images","comments","findings","impressions","label","modality_id","value","PatientId","address","age","assigned_by","branch_id","branch_name","client_id","client_login_id","client_name","clinical_history","techniques","clinical_history_count","clinical_history_file","dob","doctor_id","doctor_name","estatus","gender","hospital_id","referral_doctor","report_title","radiologist_name","impression","inserted_time","patient_email","patient_id","patient_mobile","patient_name","patient_report_id","patient_study_id","patient_study_instance_id","priority_type","radiologist_id","ref_code","registration_date","undefined","report_analysis_id","report_status","results_type","short_code","test_type_id","updated_time","showSuccessToast","message","toast","success","position","showErrorToast","error","LabelHWrap","children","bold","style","React","className","classNames","CustomInput","onChange","placeholder","type","CustomImageUpload","setValue","errorText","touched","inputRef","useRef","ref","accept","name","file","event","target","files","size","FormData","append","API_URL","status","apiStatus","apiData","statusCode","onClick","current","click","href","rel","ReportImages","initialImages","uploads","setUploads","useState","handleOnChange","filter","map","item","useEffect","arr","img","index","Date","now","gap","key","handleSetFile","updatedUploads","IoMdTrash","right","top","handleRemoveUpload","handleAddUpload","backgroundColor","height","CustomSelectBox","options","selected","setSelected","color","find","Select","styles","option","baseStyles","container","width","singleValue","baseStyle","paddingLeft","paddingRight","buttonList","katex","fontSize","font","colorList","TextEditor","editor","SunEditor","setContents","setOptions","DOMPurify","sanitize","encodeURIComponent","getSunEditorInstance","sunEditor","DiagnosisSection","props","isEdit","setIsEdit","sectionName","isEditEnabled","MdEdit","FaEye","encodedHtml","onChangeValue","dataName","dangerouslySetInnerHTML","__html","useToken","location","useLocation","setToken","reportId","setReportId","URLSearchParams","search","_token","decoded_token","setItem","setApiToken","report_id","Number","DataLabel","report_result_options","Report","values","setFieldValue","handleSubmit","useFormik","initialValues","onSubmit","updatePatientReportAnalysis","defaultSections","isEditable","modalities","setModalities","testTypes","setTestTypes","templates","setTemplates","fetchTestTypes","modalityId","list","getTemplates","JSON","stringify","filtered","report_template_name","handleReportImages","getPatientReport","result","images_map","fetchReportImages","updateReportImages","payload","reportImages","includes","filtered_images","replace","createReportImages","fetchModalities","Toaster","onSelectModality","onSelectTemplate","section","_images","bottom","preRegistration","servicesManager","commandsManager","configuration","getPanelModule","extensionManager","iconName","iconLabel","component","PatientReportTab","getViewportModule","getToolbarModule","getLayoutTemplateModule","getSopClassHandlerModule","getHangingProtocolModule","getCommandsModule","getContextModule","getDataSourcesModule","webpackContext","req","webpackContextResolve","__webpack_require__","o","Error","code","keys","Object","resolve","module","exports"],"sourceRoot":""}