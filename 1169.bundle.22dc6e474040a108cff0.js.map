{"version":3,"file":"1169.bundle.22dc6e474040a108cff0.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/ViewportImageScrollbar.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/ViewportOrientationMarkers.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/ViewportImageSliceLoadingIndicator.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/CornerstoneOverlays.tsx","webpack:///../../../extensions/cornerstone/src/components/CinePlayer/CinePlayer.tsx","webpack:///../../../extensions/cornerstone/src/components/CinePlayer/index.ts","webpack:///../../../extensions/cornerstone/src/components/OHIFViewportActionCorners.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/Colormap.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/Colorbar.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/WindowLevel.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeRenderingPresetsContent.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeRenderingPresets.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeRenderingQuality.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeShift.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeLighting.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeShade.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeRenderingOptions.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/WindowLevelActionMenu.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/OHIFCornerstoneViewport.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/getWindowLevelActionMenu.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Enums, Types, utilities } from '@cornerstonejs/core';\nimport { utilities as csToolsUtils } from '@cornerstonejs/tools';\nimport { ImageScrollbar } from '@ohif/ui';\n\nfunction CornerstoneImageScrollbar({\n  viewportData,\n  viewportId,\n  element,\n  imageSliceData,\n  setImageSliceData,\n  scrollbarHeight,\n  servicesManager,\n}: withAppTypes) {\n  const { cineService, cornerstoneViewportService } = servicesManager.services;\n\n  const onImageScrollbarChange = (imageIndex, viewportId) => {\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n    const { isCineEnabled } = cineService.getState();\n\n    if (isCineEnabled) {\n      // on image scrollbar change, stop the CINE if it is playing\n      cineService.stopClip(element, { viewportId });\n      cineService.setCine({ id: viewportId, isPlaying: false });\n    }\n\n    csToolsUtils.jumpToSlice(viewport.element, {\n      imageIndex,\n      debounceLoading: true,\n    });\n  };\n\n  useEffect(() => {\n    if (!viewportData) {\n      return;\n    }\n\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n    if (!viewport) {\n      return;\n    }\n\n    if (viewportData.viewportType === Enums.ViewportType.STACK) {\n      const imageIndex = viewport.getCurrentImageIdIndex();\n\n      setImageSliceData({\n        imageIndex: imageIndex,\n        numberOfSlices: viewportData.data[0].imageIds.length,\n      });\n\n      return;\n    }\n\n    if (viewportData.viewportType === Enums.ViewportType.ORTHOGRAPHIC) {\n      const sliceData = utilities.getImageSliceDataForVolumeViewport(\n        viewport as Types.IVolumeViewport\n      );\n\n      if (!sliceData) {\n        return;\n      }\n\n      const { imageIndex, numberOfSlices } = sliceData;\n      setImageSliceData({ imageIndex, numberOfSlices });\n    }\n  }, [viewportId, viewportData]);\n\n  useEffect(() => {\n    if (viewportData?.viewportType !== Enums.ViewportType.STACK) {\n      return;\n    }\n\n    const updateStackIndex = event => {\n      const { newImageIdIndex } = event.detail;\n      // find the index of imageId in the imageIds\n      setImageSliceData({\n        imageIndex: newImageIdIndex,\n        numberOfSlices: viewportData.data[0].imageIds.length,\n      });\n    };\n\n    element.addEventListener(Enums.Events.STACK_VIEWPORT_SCROLL, updateStackIndex);\n\n    return () => {\n      element.removeEventListener(Enums.Events.STACK_VIEWPORT_SCROLL, updateStackIndex);\n    };\n  }, [viewportData, element]);\n\n  useEffect(() => {\n    if (viewportData?.viewportType !== Enums.ViewportType.ORTHOGRAPHIC) {\n      return;\n    }\n\n    const updateVolumeIndex = event => {\n      const { imageIndex, numberOfSlices } = event.detail;\n      // find the index of imageId in the imageIds\n      setImageSliceData({ imageIndex, numberOfSlices });\n    };\n\n    element.addEventListener(Enums.Events.VOLUME_NEW_IMAGE, updateVolumeIndex);\n\n    return () => {\n      element.removeEventListener(Enums.Events.VOLUME_NEW_IMAGE, updateVolumeIndex);\n    };\n  }, [viewportData, element]);\n\n  return (\n    <ImageScrollbar\n      onChange={evt => onImageScrollbarChange(evt, viewportId)}\n      max={imageSliceData.numberOfSlices ? imageSliceData.numberOfSlices - 1 : 0}\n      height={scrollbarHeight}\n      value={imageSliceData.imageIndex}\n    />\n  );\n}\n\nCornerstoneImageScrollbar.propTypes = {\n  viewportData: PropTypes.object,\n  viewportId: PropTypes.string.isRequired,\n  element: PropTypes.instanceOf(Element),\n  scrollbarHeight: PropTypes.string,\n  imageSliceData: PropTypes.object.isRequired,\n  setImageSliceData: PropTypes.func.isRequired,\n  servicesManager: PropTypes.object.isRequired,\n};\n\nexport default CornerstoneImageScrollbar;\n","import React, { useEffect, useState, useMemo } from 'react';\nimport classNames from 'classnames';\nimport {\n  metaData,\n  Enums,\n  Types,\n  getEnabledElement,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport { utilities } from '@cornerstonejs/tools';\nimport PropTypes from 'prop-types';\nimport { vec3 } from 'gl-matrix';\n\nimport './ViewportOrientationMarkers.css';\n\nconst { getOrientationStringLPS, invertOrientationStringLPS } = utilities.orientation;\n\nfunction ViewportOrientationMarkers({\n  element,\n  viewportData,\n  imageSliceData,\n  viewportId,\n  servicesManager,\n  orientationMarkers = ['top', 'left'],\n}: withAppTypes) {\n  // Rotation is in degrees\n  const [rotation, setRotation] = useState(0);\n  const [flipHorizontal, setFlipHorizontal] = useState(false);\n  const [flipVertical, setFlipVertical] = useState(false);\n  const { cornerstoneViewportService } = servicesManager.services;\n\n  useEffect(() => {\n    const cameraModifiedListener = (evt: Types.EventTypes.CameraModifiedEvent) => {\n      const { rotation, previousCamera, camera } = evt.detail;\n\n      if (rotation !== undefined) {\n        setRotation(rotation);\n      }\n\n      if (\n        camera.flipHorizontal !== undefined &&\n        previousCamera.flipHorizontal !== camera.flipHorizontal\n      ) {\n        setFlipHorizontal(camera.flipHorizontal);\n      }\n\n      if (\n        camera.flipVertical !== undefined &&\n        previousCamera.flipVertical !== camera.flipVertical\n      ) {\n        setFlipVertical(camera.flipVertical);\n      }\n    };\n\n    element.addEventListener(Enums.Events.CAMERA_MODIFIED, cameraModifiedListener);\n\n    return () => {\n      element.removeEventListener(Enums.Events.CAMERA_MODIFIED, cameraModifiedListener);\n    };\n  }, []);\n\n  const markers = useMemo(() => {\n    if (!viewportData) {\n      return '';\n    }\n\n    let rowCosines, columnCosines, isDefaultValueSetForRowCosine, isDefaultValueSetForColumnCosine;\n    if (viewportData.viewportType === 'stack') {\n      const imageIndex = imageSliceData.imageIndex;\n      const imageId = viewportData.data[0].imageIds?.[imageIndex];\n\n      // Workaround for below TODO stub\n      if (!imageId) {\n        return false;\n      }\n\n      ({ rowCosines, columnCosines, isDefaultValueSetForColumnCosine, isDefaultValueSetForColumnCosine } = metaData.get('imagePlaneModule', imageId) || {});\n    } else {\n      if (!element || !getEnabledElement(element)) {\n        return '';\n      }\n\n      const { viewport } = getEnabledElement(element);\n      const { viewUp, viewPlaneNormal } = viewport.getCamera();\n\n      const viewRight = vec3.create();\n      vec3.cross(viewRight, viewUp, viewPlaneNormal);\n\n      columnCosines = [-viewUp[0], -viewUp[1], -viewUp[2]];\n      rowCosines = viewRight;\n    }\n\n    if (!rowCosines || !columnCosines || rotation === undefined || isDefaultValueSetForRowCosine || isDefaultValueSetForColumnCosine) {\n      return '';\n    }\n\n    const markers = _getOrientationMarkers(\n      rowCosines,\n      columnCosines,\n      rotation,\n      flipVertical,\n      flipHorizontal\n    );\n\n    const ohifViewport = cornerstoneViewportService.getViewportInfo(viewportId);\n\n    if (!ohifViewport) {\n      console.log('ViewportOrientationMarkers::No viewport');\n      return null;\n    }\n\n    return orientationMarkers.map((m, index) => (\n      <div\n        className={classNames(\n          'overlay-text',\n          `${m}-mid orientation-marker`,\n          'text-aqua-pale',\n          'text-[13px]',\n          'leading-5'\n        )}\n        key={`${m}-mid orientation-marker`}\n      >\n        <div className=\"orientation-marker-value\">{markers[m]}</div>\n      </div>\n    ));\n  }, [\n    viewportData,\n    imageSliceData,\n    rotation,\n    flipVertical,\n    flipHorizontal,\n    orientationMarkers,\n    element,\n  ]);\n\n  return <div className=\"ViewportOrientationMarkers select-none\">{markers}</div>;\n}\n\n/**\n *\n * Computes the orientation labels on a Cornerstone-enabled Viewport element\n * when the viewport settings change (e.g. when a horizontal flip or a rotation occurs)\n *\n * @param {*} rowCosines\n * @param {*} columnCosines\n * @param {*} rotation in degrees\n * @returns\n */\nfunction _getOrientationMarkers(rowCosines, columnCosines, rotation, flipVertical, flipHorizontal) {\n  const rowString = getOrientationStringLPS(rowCosines);\n  const columnString = getOrientationStringLPS(columnCosines);\n  const oppositeRowString = invertOrientationStringLPS(rowString);\n  const oppositeColumnString = invertOrientationStringLPS(columnString);\n\n  const markers = {\n    top: oppositeColumnString,\n    left: oppositeRowString,\n    right: rowString,\n    bottom: columnString,\n  };\n\n  // If any vertical or horizontal flips are applied, change the orientation strings ahead of\n  // the rotation applications\n  if (flipVertical) {\n    markers.top = invertOrientationStringLPS(markers.top);\n    markers.bottom = invertOrientationStringLPS(markers.bottom);\n  }\n\n  if (flipHorizontal) {\n    markers.left = invertOrientationStringLPS(markers.left);\n    markers.right = invertOrientationStringLPS(markers.right);\n  }\n\n  // Swap the labels accordingly if the viewport has been rotated\n  // This could be done in a more complex way for intermediate rotation values (e.g. 45 degrees)\n  if (rotation === 90 || rotation === -270) {\n    return {\n      top: markers.left,\n      left: invertOrientationStringLPS(markers.top),\n      right: invertOrientationStringLPS(markers.bottom),\n      bottom: markers.right, // left\n    };\n  } else if (rotation === -90 || rotation === 270) {\n    return {\n      top: invertOrientationStringLPS(markers.left),\n      left: markers.top,\n      bottom: markers.left,\n      right: markers.bottom,\n    };\n  } else if (rotation === 180 || rotation === -180) {\n    return {\n      top: invertOrientationStringLPS(markers.top),\n      left: invertOrientationStringLPS(markers.left),\n      bottom: invertOrientationStringLPS(markers.bottom),\n      right: invertOrientationStringLPS(markers.right),\n    };\n  }\n\n  return markers;\n}\n\nexport default ViewportOrientationMarkers;\n","import React, { useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Enums } from '@cornerstonejs/core';\n\nfunction ViewportImageSliceLoadingIndicator({ viewportData, element }) {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const loadIndicatorRef = useRef(null);\n  const imageIdToBeLoaded = useRef(null);\n\n  const setLoadingState = evt => {\n    clearTimeout(loadIndicatorRef.current);\n\n    loadIndicatorRef.current = setTimeout(() => {\n      setLoading(true);\n    }, 50);\n  };\n\n  const setFinishLoadingState = evt => {\n    clearTimeout(loadIndicatorRef.current);\n\n    setLoading(false);\n  };\n\n  const setErrorState = evt => {\n    clearTimeout(loadIndicatorRef.current);\n\n    if (imageIdToBeLoaded.current === evt.detail.imageId) {\n      setError(evt.detail.error);\n      imageIdToBeLoaded.current = null;\n    }\n  };\n\n  useEffect(() => {\n    element.addEventListener(Enums.Events.STACK_VIEWPORT_SCROLL, setLoadingState);\n    element.addEventListener(Enums.Events.IMAGE_LOAD_ERROR, setErrorState);\n    element.addEventListener(Enums.Events.STACK_NEW_IMAGE, setFinishLoadingState);\n\n    return () => {\n      element.removeEventListener(Enums.Events.STACK_VIEWPORT_SCROLL, setLoadingState);\n\n      element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, setFinishLoadingState);\n\n      element.removeEventListener(Enums.Events.IMAGE_LOAD_ERROR, setErrorState);\n    };\n  }, [element, viewportData]);\n\n  if (error) {\n    return (\n      <>\n        <div className=\"absolute top-0 left-0 h-full w-full bg-black opacity-50\">\n          <div className=\"transparent flex h-full w-full items-center justify-center\">\n            <p className=\"text-primary-light text-xl font-light\">\n              <h4>Error Loading Image</h4>\n              <p>An error has occurred.</p>\n              <p>{error}</p>\n            </p>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  if (loading) {\n    return (\n      // IMPORTANT: we need to use the pointer-events-none class to prevent the loading indicator from\n      // interacting with the mouse, since scrolling should propagate to the viewport underneath\n      <div className=\"pointer-events-none absolute top-0 left-0 h-full w-full bg-black opacity-50\">\n        <div className=\"transparent flex h-full w-full items-center justify-center\">\n          <p className=\"text-primary-light text-xl font-light\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return null;\n}\n\nViewportImageSliceLoadingIndicator.propTypes = {\n  error: PropTypes.object,\n  element: PropTypes.object,\n};\n\nexport default ViewportImageSliceLoadingIndicator;\n","import React, { useEffect, useState } from 'react';\n\nimport ViewportImageScrollbar from './ViewportImageScrollbar';\nimport CustomizableViewportOverlay from './CustomizableViewportOverlay';\nimport ViewportOrientationMarkers from './ViewportOrientationMarkers';\nimport ViewportImageSliceLoadingIndicator from './ViewportImageSliceLoadingIndicator';\n\nfunction CornerstoneOverlays(props: withAppTypes) {\n  const { viewportId, element, scrollbarHeight, servicesManager } = props;\n  const { cornerstoneViewportService } = servicesManager.services;\n  const [imageSliceData, setImageSliceData] = useState({\n    imageIndex: 0,\n    numberOfSlices: 0,\n  });\n  const [viewportData, setViewportData] = useState(null);\n\n  useEffect(() => {\n    const { unsubscribe } = cornerstoneViewportService.subscribe(\n      cornerstoneViewportService.EVENTS.VIEWPORT_DATA_CHANGED,\n      props => {\n        if (props.viewportId !== viewportId) {\n          return;\n        }\n\n        setViewportData(props.viewportData);\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [viewportId]);\n\n  if (!element) {\n    return null;\n  }\n\n  if (viewportData) {\n    const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\n\n    if (viewportInfo?.viewportOptions?.customViewportProps?.hideOverlays) {\n      return null;\n    }\n  }\n\n  return (\n    <div className=\"noselect\">\n      <ViewportImageScrollbar\n        viewportId={viewportId}\n        viewportData={viewportData}\n        element={element}\n        imageSliceData={imageSliceData}\n        setImageSliceData={setImageSliceData}\n        scrollbarHeight={scrollbarHeight}\n        servicesManager={servicesManager}\n      />\n\n      <CustomizableViewportOverlay\n        imageSliceData={imageSliceData}\n        viewportData={viewportData}\n        viewportId={viewportId}\n        servicesManager={servicesManager}\n        element={element}\n      />\n\n      <ViewportImageSliceLoadingIndicator\n        viewportData={viewportData}\n        element={element}\n      />\n\n      <ViewportOrientationMarkers\n        imageSliceData={imageSliceData}\n        element={element}\n        viewportData={viewportData}\n        servicesManager={servicesManager}\n        viewportId={viewportId}\n      />\n    </div>\n  );\n}\n\nexport default CornerstoneOverlays;\n","import React, { useCallback, useEffect, useState, useRef } from 'react';\nimport { CinePlayer, useCine } from '@ohif/ui';\nimport { Enums, eventTarget, cache } from '@cornerstonejs/core';\nimport { Enums as StreamingEnums } from '@cornerstonejs/streaming-image-volume-loader';\nimport { useAppConfig } from '@state';\n\nfunction WrappedCinePlayer({\n  enabledVPElement,\n  viewportId,\n  servicesManager,\n}: withAppTypes<{\n  enabledVPElement: HTMLElement;\n  viewportId: string;\n}>) {\n  const { customizationService, displaySetService, viewportGridService } = servicesManager.services;\n  const [{ isCineEnabled, cines }, cineService] = useCine();\n  const [newStackFrameRate, setNewStackFrameRate] = useState(24);\n  const [dynamicInfo, setDynamicInfo] = useState(null);\n  const [appConfig] = useAppConfig();\n  const isMountedRef = useRef(null);\n\n  const cineHandler = () => {\n    if (!cines?.[viewportId] || !enabledVPElement) {\n      return;\n    }\n\n    const { isPlaying = false, frameRate = 24 } = cines[viewportId];\n    const validFrameRate = Math.max(frameRate, 1);\n\n    return isPlaying\n      ? cineService.playClip(enabledVPElement, { framesPerSecond: validFrameRate, viewportId })\n      : cineService.stopClip(enabledVPElement);\n  };\n\n  const newDisplaySetHandler = useCallback(() => {\n    if (!enabledVPElement || !isCineEnabled) {\n      return;\n    }\n\n    const { viewports } = viewportGridService.getState();\n    const { displaySetInstanceUIDs } = viewports.get(viewportId);\n    let frameRate = 24;\n    let isPlaying = cines[viewportId]?.isPlaying || false;\n    displaySetInstanceUIDs.forEach(displaySetInstanceUID => {\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n\n      if (displaySet.FrameRate) {\n        // displaySet.FrameRate corresponds to DICOM tag (0018,1063) which is defined as the the frame time in milliseconds\n        // So a bit of math to get the actual frame rate.\n        frameRate = Math.round(1000 / displaySet.FrameRate);\n        isPlaying ||= !!appConfig.autoPlayCine;\n      }\n\n      // check if the displaySet is dynamic and set the dynamic info\n      if (displaySet.isDynamicVolume) {\n        const { dynamicVolumeInfo } = displaySet;\n        const numTimePoints = dynamicVolumeInfo.timePoints.length;\n        const label = dynamicVolumeInfo.splittingTag;\n        const timePointIndex = dynamicVolumeInfo.timePointIndex || 0;\n        setDynamicInfo({\n          volumeId: displaySet.displaySetInstanceUID,\n          timePointIndex,\n          numTimePoints,\n          label,\n        });\n      } else {\n        setDynamicInfo(null);\n      }\n    });\n\n    if (isPlaying) {\n      cineService.setIsCineEnabled(isPlaying);\n    }\n    cineService.setCine({ id: viewportId, isPlaying, frameRate });\n    setNewStackFrameRate(frameRate);\n  }, [displaySetService, viewportId, viewportGridService, cines, isCineEnabled, enabledVPElement]);\n\n  useEffect(() => {\n    isMountedRef.current = true;\n\n    newDisplaySetHandler();\n\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, [isCineEnabled, newDisplaySetHandler]);\n\n  useEffect(() => {\n    if (!isCineEnabled) {\n      return;\n    }\n\n    cineHandler();\n  }, [isCineEnabled, cineHandler, enabledVPElement]);\n\n  /**\n   * Use effect for handling new display set\n   */\n  useEffect(() => {\n    if (!enabledVPElement) {\n      return;\n    }\n\n    eventTarget.addEventListener(Enums.Events.STACK_VIEWPORT_NEW_STACK, newDisplaySetHandler);\n    // this doesn't makes sense that we are listening to this event on viewport element\n    enabledVPElement.addEventListener(\n      Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n      newDisplaySetHandler\n    );\n\n    return () => {\n      cineService.setCine({ id: viewportId, isPlaying: false });\n\n      eventTarget.removeEventListener(Enums.Events.STACK_VIEWPORT_NEW_STACK, newDisplaySetHandler);\n      enabledVPElement.removeEventListener(\n        Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n        newDisplaySetHandler\n      );\n    };\n  }, [enabledVPElement, newDisplaySetHandler, viewportId]);\n\n  useEffect(() => {\n    if (!cines || !cines[viewportId] || !enabledVPElement || !isMountedRef.current) {\n      return;\n    }\n\n    cineHandler();\n\n    return () => {\n      cineService.stopClip(enabledVPElement, { viewportId });\n    };\n  }, [cines, viewportId, cineService, enabledVPElement, cineHandler]);\n\n  if (!isCineEnabled) {\n    return null;\n  }\n\n  const cine = cines[viewportId];\n  const isPlaying = cine?.isPlaying || false;\n\n  return (\n    <RenderCinePlayer\n      viewportId={viewportId}\n      cineService={cineService}\n      newStackFrameRate={newStackFrameRate}\n      isPlaying={isPlaying}\n      dynamicInfo={dynamicInfo}\n      customizationService={customizationService}\n    />\n  );\n}\n\nfunction RenderCinePlayer({\n  viewportId,\n  cineService,\n  newStackFrameRate,\n  isPlaying,\n  dynamicInfo: dynamicInfoProp,\n  customizationService,\n}) {\n  const { component: CinePlayerComponent = CinePlayer } =\n    customizationService.get('cinePlayer') ?? {};\n\n  const [dynamicInfo, setDynamicInfo] = useState(dynamicInfoProp);\n\n  useEffect(() => {\n    setDynamicInfo(dynamicInfoProp);\n  }, [dynamicInfoProp]);\n\n  /**\n   * Use effect for handling 4D time index changed\n   */\n  useEffect(() => {\n    if (!dynamicInfo) {\n      return;\n    }\n\n    const handleTimePointIndexChange = evt => {\n      const { volumeId, timePointIndex, numTimePoints, splittingTag } = evt.detail;\n      setDynamicInfo({ volumeId, timePointIndex, numTimePoints, label: splittingTag });\n    };\n\n    eventTarget.addEventListener(\n      StreamingEnums.Events.DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED,\n      handleTimePointIndexChange\n    );\n\n    return () => {\n      eventTarget.removeEventListener(\n        StreamingEnums.Events.DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED,\n        handleTimePointIndexChange\n      );\n    };\n  }, [dynamicInfo]);\n\n  useEffect(() => {\n    if (!dynamicInfo) {\n      return;\n    }\n\n    const { volumeId, timePointIndex, numTimePoints, splittingTag } = dynamicInfo || {};\n    const volume = cache.getVolume(volumeId);\n    volume.timePointIndex = timePointIndex;\n\n    setDynamicInfo({ volumeId, timePointIndex, numTimePoints, label: splittingTag });\n  }, []);\n\n  const updateDynamicInfo = useCallback(props => {\n    const { volumeId, timePointIndex } = props;\n    const volume = cache.getVolume(volumeId);\n    volume.timePointIndex = timePointIndex;\n  }, []);\n\n  return (\n    <CinePlayerComponent\n      className=\"absolute left-1/2 bottom-3 -translate-x-1/2\"\n      frameRate={newStackFrameRate}\n      isPlaying={isPlaying}\n      onClose={() => {\n        // also stop the clip\n        cineService.setCine({\n          id: viewportId,\n          isPlaying: false,\n        });\n        cineService.setIsCineEnabled(false);\n      }}\n      onPlayPauseChange={isPlaying => {\n        cineService.setCine({\n          id: viewportId,\n          isPlaying,\n        });\n      }}\n      onFrameRateChange={frameRate =>\n        cineService.setCine({\n          id: viewportId,\n          frameRate,\n        })\n      }\n      dynamicInfo={dynamicInfo}\n      updateDynamicInfo={updateDynamicInfo}\n    />\n  );\n}\n\nexport default WrappedCinePlayer;\n","import CinePlayer from './CinePlayer';\n\nexport default CinePlayer;\n","import React from 'react';\nimport { useViewportActionCornersContext } from '../contextProviders/ViewportActionCornersProvider';\nimport { ViewportActionCorners } from '@ohif/ui';\n\nexport type OHIFViewportActionCornersProps = {\n  viewportId: string;\n};\n\nfunction OHIFViewportActionCorners({ viewportId }: OHIFViewportActionCornersProps) {\n  const [viewportActionCornersState] = useViewportActionCornersContext();\n\n  if (!viewportActionCornersState[viewportId]) {\n    return null;\n  }\n\n  return (\n    <ViewportActionCorners\n      cornerComponents={viewportActionCornersState[viewportId]}\n    ></ViewportActionCorners>\n  );\n}\n\nexport default OHIFViewportActionCorners;\n","import React, { ReactElement, useCallback, useEffect, useRef, useState, useMemo } from 'react';\nimport { AllInOneMenu, ButtonGroup, SwitchButton } from '@ohif/ui';\nimport { StackViewport } from '@cornerstonejs/core';\nimport { ColormapProps } from '../../types/Colormap';\n\nexport function Colormap({\n  colormaps,\n  viewportId,\n  displaySets,\n  commandsManager,\n  servicesManager,\n}: ColormapProps): ReactElement {\n  const { cornerstoneViewportService } = servicesManager.services;\n\n  const [activeDisplaySet, setActiveDisplaySet] = useState(displaySets[0]);\n\n  const [showPreview, setShowPreview] = useState(false);\n  const [prePreviewColormap, setPrePreviewColormap] = useState(null);\n\n  const showPreviewRef = useRef(showPreview);\n  showPreviewRef.current = showPreview;\n  const prePreviewColormapRef = useRef(prePreviewColormap);\n  prePreviewColormapRef.current = prePreviewColormap;\n  const activeDisplaySetRef = useRef(activeDisplaySet);\n  activeDisplaySetRef.current = activeDisplaySet;\n\n  const onSetColorLUT = useCallback(\n    props => {\n      // TODO: Better way to check if it's a fusion\n      const oneOpacityColormaps = ['Grayscale', 'X Ray'];\n      const opacity =\n        displaySets.length > 1 && !oneOpacityColormaps.includes(props.colormap.name) ? 0.5 : 1;\n      commandsManager.run({\n        commandName: 'setViewportColormap',\n        commandOptions: {\n          ...props,\n          opacity,\n          immediate: true,\n        },\n        context: 'CORNERSTONE',\n      });\n    },\n    [commandsManager]\n  );\n\n  const getViewportColormap = (viewportId, displaySet) => {\n    const { displaySetInstanceUID } = displaySet;\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n    if (viewport instanceof StackViewport) {\n      const { colormap } = viewport.getProperties();\n      if (!colormap) {\n        return colormaps.find(c => c.Name === 'Grayscale') || colormaps[0];\n      }\n      return colormap;\n    }\n    const actorEntries = viewport.getActors();\n    const actorEntry = actorEntries.find(entry => entry.uid.includes(displaySetInstanceUID));\n    const { colormap } = viewport.getProperties(actorEntry.uid);\n    if (!colormap) {\n      return colormaps.find(c => c.Name === 'Grayscale') || colormaps[0];\n    }\n    return colormap;\n  };\n\n  const buttons = useMemo(() => {\n    return displaySets.map((displaySet, index) => ({\n      children: displaySet.Modality,\n      key: index,\n      style: {\n        minWidth: `calc(100% / ${displaySets.length})`,\n        fontSize: '0.8rem',\n        textAlign: 'center',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n      },\n    }));\n  }, [displaySets]);\n\n  useEffect(() => {\n    setActiveDisplaySet(displaySets[displaySets.length - 1]);\n  }, [displaySets]);\n\n  return (\n    <>\n      {buttons.length > 1 && (\n        <div className=\"all-in-one-menu-item flex w-full justify-center\">\n          <ButtonGroup\n            onActiveIndexChange={index => {\n              setActiveDisplaySet(displaySets[index]);\n              setPrePreviewColormap(null);\n            }}\n            activeIndex={\n              displaySets.findIndex(\n                ds => ds.displaySetInstanceUID === activeDisplaySetRef.current.displaySetInstanceUID\n              ) || 1\n            }\n            className=\"w-[70%] text-[10px]\"\n          >\n            {buttons.map(({ children, key, style }) => (\n              <div\n                key={key}\n                style={style}\n              >\n                {children}\n              </div>\n            ))}\n          </ButtonGroup>\n        </div>\n      )}\n      <div className=\"all-in-one-menu-item flex w-full justify-center\">\n        <SwitchButton\n          label=\"Preview in viewport\"\n          checked={showPreview}\n          onChange={checked => {\n            setShowPreview(checked);\n          }}\n        />\n      </div>\n      <AllInOneMenu.DividerItem />\n      <AllInOneMenu.ItemPanel>\n        {colormaps.map((colormap, index) => (\n          <AllInOneMenu.Item\n            key={index}\n            label={colormap.description}\n            onClick={() => {\n              onSetColorLUT({\n                viewportId,\n                colormap,\n                displaySetInstanceUID: activeDisplaySetRef.current.displaySetInstanceUID,\n              });\n              setPrePreviewColormap(null);\n            }}\n            onMouseEnter={() => {\n              if (showPreviewRef.current) {\n                setPrePreviewColormap(getViewportColormap(viewportId, activeDisplaySetRef.current));\n                onSetColorLUT({\n                  viewportId,\n                  colormap,\n                  displaySetInstanceUID: activeDisplaySetRef.current.displaySetInstanceUID,\n                });\n              }\n            }}\n            onMouseLeave={() => {\n              if (showPreviewRef.current && prePreviewColormapRef.current) {\n                onSetColorLUT({\n                  viewportId,\n                  colormap: prePreviewColormapRef.current,\n                  displaySetInstanceUID: activeDisplaySetRef.current.displaySetInstanceUID,\n                });\n              }\n            }}\n          ></AllInOneMenu.Item>\n        ))}\n      </AllInOneMenu.ItemPanel>\n    </>\n  );\n}\n","import React, { ReactElement, useCallback, useEffect, useState } from 'react';\nimport { SwitchButton } from '@ohif/ui';\nimport { StackViewport, VolumeViewport } from '@cornerstonejs/core';\nimport { ColorbarProps } from '../../types/Colorbar';\nimport { utilities } from '@cornerstonejs/core';\n\nexport function setViewportColorbar(\n  viewportId,\n  displaySets,\n  commandsManager,\n  servicesManager: AppTypes.ServicesManager,\n  colorbarOptions\n) {\n  const { cornerstoneViewportService } = servicesManager.services;\n  const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n  const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\n  const backgroundColor = viewportInfo.getViewportOptions().background;\n  const isLight = backgroundColor ? utilities.isEqual(backgroundColor, [1, 1, 1]) : false;\n\n  if (isLight) {\n    colorbarOptions.ticks = {\n      position: 'left',\n      style: {\n        font: '12px Arial',\n        color: '#000000',\n        maxNumTicks: 8,\n        tickSize: 5,\n        tickWidth: 1,\n        labelMargin: 3,\n      },\n    };\n  }\n\n  const displaySetInstanceUIDs = [];\n\n  if (viewport instanceof StackViewport) {\n    displaySetInstanceUIDs.push(viewportId);\n  }\n\n  if (viewport instanceof VolumeViewport) {\n    displaySets.forEach(ds => {\n      displaySetInstanceUIDs.push(ds.displaySetInstanceUID);\n    });\n  }\n\n  commandsManager.run({\n    commandName: 'toggleViewportColorbar',\n    commandOptions: {\n      viewportId,\n      options: colorbarOptions,\n      displaySetInstanceUIDs,\n    },\n    context: 'CORNERSTONE',\n  });\n}\n\nexport function Colorbar({\n  viewportId,\n  displaySets,\n  commandsManager,\n  servicesManager,\n  colorbarProperties,\n}: withAppTypes<ColorbarProps>): ReactElement {\n  const { colorbarService } = servicesManager.services;\n  const {\n    width: colorbarWidth,\n    colorbarTickPosition,\n    colorbarContainerPosition,\n    colormaps,\n    colorbarInitialColormap,\n  } = colorbarProperties;\n  const [showColorbar, setShowColorbar] = useState(colorbarService.hasColorbar(viewportId));\n\n  const onSetColorbar = useCallback(() => {\n    setViewportColorbar(viewportId, displaySets, commandsManager, servicesManager, {\n      viewportId,\n      colormaps,\n      ticks: {\n        position: colorbarTickPosition,\n      },\n      width: colorbarWidth,\n      position: colorbarContainerPosition,\n      activeColormapName: colorbarInitialColormap,\n    });\n  }, [commandsManager]);\n\n  useEffect(() => {\n    const updateColorbarState = () => {\n      setShowColorbar(colorbarService.hasColorbar(viewportId));\n    };\n\n    const { unsubscribe } = colorbarService.subscribe(\n      colorbarService.EVENTS.STATE_CHANGED,\n      updateColorbarState\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [viewportId]);\n\n  return (\n    <div className=\"all-in-one-menu-item flex w-full justify-center\">\n      <div className=\"mr-2 w-[28px]\"></div>\n      <SwitchButton\n        label=\"Display Color bar\"\n        checked={showColorbar}\n        onChange={() => {\n          onSetColorbar();\n        }}\n      />\n    </div>\n  );\n}\n","import React, { ReactElement, useCallback } from 'react';\nimport { AllInOneMenu } from '@ohif/ui';\nimport { WindowLevelPreset } from '../../types/WindowLevel';\nimport { CommandsManager } from '@ohif/core';\nimport { useTranslation } from 'react-i18next';\n\nexport type WindowLevelProps = {\n  viewportId: string;\n  presets: Array<Record<string, Array<WindowLevelPreset>>>;\n  commandsManager: CommandsManager;\n};\n\nexport function WindowLevel({\n  viewportId,\n  commandsManager,\n  presets,\n}: WindowLevelProps): ReactElement {\n  const { t } = useTranslation('WindowLevelActionMenu');\n\n  const onSetWindowLevel = useCallback(\n    props => {\n      commandsManager.run({\n        commandName: 'setViewportWindowLevel',\n        commandOptions: {\n          ...props,\n          viewportId,\n        },\n        context: 'CORNERSTONE',\n      });\n    },\n    [commandsManager, viewportId]\n  );\n\n  return (\n    <AllInOneMenu.ItemPanel>\n      {presets.map((modalityPresets, modalityIndex) => (\n        <React.Fragment key={modalityIndex}>\n          {Object.entries(modalityPresets).map(([modality, presetsArray]) => (\n            <React.Fragment key={modality}>\n              <AllInOneMenu.HeaderItem>\n                {t('Modality Presets', { modality })}\n              </AllInOneMenu.HeaderItem>\n              {presetsArray.map((preset, index) => (\n                <AllInOneMenu.Item\n                  key={`${modality}-${index}`}\n                  label={preset.description}\n                  secondaryLabel={`${preset.window} / ${preset.level}`}\n                  onClick={() => onSetWindowLevel(preset)}\n                />\n              ))}\n            </React.Fragment>\n          ))}\n        </React.Fragment>\n      ))}\n    </AllInOneMenu.ItemPanel>\n  );\n}\n","import { Icon } from '@ohif/ui';\nimport { ButtonEnums } from '@ohif/ui';\nimport React, { ReactElement, useState, useCallback } from 'react';\nimport { Button, InputFilterText } from '@ohif/ui';\nimport { ViewportPreset, VolumeRenderingPresetsContentProps } from '../../types/ViewportPresets';\n\nexport function VolumeRenderingPresetsContent({\n  presets,\n  viewportId,\n  commandsManager,\n  onClose,\n}: VolumeRenderingPresetsContentProps): ReactElement {\n  const [filteredPresets, setFilteredPresets] = useState(presets);\n  const [searchValue, setSearchValue] = useState('');\n  const [selectedPreset, setSelectedPreset] = useState<ViewportPreset | null>(null);\n\n  const handleSearchChange = useCallback(\n    (value: string) => {\n      setSearchValue(value);\n      const filtered = value\n        ? presets.filter(preset => preset.name.toLowerCase().includes(value.toLowerCase()))\n        : presets;\n      setFilteredPresets(filtered);\n    },\n    [presets]\n  );\n\n  const handleApply = useCallback(\n    props => {\n      commandsManager.runCommand('setViewportPreset', {\n        ...props,\n      });\n    },\n    [commandsManager]\n  );\n\n  const formatLabel = (label: string, maxChars: number) => {\n    return label.length > maxChars ? `${label.slice(0, maxChars)}...` : label;\n  };\n\n  return (\n    <div className=\"flex min-h-full w-full flex-col justify-between\">\n      <div className=\"border-secondary-light h-[433px] w-full overflow-hidden rounded border bg-black px-2.5\">\n        <div className=\"flex h-[46px] w-full items-center justify-start\">\n          <div className=\"h-[26px] w-[200px]\">\n            <InputFilterText\n              value={searchValue}\n              onDebounceChange={handleSearchChange}\n              placeholder={'Search all'}\n            />\n          </div>\n        </div>\n        <div className=\"ohif-scrollbar overflow h-[385px] w-full overflow-y-auto\">\n          <div className=\"grid grid-cols-4 gap-3 pt-2 pr-3\">\n            {filteredPresets.map((preset, index) => (\n              <div\n                key={index}\n                className=\"flex cursor-pointer flex-col items-start\"\n                onClick={() => {\n                  setSelectedPreset(preset);\n                  handleApply({ preset: preset.name, viewportId });\n                }}\n              >\n                <Icon\n                  name={preset.name}\n                  className={\n                    selectedPreset?.name === preset.name\n                      ? 'border-primary-light h-[75px] w-[95px] max-w-none rounded border-2'\n                      : 'hover:border-primary-light h-[75px] w-[95px] max-w-none rounded border-2 border-black'\n                  }\n                />\n                <label className=\"text-aqua-pale mt-2 text-left text-xs\">\n                  {formatLabel(preset.name, 11)}\n                </label>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      <footer className=\"flex h-[60px] w-full items-center justify-end\">\n        <div className=\"flex\">\n          <Button\n            name=\"Cancel\"\n            size={ButtonEnums.size.medium}\n            type={ButtonEnums.type.secondary}\n            onClick={onClose}\n          >\n            {' '}\n            Cancel{' '}\n          </Button>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","import { AllInOneMenu, Icon } from '@ohif/ui';\nimport React, { ReactElement } from 'react';\nimport { VolumeRenderingPresetsProps } from '../../types/ViewportPresets';\nimport { VolumeRenderingPresetsContent } from './VolumeRenderingPresetsContent';\n\nexport function VolumeRenderingPresets({\n  viewportId,\n  servicesManager,\n  commandsManager,\n  volumeRenderingPresets,\n}: VolumeRenderingPresetsProps): ReactElement {\n  const { uiModalService } = servicesManager.services;\n\n  const onClickPresets = () => {\n    uiModalService.show({\n      content: VolumeRenderingPresetsContent,\n      title: 'Rendering Presets',\n      movable: true,\n      contentProps: {\n        onClose: uiModalService.hide,\n        presets: volumeRenderingPresets,\n        viewportId,\n        commandsManager,\n      },\n      containerDimensions: 'h-[543px] w-[460px]',\n      contentDimensions: 'h-[493px] w-[460px]  pl-[12px] pr-[12px]',\n    });\n  };\n\n  return (\n    <AllInOneMenu.Item\n      label=\"Rendering Presets\"\n      icon={<Icon name=\"VolumeRendering\" />}\n      rightIcon={<Icon name=\"action-new-dialog\" />}\n      onClick={onClickPresets}\n    />\n  );\n}\n","import React, { ReactElement, useCallback, useState, useEffect } from 'react';\nimport { VolumeRenderingQualityProps } from '../../types/ViewportPresets';\n\nexport function VolumeRenderingQuality({\n  volumeRenderingQualityRange,\n  commandsManager,\n  servicesManager,\n  viewportId,\n}: VolumeRenderingQualityProps): ReactElement {\n  const { cornerstoneViewportService } = servicesManager.services;\n  const { min, max, step } = volumeRenderingQualityRange;\n  const [quality, setQuality] = useState(null);\n\n  const onChange = useCallback(\n    (value: number) => {\n      commandsManager.runCommand('setVolumeRenderingQulaity', {\n        viewportId,\n        volumeQuality: value,\n      });\n      setQuality(value);\n    },\n    [commandsManager, viewportId]\n  );\n\n  const calculateBackground = value => {\n    const percentage = ((value - 0) / (1 - 0)) * 100;\n    return `linear-gradient(to right, #5acce6 0%, #5acce6 ${percentage}%, #3a3f99 ${percentage}%, #3a3f99 100%)`;\n  };\n\n  useEffect(() => {\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n    const { actor } = viewport.getActors()[0];\n    const mapper = actor.getMapper();\n    const image = mapper.getInputData();\n    const spacing = image.getSpacing();\n    const sampleDistance = mapper.getSampleDistance();\n    const averageSpacing = spacing.reduce((a, b) => a + b) / 3.0;\n    if (sampleDistance === averageSpacing) {\n      setQuality(1);\n    } else {\n      setQuality(Math.sqrt(averageSpacing / (sampleDistance * 0.5)));\n    }\n  }, [cornerstoneViewportService, viewportId]);\n  return (\n    <>\n      <div className=\"all-in-one-menu-item flex  w-full flex-row !items-center justify-between gap-[10px]\">\n        <label\n          className=\"block text-white\"\n          htmlFor=\"volume\"\n        >\n          Quality\n        </label>\n        {quality !== null && (\n          <input\n            className=\"bg-inputfield-main h-2 w-[120px] cursor-pointer appearance-none rounded-lg\"\n            value={quality}\n            id=\"volume\"\n            max={max}\n            min={min}\n            type=\"range\"\n            step={step}\n            onChange={e => onChange(parseInt(e.target.value, 10))}\n            style={{\n              background: calculateBackground((quality - min) / (max - min)),\n              '--thumb-inner-color': '#5acce6',\n              '--thumb-outer-color': '#090c29',\n            }}\n          />\n        )}\n      </div>\n    </>\n  );\n}\n","import React, { ReactElement, useCallback, useEffect, useState, useRef } from 'react';\nimport { VolumeShiftProps } from '../../types/ViewportPresets';\n\nexport function VolumeShift({\n  viewportId,\n  commandsManager,\n  servicesManager,\n}: VolumeShiftProps): ReactElement {\n  const { cornerstoneViewportService } = servicesManager.services;\n  const [minShift, setMinShift] = useState<number | null>(null);\n  const [maxShift, setMaxShift] = useState<number | null>(null);\n  const [shift, setShift] = useState<number | null>(\n    cornerstoneViewportService.getCornerstoneViewport(viewportId)?.shiftedBy || 0\n  );\n  const [step, setStep] = useState<number | null>(null);\n  const [isBlocking, setIsBlocking] = useState(false);\n\n  const prevShiftRef = useRef<number>(shift);\n\n  const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n  const { actor } = viewport.getActors()[0];\n  const ofun = actor.getProperty().getScalarOpacity(0);\n\n  useEffect(() => {\n    if (isBlocking) {\n      return;\n    }\n    const range = ofun.getRange();\n\n    const transferFunctionWidth = range[1] - range[0];\n\n    const minShift = -transferFunctionWidth;\n    const maxShift = transferFunctionWidth;\n\n    setMinShift(minShift);\n    setMaxShift(maxShift);\n    setStep(Math.pow(10, Math.floor(Math.log10(transferFunctionWidth / 500))));\n  }, [cornerstoneViewportService, viewportId, actor, ofun, isBlocking]);\n\n  const onChangeRange = useCallback(\n    newShift => {\n      const shiftDifference = newShift - prevShiftRef.current;\n      prevShiftRef.current = newShift;\n      viewport.shiftedBy = newShift;\n      commandsManager.runCommand('shiftVolumeOpacityPoints', {\n        viewportId,\n        shift: shiftDifference,\n      });\n    },\n    [commandsManager, viewportId, viewport]\n  );\n\n  const calculateBackground = value => {\n    const percentage = ((value - 0) / (1 - 0)) * 100;\n    return `linear-gradient(to right, #5acce6 0%, #5acce6 ${percentage}%, #3a3f99 ${percentage}%, #3a3f99 100%)`;\n  };\n\n  return (\n    <>\n      <div className=\"all-in-one-menu-item flex  w-full flex-row !items-center justify-between gap-[10px]\">\n        <label\n          className=\"block  text-white\"\n          htmlFor=\"shift\"\n        >\n          Shift\n        </label>\n        {step !== null && (\n          <input\n            className=\"bg-inputfield-main h-2 w-[120px] cursor-pointer appearance-none rounded-lg\"\n            value={shift}\n            onChange={e => {\n              const shiftValue = parseInt(e.target.value, 10);\n              setShift(shiftValue);\n              onChangeRange(shiftValue);\n            }}\n            id=\"shift\"\n            onMouseDown={() => setIsBlocking(true)}\n            onMouseUp={() => setIsBlocking(false)}\n            max={maxShift}\n            min={minShift}\n            type=\"range\"\n            step={step}\n            style={{\n              background: calculateBackground((shift - minShift) / (maxShift - minShift)),\n              '--thumb-inner-color': '#5acce6',\n              '--thumb-outer-color': '#090c29',\n            }}\n          />\n        )}\n      </div>\n    </>\n  );\n}\n","import React, { ReactElement, useState, useEffect, useCallback } from 'react';\nimport { VolumeLightingProps } from '../../types/ViewportPresets';\n\nexport function VolumeLighting({\n  servicesManager,\n  commandsManager,\n  viewportId,\n}: VolumeLightingProps): ReactElement {\n  const { cornerstoneViewportService } = servicesManager.services;\n  const [ambient, setAmbient] = useState(null);\n  const [diffuse, setDiffuse] = useState(null);\n  const [specular, setSpecular] = useState(null);\n\n  const onAmbientChange = useCallback(() => {\n    commandsManager.runCommand('setVolumeLighting', { viewportId, options: { ambient } });\n  }, [ambient, commandsManager, viewportId]);\n\n  const onDiffuseChange = useCallback(() => {\n    commandsManager.runCommand('setVolumeLighting', { viewportId, options: { diffuse } });\n  }, [diffuse, commandsManager, viewportId]);\n\n  const onSpecularChange = useCallback(() => {\n    commandsManager.runCommand('setVolumeLighting', { viewportId, options: { specular } });\n  }, [specular, commandsManager, viewportId]);\n\n  const calculateBackground = value => {\n    const percentage = ((value - 0) / (1 - 0)) * 100;\n    return `linear-gradient(to right, #5acce6 0%, #5acce6 ${percentage}%, #3a3f99 ${percentage}%, #3a3f99 100%)`;\n  };\n\n  useEffect(() => {\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n    const { actor } = viewport.getActors()[0];\n    const ambient = actor.getProperty().getAmbient();\n    const diffuse = actor.getProperty().getDiffuse();\n    const specular = actor.getProperty().getSpecular();\n    setAmbient(ambient);\n    setDiffuse(diffuse);\n    setSpecular(specular);\n  }, [viewportId, cornerstoneViewportService]);\n  return (\n    <>\n      <div className=\"all-in-one-menu-item flex  w-full flex-row !items-center justify-between gap-[10px]\">\n        <label\n          className=\"block  text-white\"\n          htmlFor=\"ambient\"\n        >\n          Ambient\n        </label>\n        {ambient !== null && (\n          <input\n            className=\"bg-inputfield-main h-2 w-[120px] cursor-pointer appearance-none rounded-lg\"\n            value={ambient}\n            onChange={e => {\n              setAmbient(e.target.value);\n              onAmbientChange();\n            }}\n            id=\"ambient\"\n            max={1}\n            min={0}\n            type=\"range\"\n            step={0.1}\n            style={{\n              background: calculateBackground(ambient),\n              '--thumb-inner-color': '#5acce6',\n              '--thumb-outer-color': '#090c29',\n            }}\n          />\n        )}\n      </div>\n      <div className=\"all-in-one-menu-item flex  w-full flex-row !items-center justify-between gap-[10px]\">\n        <label\n          className=\"block  text-white\"\n          htmlFor=\"diffuse\"\n        >\n          Diffuse\n        </label>\n        {diffuse !== null && (\n          <input\n            className=\"bg-inputfield-main h-2 w-[120px] cursor-pointer appearance-none rounded-lg\"\n            value={diffuse}\n            onChange={e => {\n              setDiffuse(e.target.value);\n              onDiffuseChange();\n            }}\n            id=\"diffuse\"\n            max={1}\n            min={0}\n            type=\"range\"\n            step={0.1}\n            style={{\n              background: calculateBackground(diffuse),\n              '--thumb-inner-color': '#5acce6',\n              '--thumb-outer-color': '#090c29',\n            }}\n          />\n        )}\n      </div>\n\n      <div className=\"all-in-one-menu-item flex  w-full flex-row !items-center justify-between gap-[10px]\">\n        <label\n          className=\"block  text-white\"\n          htmlFor=\"specular\"\n        >\n          Specular\n        </label>\n        {specular !== null && (\n          <input\n            className=\"bg-inputfield-main h-2 w-[120px] cursor-pointer appearance-none rounded-lg\"\n            value={specular}\n            onChange={e => {\n              setSpecular(e.target.value);\n              onSpecularChange();\n            }}\n            id=\"specular\"\n            max={1}\n            min={0}\n            type=\"range\"\n            step={0.1}\n            style={{\n              background: calculateBackground(specular),\n              '--thumb-inner-color': '#5acce6',\n              '--thumb-outer-color': '#090c29',\n            }}\n          />\n        )}\n      </div>\n    </>\n  );\n}\n","import React, { ReactElement, useCallback, useEffect, useState } from 'react';\nimport { SwitchButton } from '@ohif/ui';\nimport { VolumeShadeProps } from '../../types/ViewportPresets';\n\nexport function VolumeShade({\n  commandsManager,\n  viewportId,\n  servicesManager,\n}: VolumeShadeProps): ReactElement {\n  const { cornerstoneViewportService } = servicesManager.services;\n  const [shade, setShade] = useState(true);\n  const [key, setKey] = useState(0);\n\n  const onShadeChange = useCallback(\n    (checked: boolean) => {\n      commandsManager.runCommand('setVolumeLighting', { viewportId, options: { shade: checked } });\n    },\n    [commandsManager, viewportId]\n  );\n  useEffect(() => {\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n    const { actor } = viewport.getActors()[0];\n    const shade = actor.getProperty().getShade();\n    setShade(shade);\n    setKey(key + 1);\n  }, [viewportId, cornerstoneViewportService]);\n\n  return (\n    <SwitchButton\n      key={key}\n      label=\"Shade\"\n      checked={shade}\n      onChange={() => {\n        setShade(!shade);\n        onShadeChange(!shade);\n      }}\n    />\n  );\n}\n","import React, { ReactElement } from 'react';\nimport { AllInOneMenu } from '@ohif/ui';\nimport { VolumeRenderingOptionsProps } from '../../types/ViewportPresets';\nimport { VolumeRenderingQuality } from './VolumeRenderingQuality';\nimport { VolumeShift } from './VolumeShift';\nimport { VolumeLighting } from './VolumeLighting';\nimport { VolumeShade } from './VolumeShade';\nexport function VolumeRenderingOptions({\n  viewportId,\n  commandsManager,\n  volumeRenderingQualityRange,\n  servicesManager,\n}: VolumeRenderingOptionsProps): ReactElement {\n  return (\n    <AllInOneMenu.ItemPanel>\n      <VolumeRenderingQuality\n        viewportId={viewportId}\n        commandsManager={commandsManager}\n        servicesManager={servicesManager}\n        volumeRenderingQualityRange={volumeRenderingQualityRange}\n      />\n\n      <VolumeShift\n        viewportId={viewportId}\n        commandsManager={commandsManager}\n        servicesManager={servicesManager}\n      />\n      <div className=\"all-in-one-menu-item mt-2 flex !h-[20px] w-full justify-start\">\n        <div className=\"text-aqua-pale text-[13px]\">LIGHTING</div>\n      </div>\n      <div className=\"bg-primary-dark mt-1 mb-1 h-[2px] w-full\"></div>\n      <div className=\"all-in-one-menu-item flex w-full justify-center\">\n        <VolumeShade\n          commandsManager={commandsManager}\n          servicesManager={servicesManager}\n          viewportId={viewportId}\n        />\n      </div>\n      <VolumeLighting\n        viewportId={viewportId}\n        commandsManager={commandsManager}\n        servicesManager={servicesManager}\n      />\n    </AllInOneMenu.ItemPanel>\n  );\n}\n","import React, { ReactElement, useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport classNames from 'classnames';\nimport { AllInOneMenu, useViewportGrid } from '@ohif/ui';\nimport { Colormap } from './Colormap';\nimport { Colorbar } from './Colorbar';\nimport { setViewportColorbar } from './Colorbar';\nimport { WindowLevelPreset } from '../../types/WindowLevel';\nimport { ColorbarProperties } from '../../types/Colorbar';\nimport { VolumeRenderingQualityRange } from '../../types/ViewportPresets';\nimport { WindowLevel } from './WindowLevel';\nimport { VolumeRenderingPresets } from './VolumeRenderingPresets';\nimport { VolumeRenderingOptions } from './VolumeRenderingOptions';\nimport { ViewportPreset } from '../../types/ViewportPresets';\nimport { VolumeViewport3D } from '@cornerstonejs/core';\nimport { utilities } from '@cornerstonejs/core';\n\nexport type WindowLevelActionMenuProps = {\n  viewportId: string;\n  element: HTMLElement;\n  presets: Array<Record<string, Array<WindowLevelPreset>>>;\n  verticalDirection: AllInOneMenu.VerticalDirection;\n  horizontalDirection: AllInOneMenu.HorizontalDirection;\n  colorbarProperties: ColorbarProperties;\n  displaySets: Array<any>;\n  volumeRenderingPresets: Array<ViewportPreset>;\n  volumeRenderingQualityRange: VolumeRenderingQualityRange;\n};\n\nexport function WindowLevelActionMenu({\n  viewportId,\n  element,\n  presets,\n  verticalDirection,\n  horizontalDirection,\n  commandsManager,\n  servicesManager,\n  colorbarProperties,\n  displaySets,\n  volumeRenderingPresets,\n  volumeRenderingQualityRange,\n}: withAppTypes<WindowLevelActionMenuProps>): ReactElement {\n  const {\n    colormaps,\n    colorbarContainerPosition,\n    colorbarInitialColormap,\n    colorbarTickPosition,\n    width: colorbarWidth,\n  } = colorbarProperties;\n  const { colorbarService, cornerstoneViewportService } = servicesManager.services;\n  const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\n  const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n  const backgroundColor = viewportInfo.getViewportOptions().background;\n  const isLight = backgroundColor ? utilities.isEqual(backgroundColor, [1, 1, 1]) : false;\n\n  const nonImageModalities = ['SR', 'SEG', 'SM', 'RTSTRUCT', 'RTPLAN', 'RTDOSE'];\n\n  const { t } = useTranslation('WindowLevelActionMenu');\n\n  const [viewportGrid] = useViewportGrid();\n  const { activeViewportId } = viewportGrid;\n\n  const [vpHeight, setVpHeight] = useState(element?.clientHeight);\n  const [menuKey, setMenuKey] = useState(0);\n  const [is3DVolume, setIs3DVolume] = useState(false);\n\n  const onSetColorbar = useCallback(() => {\n    setViewportColorbar(viewportId, displaySets, commandsManager, servicesManager, {\n      colormaps,\n      ticks: {\n        position: colorbarTickPosition,\n      },\n      width: colorbarWidth,\n      position: colorbarContainerPosition,\n      activeColormapName: colorbarInitialColormap,\n    });\n  }, [commandsManager]);\n\n  useEffect(() => {\n    const newVpHeight = element?.clientHeight;\n    if (vpHeight !== newVpHeight) {\n      setVpHeight(newVpHeight);\n    }\n  }, [element, vpHeight]);\n\n  useEffect(() => {\n    if (!colorbarService.hasColorbar(viewportId)) {\n      return;\n    }\n    window.setTimeout(() => {\n      colorbarService.removeColorbar(viewportId);\n      onSetColorbar();\n    }, 0);\n  }, [viewportId, displaySets, viewport]);\n\n  useEffect(() => {\n    setMenuKey(menuKey + 1);\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n    if (viewport instanceof VolumeViewport3D) {\n      setIs3DVolume(true);\n    } else {\n      setIs3DVolume(false);\n    }\n  }, [\n    displaySets,\n    viewportId,\n    presets,\n    volumeRenderingQualityRange,\n    volumeRenderingPresets,\n    colorbarProperties,\n    activeViewportId,\n    viewportGrid,\n  ]);\n\n  return (\n    <AllInOneMenu.IconMenu\n      icon=\"viewport-window-level\"\n      verticalDirection={verticalDirection}\n      horizontalDirection={horizontalDirection}\n      iconClassName={classNames(\n        // Visible on hover and for the active viewport\n        activeViewportId === viewportId ? 'visible' : 'invisible group-hover:visible',\n        'flex shrink-0 cursor-pointer rounded active:text-white text-primary-light',\n        isLight ? ' hover:bg-secondary-dark' : 'hover:bg-secondary-light/60'\n      )}\n      menuStyle={{ maxHeight: vpHeight - 32, minWidth: 218 }}\n      onVisibilityChange={() => {\n        setVpHeight(element.clientHeight);\n      }}\n      menuKey={menuKey}\n    >\n      <AllInOneMenu.ItemPanel>\n        {!is3DVolume && (\n          <Colorbar\n            viewportId={viewportId}\n            displaySets={displaySets.filter(ds => !nonImageModalities.includes(ds.Modality))}\n            commandsManager={commandsManager}\n            servicesManager={servicesManager}\n            colorbarProperties={colorbarProperties}\n          />\n        )}\n\n        {colormaps && !is3DVolume && (\n          <AllInOneMenu.SubMenu\n            key=\"colorLUTPresets\"\n            itemLabel=\"Color LUT\"\n            itemIcon=\"icon-color-lut\"\n          >\n            <Colormap\n              colormaps={colormaps}\n              viewportId={viewportId}\n              displaySets={displaySets.filter(ds => !nonImageModalities.includes(ds.Modality))}\n              commandsManager={commandsManager}\n              servicesManager={servicesManager}\n            />\n          </AllInOneMenu.SubMenu>\n        )}\n\n        {presets && presets.length > 0 && !is3DVolume && (\n          <AllInOneMenu.SubMenu\n            key=\"windowLevelPresets\"\n            itemLabel={t('Modality Window Presets')}\n            itemIcon=\"viewport-window-level\"\n          >\n            <WindowLevel\n              viewportId={viewportId}\n              commandsManager={commandsManager}\n              presets={presets}\n            />\n          </AllInOneMenu.SubMenu>\n        )}\n\n        {volumeRenderingPresets && is3DVolume && (\n          <VolumeRenderingPresets\n            servicesManager={servicesManager}\n            viewportId={viewportId}\n            commandsManager={commandsManager}\n            volumeRenderingPresets={volumeRenderingPresets}\n          />\n        )}\n\n        {volumeRenderingQualityRange && is3DVolume && (\n          <AllInOneMenu.SubMenu itemLabel=\"Rendering Options\">\n            <VolumeRenderingOptions\n              viewportId={viewportId}\n              commandsManager={commandsManager}\n              volumeRenderingQualityRange={volumeRenderingQualityRange}\n              servicesManager={servicesManager}\n            />\n          </AllInOneMenu.SubMenu>\n        )}\n      </AllInOneMenu.ItemPanel>\n    </AllInOneMenu.IconMenu>\n  );\n}\n","import React, { useEffect, useRef, useCallback, useState } from 'react';\nimport { useResizeDetector } from 'react-resize-detector';\nimport PropTypes from 'prop-types';\nimport * as cs3DTools from '@cornerstonejs/tools';\nimport {\n  Enums,\n  eventTarget,\n  getEnabledElement,\n  StackViewport,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport { MeasurementService } from '@ohif/core';\nimport { Notification, useViewportDialog, AllInOneMenu } from '@ohif/ui';\nimport { IStackViewport, IVolumeViewport } from '@cornerstonejs/core/dist/esm/types';\n\nimport { setEnabledElement } from '../state';\n\nimport './OHIFCornerstoneViewport.css';\nimport CornerstoneOverlays from './Overlays/CornerstoneOverlays';\nimport getSOPInstanceAttributes from '../utils/measurementServiceMappings/utils/getSOPInstanceAttributes';\nimport CinePlayer from '../components/CinePlayer';\nimport { Types } from '@ohif/core';\n\nimport OHIFViewportActionCorners from '../components/OHIFViewportActionCorners';\nimport { getWindowLevelActionMenu } from '../components/WindowLevelActionMenu/getWindowLevelActionMenu';\nimport { useAppConfig } from '@state';\n\nimport { LutPresentation, PositionPresentation } from '../types/Presentation';\n\nconst STACK = 'stack';\n\n/**\n * Caches the jump to measurement operation, so that if display set is shown,\n * it can jump to the measurement.\n */\nlet cacheJumpToMeasurementEvent;\n\nfunction areEqual(prevProps, nextProps) {\n  if (nextProps.needsRerendering) {\n    return false;\n  }\n\n  if (prevProps.displaySets.length !== nextProps.displaySets.length) {\n    return false;\n  }\n\n  if (prevProps.viewportOptions.orientation !== nextProps.viewportOptions.orientation) {\n    return false;\n  }\n\n  if (prevProps.viewportOptions.toolGroupId !== nextProps.viewportOptions.toolGroupId) {\n    return false;\n  }\n\n  if (prevProps.viewportOptions.viewportType !== nextProps.viewportOptions.viewportType) {\n    return false;\n  }\n\n  if (nextProps.viewportOptions.needsRerendering) {\n    return false;\n  }\n\n  const prevDisplaySets = prevProps.displaySets;\n  const nextDisplaySets = nextProps.displaySets;\n\n  if (prevDisplaySets.length !== nextDisplaySets.length) {\n    return false;\n  }\n\n  for (let i = 0; i < prevDisplaySets.length; i++) {\n    const prevDisplaySet = prevDisplaySets[i];\n\n    const foundDisplaySet = nextDisplaySets.find(\n      nextDisplaySet =>\n        nextDisplaySet.displaySetInstanceUID === prevDisplaySet.displaySetInstanceUID\n    );\n\n    if (!foundDisplaySet) {\n      return false;\n    }\n\n    // check they contain the same image\n    if (foundDisplaySet.images?.length !== prevDisplaySet.images?.length) {\n      return false;\n    }\n\n    // check if their imageIds are the same\n    if (foundDisplaySet.images?.length) {\n      for (let j = 0; j < foundDisplaySet.images.length; j++) {\n        if (foundDisplaySet.images[j].imageId !== prevDisplaySet.images[j].imageId) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n\n// Todo: This should be done with expose of internal API similar to react-vtkjs-viewport\n// Then we don't need to worry about the re-renders if the props change.\nconst OHIFCornerstoneViewport = React.memo((props: withAppTypes) => {\n  const {\n    displaySets,\n    dataSource,\n    viewportOptions,\n    displaySetOptions,\n    servicesManager,\n    onElementEnabled,\n    // eslint-disable-next-line react/prop-types\n    onElementDisabled,\n    isJumpToMeasurementDisabled = false,\n    // Note: you SHOULD NOT use the initialImageIdOrIndex for manipulation\n    // of the imageData in the OHIFCornerstoneViewport. This prop is used\n    // to set the initial state of the viewport's first image to render\n    // eslint-disable-next-line react/prop-types\n    initialImageIndex,\n    // if the viewport is part of a hanging protocol layout\n    // we should not really rely on the old synchronizers and\n    // you see below we only rehydrate the synchronizers if the viewport\n    // is not part of the hanging protocol layout. HPs should\n    // define their own synchronizers. Since the synchronizers are\n    // viewportId dependent and\n    // eslint-disable-next-line react/prop-types\n    isHangingProtocolLayout,\n  } = props;\n\n  const viewportId = viewportOptions.viewportId;\n\n  if (!viewportId) {\n    throw new Error('Viewport ID is required');\n  }\n\n  // Make sure displaySetOptions has one object per displaySet\n  while (displaySetOptions.length < displaySets.length) {\n    displaySetOptions.push({});\n  }\n\n  // Since we only have support for dynamic data in volume viewports, we should\n  // handle this case here and set the viewportType to volume if any of the\n  // displaySets are dynamic volumes\n  viewportOptions.viewportType = displaySets.some(ds => ds.isDynamicVolume && ds.isReconstructable)\n    ? 'volume'\n    : viewportOptions.viewportType;\n\n  const [scrollbarHeight, setScrollbarHeight] = useState('100px');\n  const [enabledVPElement, setEnabledVPElement] = useState(null);\n  const elementRef = useRef() as React.MutableRefObject<HTMLDivElement>;\n  const [appConfig] = useAppConfig();\n\n  const {\n    measurementService,\n    displaySetService,\n    toolbarService,\n    toolGroupService,\n    syncGroupService,\n    cornerstoneViewportService,\n    cornerstoneCacheService,\n    viewportGridService,\n    stateSyncService,\n    viewportActionCornersService,\n  } = servicesManager.services;\n\n  const [viewportDialogState] = useViewportDialog();\n  // useCallback for scroll bar height calculation\n  const setImageScrollBarHeight = useCallback(() => {\n    const scrollbarHeight = `${elementRef.current.clientHeight - 40}px`;\n    setScrollbarHeight(scrollbarHeight);\n  }, [elementRef]);\n\n  // useCallback for onResize\n  const onResize = useCallback(() => {\n    if (elementRef.current) {\n      cornerstoneViewportService.resize();\n      setImageScrollBarHeight();\n    }\n  }, [elementRef]);\n\n  const cleanUpServices = useCallback(\n    viewportInfo => {\n      const renderingEngineId = viewportInfo.getRenderingEngineId();\n      const syncGroups = viewportInfo.getSyncGroups();\n\n      toolGroupService.removeViewportFromToolGroup(viewportId, renderingEngineId);\n\n      syncGroupService.removeViewportFromSyncGroup(viewportId, renderingEngineId, syncGroups);\n\n      viewportActionCornersService.clear(viewportId);\n    },\n    [viewportId]\n  );\n\n  const elementEnabledHandler = useCallback(\n    evt => {\n      // check this is this element reference and return early if doesn't match\n      if (evt.detail.element !== elementRef.current) {\n        return;\n      }\n\n      const { viewportId, element } = evt.detail;\n      const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\n      setEnabledElement(viewportId, element);\n      setEnabledVPElement(element);\n\n      const renderingEngineId = viewportInfo.getRenderingEngineId();\n      const toolGroupId = viewportInfo.getToolGroupId();\n      const syncGroups = viewportInfo.getSyncGroups();\n\n      toolGroupService.addViewportToToolGroup(viewportId, renderingEngineId, toolGroupId);\n\n      syncGroupService.addViewportToSyncGroup(viewportId, renderingEngineId, syncGroups);\n\n      const synchronizersStore = stateSyncService.getState().synchronizersStore;\n\n      if (synchronizersStore?.[viewportId]?.length && !isHangingProtocolLayout) {\n        // If the viewport used to have a synchronizer, re apply it again\n        _rehydrateSynchronizers(synchronizersStore, viewportId, syncGroupService);\n      }\n\n      if (onElementEnabled) {\n        onElementEnabled(evt);\n      }\n    },\n    [viewportId, onElementEnabled, toolGroupService]\n  );\n\n  // disable the element upon unmounting\n  useEffect(() => {\n    cornerstoneViewportService.enableViewport(viewportId, elementRef.current);\n\n    eventTarget.addEventListener(Enums.Events.ELEMENT_ENABLED, elementEnabledHandler);\n\n    setImageScrollBarHeight();\n\n    return () => {\n      const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\n\n      if (!viewportInfo) {\n        return;\n      }\n\n      cornerstoneViewportService.storePresentation({ viewportId });\n\n      // This should be done after the store presentation since synchronizers\n      // will get cleaned up and they need the viewportInfo to be present\n      cleanUpServices(viewportInfo);\n\n      if (onElementDisabled) {\n        onElementDisabled(viewportInfo);\n      }\n\n      cornerstoneViewportService.disableElement(viewportId);\n\n      eventTarget.removeEventListener(Enums.Events.ELEMENT_ENABLED, elementEnabledHandler);\n    };\n  }, []);\n\n  // subscribe to displaySet metadata invalidation (updates)\n  // Currently, if the metadata changes we need to re-render the display set\n  // for it to take effect in the viewport. As we deal with scaling in the loading,\n  // we need to remove the old volume from the cache, and let the\n  // viewport to re-add it which will use the new metadata. Otherwise, the\n  // viewport will use the cached volume and the new metadata will not be used.\n  // Note: this approach does not actually end of sending network requests\n  // and it uses the network cache\n  useEffect(() => {\n    const { unsubscribe } = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SET_SERIES_METADATA_INVALIDATED,\n      async ({\n        displaySetInstanceUID: invalidatedDisplaySetInstanceUID,\n        invalidateData,\n      }: Types.DisplaySetSeriesMetadataInvalidatedEvent) => {\n        if (!invalidateData) {\n          return;\n        }\n\n        const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\n\n        if (viewportInfo.hasDisplaySet(invalidatedDisplaySetInstanceUID)) {\n          const viewportData = viewportInfo.getViewportData();\n          const newViewportData = await cornerstoneCacheService.invalidateViewportData(\n            viewportData,\n            invalidatedDisplaySetInstanceUID,\n            dataSource,\n            displaySetService\n          );\n\n          const keepCamera = true;\n          cornerstoneViewportService.updateViewport(viewportId, newViewportData, keepCamera);\n        }\n      }\n    );\n    return () => {\n      unsubscribe();\n    };\n  }, [viewportId]);\n\n  useEffect(() => {\n    // handle the default viewportType to be stack\n    if (!viewportOptions.viewportType) {\n      viewportOptions.viewportType = STACK;\n    }\n\n    const loadViewportData = async () => {\n      const viewportData = await cornerstoneCacheService.createViewportData(\n        displaySets,\n        viewportOptions,\n        dataSource,\n        initialImageIndex\n      );\n\n      // The presentation state will have been stored previously by closing\n      // a viewport.  Otherwise, this viewport will be unchanged and the\n      // presentation information will be directly carried over.\n      const state = stateSyncService.getState();\n      const lutPresentationStore = state.lutPresentationStore as LutPresentation;\n      const positionPresentationStore = state.positionPresentationStore as PositionPresentation;\n\n      const { presentationIds } = viewportOptions;\n      const presentations = {\n        positionPresentation: positionPresentationStore[presentationIds?.positionPresentationId],\n        lutPresentation: lutPresentationStore[presentationIds?.lutPresentationId],\n      };\n      let measurement;\n      if (cacheJumpToMeasurementEvent?.viewportId === viewportId) {\n        measurement = cacheJumpToMeasurementEvent.measurement;\n        // Delete the position presentation so that viewport navigates direct\n        presentations.positionPresentation = null;\n        cacheJumpToMeasurementEvent = null;\n      }\n\n      // Note: This is a hack to get the grid to re-render the OHIFCornerstoneViewport component\n      // Used for segmentation hydration right now, since the logic to decide whether\n      // a viewport needs to render a segmentation lives inside the CornerstoneViewportService\n      // so we need to re-render (force update via change of the needsRerendering) so that React\n      // does the diffing and decides we should render this again (although the id and element has not changed)\n      // so that the CornerstoneViewportService can decide whether to render the segmentation or not. Not that we reached here we can turn it off.\n      if (viewportOptions.needsRerendering) {\n        viewportOptions.needsRerendering = false;\n      }\n\n      cornerstoneViewportService.setViewportData(\n        viewportId,\n        viewportData,\n        viewportOptions,\n        displaySetOptions,\n        presentations\n      );\n      if (measurement) {\n        cs3DTools.annotation.selection.setAnnotationSelected(measurement.uid);\n      }\n    };\n\n    loadViewportData();\n  }, [viewportOptions, displaySets, dataSource]);\n\n  /**\n   * There are two scenarios for jump to click\n   * 1. Current viewports contain the displaySet that the annotation was drawn on\n   * 2. Current viewports don't contain the displaySet that the annotation was drawn on\n   * and we need to change the viewports displaySet for jumping.\n   * Since measurement_jump happens via events and listeners, the former case is handled\n   * by the measurement_jump direct callback, but the latter case is handled first by\n   * the viewportGrid to set the correct displaySet on the viewport, AND THEN we check\n   * the cache for jumping to see if there is any jump queued, then we jump to the correct slice.\n   */\n  useEffect(() => {\n    if (isJumpToMeasurementDisabled) {\n      return;\n    }\n\n    const unsubscribeFromJumpToMeasurementEvents = _subscribeToJumpToMeasurementEvents(\n      measurementService,\n      displaySetService,\n      elementRef,\n      viewportId,\n      displaySets,\n      viewportGridService,\n      cornerstoneViewportService\n    );\n\n    _checkForCachedJumpToMeasurementEvents(\n      measurementService,\n      displaySetService,\n      elementRef,\n      viewportId,\n      displaySets,\n      viewportGridService,\n      cornerstoneViewportService\n    );\n\n    return () => {\n      unsubscribeFromJumpToMeasurementEvents();\n    };\n  }, [displaySets, elementRef, viewportId]);\n\n  // Set up the window level action menu in the viewport action corners.\n  useEffect(() => {\n    // Doing an === check here because the default config value when not set is true\n    if (appConfig.addWindowLevelActionMenu === false) {\n      return;\n    }\n\n    // TODO: In the future we should consider using the customization service\n    // to determine if and in which corner various action components should go.\n    const wlActionMenu = getWindowLevelActionMenu({\n      viewportId,\n      element: elementRef.current,\n      displaySets,\n      servicesManager,\n      commandsManager,\n      verticalDirection: AllInOneMenu.VerticalDirection.TopToBottom,\n      horizontalDirection: AllInOneMenu.HorizontalDirection.RightToLeft,\n    });\n\n    viewportActionCornersService.setComponent({\n      viewportId,\n      id: 'windowLevelActionMenu',\n      component: wlActionMenu,\n      location: viewportActionCornersService.LOCATIONS.topRight,\n      indexPriority: -100,\n    });\n  }, [displaySets, viewportId, viewportActionCornersService, servicesManager, commandsManager]);\n\n  const { ref: resizeRef } = useResizeDetector({\n    onResize,\n  });\n  return (\n    <React.Fragment>\n      <div className=\"viewport-wrapper\">\n        <div\n          className=\"cornerstone-viewport-element\"\n          style={{ height: '100%', width: '100%' }}\n          onContextMenu={e => e.preventDefault()}\n          onMouseDown={e => e.preventDefault()}\n          ref={el => {\n            resizeRef.current = el;\n            elementRef.current = el;\n          }}\n        ></div>\n        <CornerstoneOverlays\n          viewportId={viewportId}\n          toolBarService={toolbarService}\n          element={elementRef.current}\n          scrollbarHeight={scrollbarHeight}\n          servicesManager={servicesManager}\n        />\n        <CinePlayer\n          enabledVPElement={enabledVPElement}\n          viewportId={viewportId}\n          servicesManager={servicesManager}\n        />\n      </div>\n      {/* top offset of 24px to account for ViewportActionCorners. */}\n      <div className=\"absolute top-[24px] w-full\">\n        {viewportDialogState.viewportId === viewportId && (\n          <Notification\n            id=\"viewport-notification\"\n            message={viewportDialogState.message}\n            type={viewportDialogState.type}\n            actions={viewportDialogState.actions}\n            onSubmit={viewportDialogState.onSubmit}\n            onOutsideClick={viewportDialogState.onOutsideClick}\n            onKeyPress={viewportDialogState.onKeyPress}\n          />\n        )}\n      </div>\n      {/* The OHIFViewportActionCorners follows the viewport in the DOM so that it is naturally at a higher z-index.*/}\n      <OHIFViewportActionCorners viewportId={viewportId} />\n    </React.Fragment>\n  );\n}, areEqual);\n\nfunction _subscribeToJumpToMeasurementEvents(\n  measurementService,\n  displaySetService,\n  elementRef,\n  viewportId,\n  displaySets,\n  viewportGridService,\n  cornerstoneViewportService\n) {\n  const { unsubscribe } = measurementService.subscribe(\n    MeasurementService.EVENTS.JUMP_TO_MEASUREMENT_VIEWPORT,\n    props => {\n      cacheJumpToMeasurementEvent = props;\n      const { viewportId: jumpId, measurement, isConsumed } = props;\n      if (!measurement || isConsumed) {\n        return;\n      }\n      if (cacheJumpToMeasurementEvent.cornerstoneViewport === undefined) {\n        // Decide on which viewport should handle this\n        cacheJumpToMeasurementEvent.cornerstoneViewport =\n          cornerstoneViewportService.getViewportIdToJump(\n            jumpId,\n            measurement.displaySetInstanceUID,\n            {\n              referencedImageId:\n                measurement.referencedImageId || measurement.metadata?.referencedImageId,\n            }\n          );\n      }\n      if (cacheJumpToMeasurementEvent.cornerstoneViewport !== viewportId) {\n        return;\n      }\n      _jumpToMeasurement(\n        measurement,\n        elementRef,\n        viewportId,\n        measurementService,\n        displaySetService,\n        viewportGridService,\n        cornerstoneViewportService\n      );\n    }\n  );\n\n  return unsubscribe;\n}\n\n// Check if there is a queued jumpToMeasurement event\nfunction _checkForCachedJumpToMeasurementEvents(\n  measurementService,\n  displaySetService,\n  elementRef,\n  viewportId,\n  displaySets,\n  viewportGridService,\n  cornerstoneViewportService\n) {\n  if (!cacheJumpToMeasurementEvent) {\n    return;\n  }\n  if (cacheJumpToMeasurementEvent.isConsumed) {\n    cacheJumpToMeasurementEvent = null;\n    return;\n  }\n  const displaysUIDs = displaySets.map(displaySet => displaySet.displaySetInstanceUID);\n  if (!displaysUIDs?.length) {\n    return;\n  }\n\n  // Jump to measurement if the measurement exists\n  const { measurement } = cacheJumpToMeasurementEvent;\n  if (measurement && elementRef) {\n    if (displaysUIDs.includes(measurement?.displaySetInstanceUID)) {\n      _jumpToMeasurement(\n        measurement,\n        elementRef,\n        viewportId,\n        measurementService,\n        displaySetService,\n        viewportGridService,\n        cornerstoneViewportService\n      );\n    }\n  }\n}\n\nfunction _jumpToMeasurement(\n  measurement,\n  targetElementRef,\n  viewportId,\n  measurementService,\n  displaySetService,\n  viewportGridService,\n  cornerstoneViewportService\n) {\n  const targetElement = targetElementRef.current;\n  const { displaySetInstanceUID, SOPInstanceUID, frameNumber } = measurement;\n\n  if (!SOPInstanceUID) {\n    console.warn('cannot jump in a non-acquisition plane measurements yet');\n    return;\n  }\n\n  const referencedDisplaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n\n  // Todo: setCornerstoneMeasurementActive should be handled by the toolGroupManager\n  //  to set it properly\n  // setCornerstoneMeasurementActive(measurement);\n\n  viewportGridService.setActiveViewportId(viewportId);\n\n  const enabledElement = getEnabledElement(targetElement);\n\n  if (enabledElement) {\n    // See how the jumpToSlice() of Cornerstone3D deals with imageIdx param.\n    const viewport = enabledElement.viewport as IStackViewport | IVolumeViewport;\n\n    let imageIdIndex = 0;\n    let viewportCameraDirectionMatch = true;\n\n    if (viewport instanceof StackViewport) {\n      const imageIds = viewport.getImageIds();\n      imageIdIndex = imageIds.findIndex(imageId => {\n        const { SOPInstanceUID: aSOPInstanceUID, frameNumber: aFrameNumber } =\n          getSOPInstanceAttributes(imageId);\n        return aSOPInstanceUID === SOPInstanceUID && (!frameNumber || frameNumber === aFrameNumber);\n      });\n    } else {\n      // for volume viewport we can't rely on the imageIdIndex since it can be\n      // a reconstructed view that doesn't match the original slice numbers etc.\n      const { viewPlaneNormal: measurementViewPlane } = measurement.metadata;\n      imageIdIndex = referencedDisplaySet.images.findIndex(\n        i => i.SOPInstanceUID === SOPInstanceUID\n      );\n\n      // the index is reversed in the volume viewport\n      // imageIdIndex = referencedDisplaySet.images.length - 1 - imageIdIndex;\n\n      const { viewPlaneNormal: viewportViewPlane } = viewport.getCamera();\n\n      // should compare abs for both planes since the direction can be flipped\n      if (\n        measurementViewPlane &&\n        !csUtils.isEqual(measurementViewPlane.map(Math.abs), viewportViewPlane.map(Math.abs))\n      ) {\n        viewportCameraDirectionMatch = false;\n      }\n    }\n\n    if (!viewportCameraDirectionMatch || imageIdIndex === -1) {\n      return;\n    }\n\n    cs3DTools.utilities.jumpToSlice(targetElement, {\n      imageIndex: imageIdIndex,\n    });\n\n    cs3DTools.annotation.selection.setAnnotationSelected(measurement.uid);\n    // Jump to measurement consumed, remove.\n    cacheJumpToMeasurementEvent?.consume?.();\n    cacheJumpToMeasurementEvent = null;\n  }\n}\n\nfunction _rehydrateSynchronizers(\n  synchronizersStore: { [key: string]: unknown },\n  viewportId: string,\n  syncGroupService: any\n) {\n  synchronizersStore[viewportId].forEach(synchronizerObj => {\n    if (!synchronizerObj.id) {\n      return;\n    }\n\n    const { id, sourceViewports, targetViewports } = synchronizerObj;\n\n    const synchronizer = syncGroupService.getSynchronizer(id);\n\n    if (!synchronizer) {\n      return;\n    }\n\n    const sourceViewportInfo = sourceViewports.find(\n      sourceViewport => sourceViewport.viewportId === viewportId\n    );\n\n    const targetViewportInfo = targetViewports.find(\n      targetViewport => targetViewport.viewportId === viewportId\n    );\n\n    const isSourceViewportInSynchronizer = synchronizer\n      .getSourceViewports()\n      .find(sourceViewport => sourceViewport.viewportId === viewportId);\n\n    const isTargetViewportInSynchronizer = synchronizer\n      .getTargetViewports()\n      .find(targetViewport => targetViewport.viewportId === viewportId);\n\n    // if the viewport was previously a source viewport, add it again\n    if (sourceViewportInfo && !isSourceViewportInSynchronizer) {\n      synchronizer.addSource({\n        viewportId: sourceViewportInfo.viewportId,\n        renderingEngineId: sourceViewportInfo.renderingEngineId,\n      });\n    }\n\n    // if the viewport was previously a target viewport, add it again\n    if (targetViewportInfo && !isTargetViewportInSynchronizer) {\n      synchronizer.addTarget({\n        viewportId: targetViewportInfo.viewportId,\n        renderingEngineId: targetViewportInfo.renderingEngineId,\n      });\n    }\n  });\n}\n\n// Component displayName\nOHIFCornerstoneViewport.displayName = 'OHIFCornerstoneViewport';\n\nOHIFCornerstoneViewport.propTypes = {\n  displaySets: PropTypes.array.isRequired,\n  dataSource: PropTypes.object.isRequired,\n  viewportOptions: PropTypes.object,\n  displaySetOptions: PropTypes.arrayOf(PropTypes.any),\n  servicesManager: PropTypes.object.isRequired,\n  onElementEnabled: PropTypes.func,\n  isJumpToMeasurementDisabled: PropTypes.bool,\n  // Note: you SHOULD NOT use the initialImageIdOrIndex for manipulation\n  // of the imageData in the OHIFCornerstoneViewport. This prop is used\n  // to set the initial state of the viewport's first image to render\n  initialImageIdOrIndex: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\n\nexport default OHIFCornerstoneViewport;\n","import React, { ReactNode } from 'react';\nimport { WindowLevelActionMenu } from './WindowLevelActionMenu';\n\nexport function getWindowLevelActionMenu({\n  viewportId,\n  element,\n  displaySets,\n  servicesManager,\n  commandsManager,\n  verticalDirection,\n  horizontalDirection,\n}: withAppTypes): ReactNode {\n  const { customizationService } = servicesManager.services;\n\n  const { presets } = customizationService.get('cornerstone.windowLevelPresets');\n  const colorbarProperties = customizationService.get('cornerstone.colorbar');\n  const { volumeRenderingPresets, volumeRenderingQualityRange } = customizationService.get(\n    'cornerstone.3dVolumeRendering'\n  );\n\n  const displaySetPresets = displaySets\n    .filter(displaySet => presets[displaySet.Modality])\n    .map(displaySet => {\n      return { [displaySet.Modality]: presets[displaySet.Modality] };\n    });\n\n  return (\n    <WindowLevelActionMenu\n      viewportId={viewportId}\n      element={element}\n      presets={displaySetPresets}\n      verticalDirection={verticalDirection}\n      horizontalDirection={horizontalDirection}\n      commandsManager={commandsManager}\n      servicesManager={servicesManager}\n      colorbarProperties={colorbarProperties}\n      displaySets={displaySets}\n      volumeRenderingPresets={volumeRenderingPresets}\n      volumeRenderingQualityRange={volumeRenderingQualityRange}\n    />\n  );\n}\n"],"names":["CornerstoneImageScrollbar","viewportData","viewportId","element","imageSliceData","setImageSliceData","scrollbarHeight","servicesManager","cineService","cornerstoneViewportService","services","useEffect","viewport","getCornerstoneViewport","viewportType","Enums","STACK","ORTHOGRAPHIC","sliceData","utilities","imageIndex","numberOfSlices","getCurrentImageIdIndex","data","imageIds","length","updateStackIndex","event","newImageIdIndex","detail","addEventListener","STACK_VIEWPORT_SCROLL","removeEventListener","updateVolumeIndex","VOLUME_NEW_IMAGE","React","ImageScrollbar","onChange","evt","onImageScrollbarChange","isCineEnabled","getState","stopClip","setCine","id","isPlaying","csToolsUtils","debounceLoading","max","height","value","propTypes","PropTypes","isRequired","Element","getOrientationStringLPS","invertOrientationStringLPS","orientationMarkers","rotation","setRotation","useState","flipHorizontal","setFlipHorizontal","flipVertical","setFlipVertical","cameraModifiedListener","previousCamera","camera","undefined","CAMERA_MODIFIED","markers","useMemo","rowCosines","columnCosines","isDefaultValueSetForColumnCosine","imageId","metaData","getEnabledElement","viewUp","viewPlaneNormal","getCamera","viewRight","vec3","rowString","columnString","oppositeRowString","top","left","right","bottom","_getOrientationMarkers","getViewportInfo","map","m","index","className","classNames","key","console","log","ViewportImageSliceLoadingIndicator","loading","setLoading","error","setError","loadIndicatorRef","useRef","imageIdToBeLoaded","setLoadingState","clearTimeout","current","setTimeout","setFinishLoadingState","setErrorState","IMAGE_LOAD_ERROR","STACK_NEW_IMAGE","props","setViewportData","unsubscribe","subscribe","EVENTS","VIEWPORT_DATA_CHANGED","viewportInfo","viewportOptions","customViewportProps","hideOverlays","ViewportImageScrollbar","CustomizableViewportOverlay","ViewportOrientationMarkers","RenderCinePlayer","newStackFrameRate","dynamicInfo","dynamicInfoProp","customizationService","component","CinePlayerComponent","CinePlayer","get","setDynamicInfo","handleTimePointIndexChange","volumeId","timePointIndex","numTimePoints","splittingTag","label","eventTarget","StreamingEnums","DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED","cache","getVolume","updateDynamicInfo","useCallback","frameRate","onClose","setIsCineEnabled","onPlayPauseChange","onFrameRateChange","enabledVPElement","displaySetService","viewportGridService","cines","useCine","setNewStackFrameRate","appConfig","useAppConfig","isMountedRef","cineHandler","validFrameRate","Math","playClip","framesPerSecond","newDisplaySetHandler","viewports","displaySetInstanceUIDs","forEach","displaySetInstanceUID","displaySet","getDisplaySetByUID","FrameRate","round","autoPlayCine","isDynamicVolume","dynamicVolumeInfo","timePoints","STACK_VIEWPORT_NEW_STACK","VOLUME_VIEWPORT_NEW_VOLUME","cine","viewportActionCornersState","useViewportActionCornersContext","ViewportActionCorners","cornerComponents","Colormap","colormaps","displaySets","commandsManager","activeDisplaySet","setActiveDisplaySet","showPreview","setShowPreview","prePreviewColormap","setPrePreviewColormap","showPreviewRef","prePreviewColormapRef","activeDisplaySetRef","onSetColorLUT","opacity","includes","colormap","name","run","commandName","commandOptions","immediate","context","buttons","children","Modality","style","minWidth","fontSize","textAlign","display","justifyContent","alignItems","ButtonGroup","onActiveIndexChange","activeIndex","findIndex","ds","SwitchButton","checked","AllInOneMenu","description","onClick","onMouseEnter","getViewportColormap","StackViewport","getProperties","find","c","Name","actorEntry","getActors","entry","uid","onMouseLeave","setViewportColorbar","colorbarOptions","backgroundColor","getViewportOptions","background","ticks","position","font","color","maxNumTicks","tickSize","tickWidth","labelMargin","push","VolumeViewport","options","Colorbar","colorbarProperties","colorbarService","width","colorbarWidth","colorbarTickPosition","colorbarContainerPosition","colorbarInitialColormap","showColorbar","setShowColorbar","hasColorbar","onSetColorbar","activeColormapName","STATE_CHANGED","updateColorbarState","WindowLevel","presets","t","useTranslation","onSetWindowLevel","modalityPresets","modalityIndex","Object","entries","modality","presetsArray","preset","secondaryLabel","window","level","VolumeRenderingPresetsContent","filteredPresets","setFilteredPresets","searchValue","setSearchValue","selectedPreset","setSelectedPreset","handleSearchChange","filtered","filter","toLowerCase","handleApply","runCommand","InputFilterText","onDebounceChange","placeholder","Icon","maxChars","slice","formatLabel","Button","size","ButtonEnums","medium","type","secondary","VolumeRenderingPresets","volumeRenderingPresets","uiModalService","icon","rightIcon","onClickPresets","show","content","title","movable","contentProps","hide","containerDimensions","contentDimensions","VolumeRenderingQuality","volumeRenderingQualityRange","min","step","quality","setQuality","volumeQuality","actor","mapper","getMapper","spacing","getInputData","getSpacing","sampleDistance","getSampleDistance","averageSpacing","reduce","a","b","sqrt","htmlFor","e","parseInt","target","percentage","calculateBackground","VolumeShift","minShift","setMinShift","maxShift","setMaxShift","shift","setShift","shiftedBy","setStep","isBlocking","setIsBlocking","prevShiftRef","ofun","getProperty","getScalarOpacity","range","getRange","transferFunctionWidth","pow","floor","log10","onChangeRange","newShift","shiftDifference","shiftValue","onMouseDown","onMouseUp","VolumeLighting","ambient","setAmbient","diffuse","setDiffuse","specular","setSpecular","onAmbientChange","onDiffuseChange","onSpecularChange","getAmbient","getDiffuse","getSpecular","VolumeShade","shade","setShade","setKey","onShadeChange","getShade","VolumeRenderingOptions","WindowLevelActionMenu","verticalDirection","horizontalDirection","isLight","nonImageModalities","viewportGrid","useViewportGrid","activeViewportId","vpHeight","setVpHeight","clientHeight","menuKey","setMenuKey","is3DVolume","setIs3DVolume","newVpHeight","removeColorbar","VolumeViewport3D","iconClassName","menuStyle","maxHeight","onVisibilityChange","itemLabel","itemIcon","cacheJumpToMeasurementEvent","areEqual","prevProps","nextProps","needsRerendering","orientation","toolGroupId","prevDisplaySets","nextDisplaySets","i","prevDisplaySet","foundDisplaySet","nextDisplaySet","images","j","OHIFCornerstoneViewport","dataSource","displaySetOptions","onElementEnabled","onElementDisabled","isJumpToMeasurementDisabled","initialImageIndex","isHangingProtocolLayout","Error","some","isReconstructable","setScrollbarHeight","setEnabledVPElement","elementRef","measurementService","toolbarService","toolGroupService","syncGroupService","cornerstoneCacheService","stateSyncService","viewportActionCornersService","viewportDialogState","useViewportDialog","setImageScrollBarHeight","onResize","resize","cleanUpServices","renderingEngineId","getRenderingEngineId","syncGroups","getSyncGroups","removeViewportFromToolGroup","removeViewportFromSyncGroup","clear","elementEnabledHandler","setEnabledElement","getToolGroupId","addViewportToToolGroup","addViewportToSyncGroup","synchronizersStore","synchronizerObj","sourceViewports","targetViewports","synchronizer","getSynchronizer","sourceViewportInfo","sourceViewport","targetViewportInfo","targetViewport","isSourceViewportInSynchronizer","getSourceViewports","isTargetViewportInSynchronizer","getTargetViewports","addSource","addTarget","_rehydrateSynchronizers","enableViewport","ELEMENT_ENABLED","storePresentation","disableElement","DISPLAY_SET_SERIES_METADATA_INVALIDATED","async","invalidatedDisplaySetInstanceUID","invalidateData","hasDisplaySet","getViewportData","newViewportData","invalidateViewportData","keepCamera","updateViewport","createViewportData","state","lutPresentationStore","positionPresentationStore","presentationIds","presentations","positionPresentation","positionPresentationId","lutPresentation","lutPresentationId","measurement","cs3DTools","loadViewportData","unsubscribeFromJumpToMeasurementEvents","MeasurementService","JUMP_TO_MEASUREMENT_VIEWPORT","jumpId","isConsumed","cornerstoneViewport","getViewportIdToJump","referencedImageId","metadata","_jumpToMeasurement","_subscribeToJumpToMeasurementEvents","displaysUIDs","_checkForCachedJumpToMeasurementEvents","addWindowLevelActionMenu","wlActionMenu","displaySetPresets","getWindowLevelActionMenu","TopToBottom","RightToLeft","setComponent","location","LOCATIONS","topRight","indexPriority","ref","resizeRef","useResizeDetector","onContextMenu","preventDefault","el","CornerstoneOverlays","toolBarService","Notification","message","actions","onSubmit","onOutsideClick","onKeyPress","OHIFViewportActionCorners","targetElementRef","targetElement","SOPInstanceUID","frameNumber","warn","referencedDisplaySet","setActiveViewportId","enabledElement","imageIdIndex","viewportCameraDirectionMatch","getImageIds","aSOPInstanceUID","aFrameNumber","getSOPInstanceAttributes","measurementViewPlane","viewportViewPlane","csUtils","abs","consume","displayName","initialImageIdOrIndex"],"sourceRoot":""}