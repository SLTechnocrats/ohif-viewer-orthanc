{"version":3,"file":"2898.bundle.c4edf28cb06b0bcb98de.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-pmap/src/utils/initPMAPToolGroup.ts","webpack:///../../../extensions/cornerstone-dicom-pmap/src/viewports/OHIFCornerstonePMAPViewport.tsx"],"sourcesContent":["function createPMAPToolGroupAndAddTools(ToolGroupService, customizationService, toolGroupId) {\n  const { tools } = customizationService.get('cornerstone.overlayViewportTools') ?? {};\n  return ToolGroupService.createToolGroupAndAddTools(toolGroupId, tools);\n}\n\nexport default createPMAPToolGroupAndAddTools;\n","import PropTypes from 'prop-types';\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport { useViewportGrid } from '@ohif/ui';\nimport createPMAPToolGroupAndAddTools from '../utils/initPMAPToolGroup';\n\nconst PMAP_TOOLGROUP_BASE_NAME = 'PMAPToolGroup';\n\nfunction OHIFCornerstonePMAPViewport(props: withAppTypes) {\n  const { displaySets, viewportOptions, displaySetOptions, servicesManager, extensionManager } =\n    props;\n  const viewportId = viewportOptions.viewportId;\n  const { displaySetService, toolGroupService, customizationService } = servicesManager.services;\n  const toolGroupId = `${PMAP_TOOLGROUP_BASE_NAME}-${viewportId}`;\n\n  // PMAP viewport will always have a single display set\n  if (displaySets.length !== 1) {\n    throw new Error('PMAP viewport must have a single display set');\n  }\n\n  const pmapDisplaySet = displaySets[0];\n  const [viewportGrid, viewportGridService] = useViewportGrid();\n  const referencedDisplaySetRef = useRef(null);\n  const { viewports, activeViewportId } = viewportGrid;\n  const referencedDisplaySet = pmapDisplaySet.getReferenceDisplaySet();\n  const referencedDisplaySetMetadata = _getReferencedDisplaySetMetadata(\n    referencedDisplaySet,\n    pmapDisplaySet\n  );\n\n  referencedDisplaySetRef.current = {\n    displaySet: referencedDisplaySet,\n    metadata: referencedDisplaySetMetadata,\n  };\n\n  const getCornerstoneViewport = useCallback(() => {\n    const { displaySet: referencedDisplaySet } = referencedDisplaySetRef.current;\n    const { component: Component } = extensionManager.getModuleEntry(\n      '@ohif/extension-cornerstone.viewportModule.cornerstone'\n    );\n\n    displaySetOptions.unshift({});\n    const [pmapDisplaySetOptions] = displaySetOptions;\n\n    // Make sure `options` exists\n    pmapDisplaySetOptions.options = pmapDisplaySetOptions.options ?? {};\n\n    Object.assign(pmapDisplaySetOptions.options, {\n      colormap: {\n        name: 'rainbow',\n        opacity: [\n          { value: 0, opacity: 0.5 },\n          { value: 1, opacity: 1 },\n        ],\n      },\n    });\n\n    return (\n      <Component\n        {...props}\n        // Referenced + PMAP displaySets must be passed as parameter in this order\n        displaySets={[referencedDisplaySet, pmapDisplaySet]}\n        viewportOptions={{\n          viewportType: 'volume',\n          toolGroupId: toolGroupId,\n          orientation: viewportOptions.orientation,\n          viewportId: viewportOptions.viewportId,\n        }}\n        displaySetOptions={[{}, pmapDisplaySetOptions]}\n      ></Component>\n    );\n  }, [\n    extensionManager,\n    displaySetOptions,\n    props,\n    pmapDisplaySet,\n    toolGroupId,\n    viewportOptions.orientation,\n    viewportOptions.viewportId,\n  ]);\n\n  // Cleanup the PMAP viewport when the viewport is destroyed\n  useEffect(() => {\n    const onDisplaySetsRemovedSubscription = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SETS_REMOVED,\n      ({ displaySetInstanceUIDs }) => {\n        const activeViewport = viewports.get(activeViewportId);\n        if (displaySetInstanceUIDs.includes(activeViewport.displaySetInstanceUID)) {\n          viewportGridService.setDisplaySetsForViewport({\n            viewportId: activeViewportId,\n            displaySetInstanceUIDs: [],\n          });\n        }\n      }\n    );\n\n    return () => {\n      onDisplaySetsRemovedSubscription.unsubscribe();\n    };\n  }, [activeViewportId, displaySetService, viewportGridService, viewports]);\n\n  useEffect(() => {\n    let toolGroup = toolGroupService.getToolGroup(toolGroupId);\n\n    if (toolGroup) {\n      return;\n    }\n\n    // This creates a custom tool group which has the lifetime of this view only\n    toolGroup = createPMAPToolGroupAndAddTools(toolGroupService, customizationService, toolGroupId);\n\n    return () => toolGroupService.destroyToolGroup(toolGroupId);\n  }, [customizationService, toolGroupId, toolGroupService]);\n\n  return (\n    <>\n      <div className=\"relative flex h-full w-full flex-row overflow-hidden\">\n        {getCornerstoneViewport()}\n      </div>\n    </>\n  );\n}\n\nOHIFCornerstonePMAPViewport.propTypes = {\n  displaySets: PropTypes.arrayOf(PropTypes.object),\n  viewportId: PropTypes.string.isRequired,\n  dataSource: PropTypes.object,\n  children: PropTypes.node,\n};\n\nfunction _getReferencedDisplaySetMetadata(referencedDisplaySet, pmapDisplaySet) {\n  const { SharedFunctionalGroupsSequence } = pmapDisplaySet.instance;\n\n  const SharedFunctionalGroup = Array.isArray(SharedFunctionalGroupsSequence)\n    ? SharedFunctionalGroupsSequence[0]\n    : SharedFunctionalGroupsSequence;\n\n  const { PixelMeasuresSequence } = SharedFunctionalGroup;\n\n  const PixelMeasures = Array.isArray(PixelMeasuresSequence)\n    ? PixelMeasuresSequence[0]\n    : PixelMeasuresSequence;\n\n  const { SpacingBetweenSlices, SliceThickness } = PixelMeasures;\n\n  const image0 = referencedDisplaySet.images[0];\n  const referencedDisplaySetMetadata = {\n    PatientID: image0.PatientID,\n    PatientName: image0.PatientName,\n    PatientSex: image0.PatientSex,\n    PatientAge: image0.PatientAge,\n    SliceThickness: image0.SliceThickness || SliceThickness,\n    StudyDate: image0.StudyDate,\n    SeriesDescription: image0.SeriesDescription,\n    SeriesInstanceUID: image0.SeriesInstanceUID,\n    SeriesNumber: image0.SeriesNumber,\n    ManufacturerModelName: image0.ManufacturerModelName,\n    SpacingBetweenSlices: image0.SpacingBetweenSlices || SpacingBetweenSlices,\n  };\n\n  return referencedDisplaySetMetadata;\n}\n\nexport default OHIFCornerstonePMAPViewport;\n"],"names":["ToolGroupService","customizationService","toolGroupId","tools","get","createToolGroupAndAddTools","OHIFCornerstonePMAPViewport","props","displaySets","viewportOptions","displaySetOptions","servicesManager","extensionManager","viewportId","displaySetService","toolGroupService","services","length","Error","pmapDisplaySet","viewportGrid","viewportGridService","useViewportGrid","referencedDisplaySetRef","useRef","viewports","activeViewportId","referencedDisplaySet","getReferenceDisplaySet","referencedDisplaySetMetadata","SharedFunctionalGroupsSequence","instance","SharedFunctionalGroup","Array","isArray","PixelMeasuresSequence","PixelMeasures","SpacingBetweenSlices","SliceThickness","image0","images","PatientID","PatientName","PatientSex","PatientAge","StudyDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","ManufacturerModelName","_getReferencedDisplaySetMetadata","current","displaySet","metadata","getCornerstoneViewport","useCallback","component","Component","getModuleEntry","unshift","pmapDisplaySetOptions","options","Object","assign","colormap","name","opacity","value","React","_extends","viewportType","orientation","useEffect","onDisplaySetsRemovedSubscription","subscribe","EVENTS","DISPLAY_SETS_REMOVED","displaySetInstanceUIDs","activeViewport","includes","displaySetInstanceUID","setDisplaySetsForViewport","unsubscribe","toolGroup","getToolGroup","createPMAPToolGroupAndAddTools","destroyToolGroup","className","propTypes","PropTypes","isRequired","dataSource","children"],"sourceRoot":""}