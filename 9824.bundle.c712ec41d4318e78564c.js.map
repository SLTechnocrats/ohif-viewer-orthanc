{"version":3,"file":"9824.bundle.c712ec41d4318e78564c.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-pmap/src/id.js","webpack:///../../../extensions/cornerstone-dicom-pmap/src/getSopClassHandlerModule.ts","webpack:///../../../extensions/cornerstone-dicom-pmap/src/index.tsx"],"sourcesContent":["import packageJson from '../package.json';\n\nconst id = packageJson.name;\nconst SOPClassHandlerName = 'dicom-pmap';\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.${SOPClassHandlerName}`;\n\nexport { id, SOPClassHandlerId, SOPClassHandlerName };\n","import { utils } from '@ohif/core';\nimport { metaData, cache, utilities as csUtils, volumeLoader } from '@cornerstonejs/core';\nimport { adaptersPMAP } from '@cornerstonejs/adapters';\nimport { SOPClassHandlerId } from './id';\nimport { dicomLoaderService } from '@ohif/extension-cornerstone';\n\nconst VOLUME_LOADER_SCHEME = 'cornerstoneStreamingImageVolume';\nconst sopClassUids = ['1.2.840.10008.5.1.4.1.1.30'];\n\nfunction _getDisplaySetsFromSeries(\n  instances,\n  servicesManager: AppTypes.ServicesManager,\n  extensionManager\n) {\n  const instance = instances[0];\n\n  const {\n    StudyInstanceUID,\n    SeriesInstanceUID,\n    SOPInstanceUID,\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPClassUID,\n    wadoRoot,\n    wadoUri,\n    wadoUriRoot,\n  } = instance;\n\n  const displaySet = {\n    // Parametric map use to have the same modality as its referenced volume but\n    // \"PMAP\" is used in the viewer even though this is not a valid DICOM modality\n    Modality: 'PMAP',\n    isReconstructable: true, // by default for now\n    displaySetInstanceUID: `pmap.${utils.guid()}`,\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPInstanceUID,\n    SeriesInstanceUID,\n    StudyInstanceUID,\n    SOPClassHandlerId,\n    SOPClassUID,\n    referencedImages: null,\n    referencedSeriesInstanceUID: null,\n    referencedDisplaySetInstanceUID: null,\n    referencedVolumeURI: null,\n    referencedVolumeId: null,\n    isDerivedDisplaySet: true,\n    loadStatus: {\n      loading: false,\n      loaded: false,\n    },\n    sopClassUids,\n    instance,\n    instances: [instance],\n    wadoRoot,\n    wadoUriRoot,\n    wadoUri,\n    isOverlayDisplaySet: true,\n  };\n\n  const referencedSeriesSequence = instance.ReferencedSeriesSequence;\n\n  if (!referencedSeriesSequence) {\n    console.error('ReferencedSeriesSequence is missing for the parametric map');\n    return;\n  }\n\n  const referencedSeries = referencedSeriesSequence[0] || referencedSeriesSequence;\n\n  displaySet.referencedImages = instance.ReferencedSeriesSequence.ReferencedInstanceSequence;\n  displaySet.referencedSeriesInstanceUID = referencedSeries.SeriesInstanceUID;\n\n  // Does not get the referenced displaySet during parametric displaySet creation\n  // because it is still not available (getDisplaySetByUID returns `undefined`).\n  displaySet.getReferenceDisplaySet = () => {\n    const { displaySetService } = servicesManager.services;\n\n    if (displaySet.referencedDisplaySetInstanceUID) {\n      return displaySetService.getDisplaySetByUID(displaySet.referencedDisplaySetInstanceUID);\n    }\n\n    const referencedDisplaySets = displaySetService.getDisplaySetsForSeries(\n      displaySet.referencedSeriesInstanceUID\n    );\n\n    if (!referencedDisplaySets || referencedDisplaySets.length === 0) {\n      throw new Error('Referenced displaySet is missing for the parametric map');\n    }\n\n    const referencedDisplaySet = referencedDisplaySets[0];\n\n    displaySet.referencedDisplaySetInstanceUID = referencedDisplaySet.displaySetInstanceUID;\n\n    return referencedDisplaySet;\n  };\n\n  // Does not get the referenced volumeId during parametric displaySet creation because the\n  // referenced displaySet is still not avaialble  (getDisplaySetByUID returns `undefined`).\n  displaySet.getReferencedVolumeId = () => {\n    if (displaySet.referencedVolumeId) {\n      return displaySet.referencedVolumeId;\n    }\n\n    const referencedDisplaySet = displaySet.getReferenceDisplaySet();\n    const referencedVolumeURI = referencedDisplaySet.displaySetInstanceUID;\n    const referencedVolumeId = `${VOLUME_LOADER_SCHEME}:${referencedVolumeURI}`;\n\n    displaySet.referencedVolumeURI = referencedVolumeURI;\n    displaySet.referencedVolumeId = referencedVolumeId;\n\n    return referencedVolumeId;\n  };\n\n  displaySet.load = async ({ headers }) =>\n    await _load(displaySet, servicesManager, extensionManager, headers);\n\n  return [displaySet];\n}\n\nasync function _load(\n  displaySet,\n  servicesManager: AppTypes.ServicesManager,\n  extensionManager,\n  headers\n) {\n  const volumeId = `${VOLUME_LOADER_SCHEME}:${displaySet.displaySetInstanceUID}`;\n  const volumeLoadObject = cache.getVolumeLoadObject(volumeId);\n\n  if (volumeLoadObject) {\n    return volumeLoadObject.promise;\n  }\n\n  displaySet.loadStatus.loading = true;\n\n  // We don't want to fire multiple loads, so we'll wait for the first to finish\n  // and also return the same promise to any other callers.\n  // loadPromises[SOPInstanceUID] = new Promise(async (resolve, reject) => {\n  const promise = _loadParametricMap({\n    extensionManager,\n    displaySet,\n    headers,\n  });\n\n  cache.putVolumeLoadObject(volumeId, { promise }).catch(err => {\n    throw err;\n  });\n\n  promise\n    .then(() => {\n      displaySet.loadStatus.loading = false;\n      displaySet.loadStatus.loaded = true;\n    })\n    .catch(err => {\n      displaySet.loadStatus.loading = false;\n      throw err;\n    });\n\n  return promise;\n}\n\nasync function _loadParametricMap({ extensionManager, displaySet, headers }: withAppTypes) {\n  const arrayBuffer = await dicomLoaderService.findDicomDataPromise(displaySet, null, headers);\n  const referencedVolumeId = displaySet.getReferencedVolumeId();\n  const cachedReferencedVolume = cache.getVolume(referencedVolumeId);\n\n  // Parametric map can be loaded only if its referenced volume exists otherwise it will fail\n  if (!cachedReferencedVolume) {\n    throw new Error(\n      'Referenced Volume is missing for the PMAP, and stack viewport PMAP is not supported yet'\n    );\n  }\n\n  const { imageIds } = cachedReferencedVolume;\n  const results = await adaptersPMAP.Cornerstone3D.ParametricMap.generateToolState(\n    imageIds,\n    arrayBuffer,\n    metaData\n  );\n  const { pixelData } = results;\n  const TypedArrayConstructor = pixelData.constructor;\n  const paramMapId = displaySet.displaySetInstanceUID;\n\n  const derivedVolume = await volumeLoader.createAndCacheDerivedVolume(referencedVolumeId, {\n    volumeId: paramMapId,\n    targetBuffer: {\n      type: TypedArrayConstructor.name,\n    },\n  });\n\n  derivedVolume.getScalarData().set(pixelData);\n\n  const range = derivedVolume.imageData.getPointData().getScalars().getRange();\n  const windowLevel = csUtils.windowLevel.toWindowLevel(range[0], range[1]);\n\n  derivedVolume.metadata.voiLut = [windowLevel];\n  derivedVolume.loadStatus = { loaded: true };\n\n  return derivedVolume;\n}\n\nfunction getSopClassHandlerModule({ servicesManager, extensionManager }) {\n  const getDisplaySetsFromSeries = instances => {\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\n  };\n\n  return [\n    {\n      name: 'dicom-pmap',\n      sopClassUids,\n      getDisplaySetsFromSeries,\n    },\n  ];\n}\n\nexport default getSopClassHandlerModule;\n","import { id } from './id';\nimport React from 'react';\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\n\nconst Component = React.lazy(() => {\n  return import(/* webpackPrefetch: true */ './viewports/OHIFCornerstonePMAPViewport');\n});\n\nconst OHIFCornerstonePMAPViewport = props => {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </React.Suspense>\n  );\n};\n\n/**\n * You can remove any of the following modules if you don't need them.\n */\nconst extension = {\n  id,\n  getViewportModule({ servicesManager, extensionManager, commandsManager }) {\n    const ExtendedOHIFCornerstonePMAPViewport = props => {\n      return (\n        <OHIFCornerstonePMAPViewport\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          commandsManager={commandsManager}\n          {...props}\n        />\n      );\n    };\n\n    return [{ name: 'dicom-pmap', component: ExtendedOHIFCornerstonePMAPViewport }];\n  },\n  getSopClassHandlerModule,\n};\n\nexport default extension;\n"],"names":["id","packageJson","SOPClassHandlerId","VOLUME_LOADER_SCHEME","sopClassUids","_getDisplaySetsFromSeries","instances","servicesManager","extensionManager","instance","StudyInstanceUID","SeriesInstanceUID","SOPInstanceUID","SeriesDescription","SeriesNumber","SeriesDate","SOPClassUID","wadoRoot","wadoUri","wadoUriRoot","displaySet","Modality","isReconstructable","displaySetInstanceUID","utils","guid","referencedImages","referencedSeriesInstanceUID","referencedDisplaySetInstanceUID","referencedVolumeURI","referencedVolumeId","isDerivedDisplaySet","loadStatus","loading","loaded","isOverlayDisplaySet","referencedSeriesSequence","ReferencedSeriesSequence","console","error","referencedSeries","ReferencedInstanceSequence","getReferenceDisplaySet","displaySetService","services","getDisplaySetByUID","referencedDisplaySets","getDisplaySetsForSeries","length","Error","referencedDisplaySet","getReferencedVolumeId","load","async","headers","volumeId","volumeLoadObject","cache","getVolumeLoadObject","promise","arrayBuffer","dicomLoaderService","findDicomDataPromise","cachedReferencedVolume","getVolume","imageIds","results","adaptersPMAP","metaData","pixelData","TypedArrayConstructor","constructor","paramMapId","derivedVolume","volumeLoader","targetBuffer","type","name","getScalarData","set","range","imageData","getPointData","getScalars","getRange","windowLevel","csUtils","metadata","voiLut","_loadParametricMap","putVolumeLoadObject","catch","err","then","_load","getDisplaySetsFromSeries","Component","React","OHIFCornerstonePMAPViewport","props","fallback","getViewportModule","commandsManager","component","_extends","getSopClassHandlerModule"],"sourceRoot":""}