{"version":3,"file":"1994.bundle.a4d282292fc44b121347.js","mappings":"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","sources":["webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/measurementTrackingMachine.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptBeginTracking.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptTrackNewSeries.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptTrackNewStudy.ts","webpack:///../../../extensions/measurement-tracking/src/_shared/getNextSRSeriesNumber.js","webpack:///../../../extensions/measurement-tracking/src/_shared/PROMPT_RESPONSES.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptSaveReport.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptHydrateStructuredReport.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/hydrateStructuredReport.tsx","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptLabelAnnotation.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/TrackedMeasurementsContext.tsx","webpack:///../../../extensions/measurement-tracking/src/getContextModule.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/PanelStudyBrowserTracking.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/getImageSrcFromImageId.js","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/requestDisplaySetCreationForStudy.js","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/index.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelMeasurementTableTracking/index.tsx","webpack:///../../../extensions/measurement-tracking/src/getPanelModule.tsx","webpack:///../../../extensions/measurement-tracking/src/getViewportModule.tsx","webpack:///../../../extensions/measurement-tracking/src/index.tsx","webpack:///../../../extensions/measurement-tracking/src/id.js"],"sourcesContent":["import { hydrateStructuredReport } from '@ohif/extension-cornerstone-dicom-sr';\nimport { assign } from 'xstate';\n\nconst RESPONSE = {\n  NO_NEVER: -1,\n  CANCEL: 0,\n  CREATE_REPORT: 1,\n  ADD_SERIES: 2,\n  SET_STUDY_AND_SERIES: 3,\n  NO_NOT_FOR_SERIES: 4,\n  HYDRATE_REPORT: 5,\n};\n\nconst machineConfiguration = {\n  id: 'measurementTracking',\n  initial: 'idle',\n  context: {\n    activeViewportId: null,\n    trackedStudy: '',\n    trackedSeries: [],\n    ignoredSeries: [],\n    //\n    prevTrackedStudy: '',\n    prevTrackedSeries: [],\n    prevIgnoredSeries: [],\n    //\n    ignoredSRSeriesForHydration: [],\n    isDirty: false,\n  },\n  states: {\n    off: {\n      type: 'final',\n    },\n    labellingOnly: {\n      on: {\n        TRACK_SERIES: [\n          {\n            target: 'promptLabelAnnotation',\n            actions: ['setPreviousState'],\n          },\n          {\n            target: 'off',\n          },\n        ],\n      },\n    },\n    idle: {\n      entry: 'clearContext',\n      on: {\n        TRACK_SERIES: [\n          {\n            target: 'promptLabelAnnotation',\n            cond: 'isLabelOnMeasure',\n            actions: ['setPreviousState'],\n          },\n          {\n            target: 'promptBeginTracking',\n            actions: ['setPreviousState'],\n          },\n        ],\n        // Unused? We may only do PROMPT_HYDRATE_SR now?\n        SET_TRACKED_SERIES: [\n          {\n            target: 'tracking',\n            actions: ['setTrackedStudyAndMultipleSeries', 'setIsDirtyToClean'],\n          },\n        ],\n        PROMPT_HYDRATE_SR: {\n          target: 'promptHydrateStructuredReport',\n          cond: 'hasNotIgnoredSRSeriesForHydration',\n        },\n        RESTORE_PROMPT_HYDRATE_SR: 'promptHydrateStructuredReport',\n        HYDRATE_SR: 'hydrateStructuredReport',\n        UPDATE_ACTIVE_VIEWPORT_ID: {\n          actions: assign({\n            activeViewportId: (_, event) => event.activeViewportId,\n          }),\n        },\n      },\n    },\n    promptBeginTracking: {\n      invoke: {\n        src: 'promptBeginTracking',\n        onDone: [\n          {\n            target: 'tracking',\n            actions: ['setTrackedStudyAndSeries', 'setIsDirty'],\n            cond: 'shouldSetStudyAndSeries',\n          },\n          {\n            target: 'labellingOnly',\n            cond: 'isLabelOnMeasureAndShouldKillMachine',\n          },\n          {\n            target: 'off',\n            cond: 'shouldKillMachine',\n          },\n          {\n            target: 'idle',\n          },\n        ],\n        onError: {\n          target: 'idle',\n        },\n      },\n    },\n    tracking: {\n      on: {\n        TRACK_SERIES: [\n          {\n            target: 'promptLabelAnnotation',\n            cond: 'isLabelOnMeasure',\n            actions: ['setPreviousState'],\n          },\n          {\n            target: 'promptTrackNewStudy',\n            cond: 'isNewStudy',\n          },\n          {\n            target: 'promptTrackNewSeries',\n            cond: 'isNewSeries',\n          },\n        ],\n        UNTRACK_SERIES: [\n          {\n            target: 'tracking',\n            actions: ['removeTrackedSeries', 'setIsDirty'],\n            cond: 'hasRemainingTrackedSeries',\n          },\n          {\n            target: 'idle',\n          },\n        ],\n        SET_TRACKED_SERIES: [\n          {\n            target: 'tracking',\n            actions: ['setTrackedStudyAndMultipleSeries'],\n          },\n        ],\n        SAVE_REPORT: 'promptSaveReport',\n        SET_DIRTY: [\n          {\n            target: 'tracking',\n            actions: ['setIsDirty'],\n            cond: 'shouldSetDirty',\n          },\n          {\n            target: 'tracking',\n          },\n        ],\n      },\n    },\n    promptTrackNewSeries: {\n      invoke: {\n        src: 'promptTrackNewSeries',\n        onDone: [\n          {\n            target: 'tracking',\n            actions: ['addTrackedSeries', 'setIsDirty'],\n            cond: 'shouldAddSeries',\n          },\n          {\n            target: 'tracking',\n            actions: [\n              'discardPreviouslyTrackedMeasurements',\n              'setTrackedStudyAndSeries',\n              'setIsDirty',\n            ],\n            cond: 'shouldSetStudyAndSeries',\n          },\n          {\n            target: 'promptSaveReport',\n            cond: 'shouldPromptSaveReport',\n          },\n          {\n            target: 'tracking',\n          },\n        ],\n        onError: {\n          target: 'idle',\n        },\n      },\n    },\n    promptTrackNewStudy: {\n      invoke: {\n        src: 'promptTrackNewStudy',\n        onDone: [\n          {\n            target: 'tracking',\n            actions: [\n              'discardPreviouslyTrackedMeasurements',\n              'setTrackedStudyAndSeries',\n              'setIsDirty',\n            ],\n            cond: 'shouldSetStudyAndSeries',\n          },\n          {\n            target: 'tracking',\n            actions: ['ignoreSeries'],\n            cond: 'shouldAddIgnoredSeries',\n          },\n          {\n            target: 'promptSaveReport',\n            cond: 'shouldPromptSaveReport',\n          },\n          {\n            target: 'tracking',\n          },\n        ],\n        onError: {\n          target: 'idle',\n        },\n      },\n    },\n    promptSaveReport: {\n      invoke: {\n        src: 'promptSaveReport',\n        onDone: [\n          // \"clicked the save button\"\n          // - should clear all measurements\n          // - show DICOM SR\n          {\n            target: 'idle',\n            actions: ['clearAllMeasurements', 'showStructuredReportDisplaySetInActiveViewport'],\n            cond: 'shouldSaveAndContinueWithSameReport',\n          },\n          // \"starting a new report\"\n          // - remove \"just saved\" measurements\n          // - start tracking a new study + report\n          {\n            target: 'tracking',\n            actions: ['discardPreviouslyTrackedMeasurements', 'setTrackedStudyAndSeries'],\n            cond: 'shouldSaveAndStartNewReport',\n          },\n          // Cancel, back to tracking\n          {\n            target: 'tracking',\n          },\n        ],\n        onError: {\n          target: 'idle',\n        },\n      },\n    },\n    promptHydrateStructuredReport: {\n      invoke: {\n        src: 'promptHydrateStructuredReport',\n        onDone: [\n          {\n            target: 'tracking',\n            actions: [\n              'setTrackedStudyAndMultipleSeries',\n              'jumpToSameImageInActiveViewport',\n              'setIsDirtyToClean',\n            ],\n            cond: 'shouldHydrateStructuredReport',\n          },\n          {\n            target: 'idle',\n            actions: ['ignoreHydrationForSRSeries'],\n            cond: 'shouldIgnoreHydrationForSR',\n          },\n        ],\n        onError: {\n          target: 'idle',\n        },\n      },\n    },\n    hydrateStructuredReport: {\n      invoke: {\n        src: 'hydrateStructuredReport',\n        onDone: [\n          {\n            target: 'tracking',\n            actions: [\n              'setTrackedStudyAndMultipleSeries',\n              'jumpToSameImageInActiveViewport',\n              'setIsDirtyToClean',\n            ],\n          },\n        ],\n        onError: {\n          target: 'idle',\n        },\n      },\n    },\n    promptLabelAnnotation: {\n      invoke: {\n        src: 'promptLabelAnnotation',\n        onDone: [\n          {\n            target: 'labellingOnly',\n            cond: 'wasLabellingOnly',\n          },\n          {\n            target: 'promptBeginTracking',\n            cond: 'wasIdle',\n          },\n          {\n            target: 'promptTrackNewStudy',\n            cond: 'wasTrackingAndIsNewStudy',\n          },\n          {\n            target: 'promptTrackNewSeries',\n            cond: 'wasTrackingAndIsNewSeries',\n          },\n          {\n            target: 'tracking',\n            cond: 'wasTracking',\n          },\n          {\n            target: 'off',\n          },\n        ],\n      },\n    },\n  },\n  strict: true,\n};\n\nconst defaultOptions = {\n  services: {\n    promptBeginTracking: (ctx, evt) => {\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\n    },\n    promptTrackNewStudy: (ctx, evt) => {\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\n    },\n    promptTrackNewSeries: (ctx, evt) => {\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\n    },\n  },\n  actions: {\n    discardPreviouslyTrackedMeasurements: (ctx, evt) => {\n      console.log('discardPreviouslyTrackedMeasurements: not implemented');\n    },\n    clearAllMeasurements: (ctx, evt) => {\n      console.log('clearAllMeasurements: not implemented');\n    },\n    jumpToFirstMeasurementInActiveViewport: (ctx, evt) => {\n      console.warn('jumpToFirstMeasurementInActiveViewport: not implemented');\n    },\n    showStructuredReportDisplaySetInActiveViewport: (ctx, evt) => {\n      console.warn('showStructuredReportDisplaySetInActiveViewport: not implemented');\n    },\n    clearContext: assign({\n      trackedStudy: '',\n      trackedSeries: [],\n      ignoredSeries: [],\n      prevTrackedStudy: '',\n      prevTrackedSeries: [],\n      prevIgnoredSeries: [],\n    }),\n    // Promise resolves w/ `evt.data.*`\n    setTrackedStudyAndSeries: assign((ctx, evt) => ({\n      prevTrackedStudy: ctx.trackedStudy,\n      prevTrackedSeries: ctx.trackedSeries.slice(),\n      prevIgnoredSeries: ctx.ignoredSeries.slice(),\n      //\n      trackedStudy: evt.data.StudyInstanceUID,\n      trackedSeries: [evt.data.SeriesInstanceUID],\n      ignoredSeries: [],\n    })),\n    setTrackedStudyAndMultipleSeries: assign((ctx, evt) => {\n      const studyInstanceUID = evt.StudyInstanceUID || evt.data.StudyInstanceUID;\n      const seriesInstanceUIDs = evt.SeriesInstanceUIDs || evt.data.SeriesInstanceUIDs;\n\n      return {\n        prevTrackedStudy: ctx.trackedStudy,\n        prevTrackedSeries: ctx.trackedSeries.slice(),\n        prevIgnoredSeries: ctx.ignoredSeries.slice(),\n        //\n        trackedStudy: studyInstanceUID,\n        trackedSeries: [...ctx.trackedSeries, ...seriesInstanceUIDs],\n        ignoredSeries: [],\n      };\n    }),\n    setIsDirtyToClean: assign((ctx, evt) => ({\n      isDirty: false,\n    })),\n    setIsDirty: assign((ctx, evt) => ({\n      isDirty: true,\n    })),\n    ignoreSeries: assign((ctx, evt) => ({\n      prevIgnoredSeries: [...ctx.ignoredSeries],\n      ignoredSeries: [...ctx.ignoredSeries, evt.data.SeriesInstanceUID],\n    })),\n    ignoreHydrationForSRSeries: assign((ctx, evt) => ({\n      ignoredSRSeriesForHydration: [\n        ...ctx.ignoredSRSeriesForHydration,\n        evt.data.srSeriesInstanceUID,\n      ],\n    })),\n    addTrackedSeries: assign((ctx, evt) => ({\n      prevTrackedSeries: [...ctx.trackedSeries],\n      trackedSeries: [...ctx.trackedSeries, evt.data.SeriesInstanceUID],\n    })),\n    removeTrackedSeries: assign((ctx, evt) => ({\n      prevTrackedSeries: ctx.trackedSeries.slice().filter(ser => ser !== evt.SeriesInstanceUID),\n      trackedSeries: ctx.trackedSeries.slice().filter(ser => ser !== evt.SeriesInstanceUID),\n    })),\n    setPreviousState: assign((ctx, evt, meta) => {\n      return {\n        prevState: meta.state.value,\n      };\n    }),\n  },\n  guards: {\n    // We set dirty any time we performan an action that:\n    // - Tracks a new study\n    // - Tracks a new series\n    // - Adds a measurement to an already tracked study/series\n    //\n    // We set clean any time we restore from an SR\n    //\n    // This guard/condition is specific to \"new measurements\"\n    // to make sure we only track dirty when the new measurement is specific\n    // to a series we're already tracking\n    //\n    // tl;dr\n    // Any report change, that is not a hydration of an existing report, should\n    // result in a \"dirty\" report\n    //\n    // Where dirty means there would be \"loss of data\" if we blew away measurements\n    // without creating a new SR.\n    shouldSetDirty: (ctx, evt) => {\n      return (\n        // When would this happen?\n        evt.SeriesInstanceUID === undefined || ctx.trackedSeries.includes(evt.SeriesInstanceUID)\n      );\n    },\n    wasLabellingOnly: (ctx, evt, condMeta) => {\n      return ctx.prevState === 'labellingOnly';\n    },\n    wasIdle: (ctx, evt, condMeta) => {\n      return ctx.prevState === 'idle';\n    },\n    wasTracking: (ctx, evt, condMeta) => {\n      return ctx.prevState === 'tracking';\n    },\n    wasTrackingAndIsNewStudy: (ctx, evt, condMeta) => {\n      return (\n        ctx.prevState === 'tracking' &&\n        !ctx.ignoredSeries.includes(evt.data.SeriesInstanceUID) &&\n        ctx.trackedStudy !== evt.data.StudyInstanceUID\n      );\n    },\n    wasTrackingAndIsNewSeries: (ctx, evt, condMeta) => {\n      return (\n        ctx.prevState === 'tracking' &&\n        !ctx.ignoredSeries.includes(evt.data.SeriesInstanceUID) &&\n        !ctx.trackedSeries.includes(evt.data.SeriesInstanceUID)\n      );\n    },\n\n    shouldKillMachine: (ctx, evt) => evt.data && evt.data.userResponse === RESPONSE.NO_NEVER,\n    shouldAddSeries: (ctx, evt) => evt.data && evt.data.userResponse === RESPONSE.ADD_SERIES,\n    shouldSetStudyAndSeries: (ctx, evt) =>\n      evt.data && evt.data.userResponse === RESPONSE.SET_STUDY_AND_SERIES,\n    shouldAddIgnoredSeries: (ctx, evt) =>\n      evt.data && evt.data.userResponse === RESPONSE.NO_NOT_FOR_SERIES,\n    shouldPromptSaveReport: (ctx, evt) =>\n      evt.data && evt.data.userResponse === RESPONSE.CREATE_REPORT,\n    shouldIgnoreHydrationForSR: (ctx, evt) => evt.data && evt.data.userResponse === RESPONSE.CANCEL,\n    shouldSaveAndContinueWithSameReport: (ctx, evt) =>\n      evt.data &&\n      evt.data.userResponse === RESPONSE.CREATE_REPORT &&\n      evt.data.isBackupSave === true,\n    shouldSaveAndStartNewReport: (ctx, evt) =>\n      evt.data &&\n      evt.data.userResponse === RESPONSE.CREATE_REPORT &&\n      evt.data.isBackupSave === false,\n    shouldHydrateStructuredReport: (ctx, evt) =>\n      evt.data && evt.data.userResponse === RESPONSE.HYDRATE_REPORT,\n    // Has more than 1, or SeriesInstanceUID is not in list\n    // --> Post removal would have non-empty trackedSeries array\n    hasRemainingTrackedSeries: (ctx, evt) =>\n      ctx.trackedSeries.length > 1 || !ctx.trackedSeries.includes(evt.SeriesInstanceUID),\n    hasNotIgnoredSRSeriesForHydration: (ctx, evt) => {\n      return !ctx.ignoredSRSeriesForHydration.includes(evt.SeriesInstanceUID);\n    },\n    isNewStudy: (ctx, evt) =>\n      !ctx.ignoredSeries.includes(evt.SeriesInstanceUID) &&\n      ctx.trackedStudy !== evt.StudyInstanceUID,\n    isNewSeries: (ctx, evt) =>\n      !ctx.ignoredSeries.includes(evt.SeriesInstanceUID) &&\n      !ctx.trackedSeries.includes(evt.SeriesInstanceUID),\n  },\n};\n\nexport { defaultOptions, machineConfiguration, RESPONSE };\n","import { ButtonEnums } from '@ohif/ui';\nimport i18n from 'i18next';\n\nconst RESPONSE = {\n  NO_NEVER: -1,\n  CANCEL: 0,\n  CREATE_REPORT: 1,\n  ADD_SERIES: 2,\n  SET_STUDY_AND_SERIES: 3,\n};\n\nfunction promptBeginTracking({ servicesManager, extensionManager }, ctx, evt) {\n  const { uiViewportDialogService } = servicesManager.services;\n  const appConfig = extensionManager._appConfig;\n  // When the state change happens after a promise, the state machine sends the retult in evt.data;\n  // In case of direct transition to the state, the state machine sends the data in evt;\n  const { viewportId, StudyInstanceUID, SeriesInstanceUID } = evt.data || evt;\n\n  return new Promise(async function (resolve, reject) {\n    let promptResult = appConfig?.disableConfirmationPrompts\n      ? RESPONSE.SET_STUDY_AND_SERIES\n      : await _askTrackMeasurements(uiViewportDialogService, viewportId);\n\n    resolve({\n      userResponse: promptResult,\n      StudyInstanceUID,\n      SeriesInstanceUID,\n      viewportId,\n    });\n  });\n}\n\nfunction _askTrackMeasurements(uiViewportDialogService, viewportId) {\n  return new Promise(function (resolve, reject) {\n    const message = i18n.t('MeasurementTable:Track measurements for this series?');\n    const actions = [\n      {\n        id: 'prompt-begin-tracking-cancel',\n        type: ButtonEnums.type.secondary,\n        text: i18n.t('Common:No'),\n        value: RESPONSE.CANCEL,\n      },\n      {\n        id: 'prompt-begin-tracking-no-do-not-ask-again',\n        type: ButtonEnums.type.secondary,\n        text: i18n.t('MeasurementTable:No, do not ask again'),\n        value: RESPONSE.NO_NEVER,\n      },\n      {\n        id: 'prompt-begin-tracking-yes',\n        type: ButtonEnums.type.primary,\n        text: i18n.t('Common:Yes'),\n        value: RESPONSE.SET_STUDY_AND_SERIES,\n      },\n    ];\n    const onSubmit = result => {\n      uiViewportDialogService.hide();\n      resolve(result);\n    };\n\n    uiViewportDialogService.show({\n      viewportId,\n      id: 'measurement-tracking-prompt-begin-tracking',\n      type: 'info',\n      message,\n      actions,\n      onSubmit,\n      onOutsideClick: () => {\n        uiViewportDialogService.hide();\n        resolve(RESPONSE.CANCEL);\n      },\n      onKeyPress: event => {\n        if (event.key === 'Enter') {\n          const action = actions.find(action => action.id === 'prompt-begin-tracking-yes');\n          onSubmit(action.value);\n        }\n      },\n    });\n  });\n}\n\nexport default promptBeginTracking;\n","import { ButtonEnums } from '@ohif/ui';\n\nconst RESPONSE = {\n  NO_NEVER: -1,\n  CANCEL: 0,\n  CREATE_REPORT: 1,\n  ADD_SERIES: 2,\n  SET_STUDY_AND_SERIES: 3,\n  NO_NOT_FOR_SERIES: 4,\n};\n\nfunction promptTrackNewSeries({ servicesManager, extensionManager }, ctx, evt) {\n  const { UIViewportDialogService } = servicesManager.services;\n  // When the state change happens after a promise, the state machine sends the retult in evt.data;\n  // In case of direct transition to the state, the state machine sends the data in evt;\n  const { viewportId, StudyInstanceUID, SeriesInstanceUID } = evt.data || evt;\n\n  return new Promise(async function (resolve, reject) {\n    let promptResult = await _askShouldAddMeasurements(UIViewportDialogService, viewportId);\n\n    if (promptResult === RESPONSE.CREATE_REPORT) {\n      promptResult = ctx.isDirty\n        ? await _askSaveDiscardOrCancel(UIViewportDialogService, viewportId)\n        : RESPONSE.SET_STUDY_AND_SERIES;\n    }\n\n    resolve({\n      userResponse: promptResult,\n      StudyInstanceUID,\n      SeriesInstanceUID,\n      viewportId,\n      isBackupSave: false,\n    });\n  });\n}\n\nfunction _askShouldAddMeasurements(uiViewportDialogService, viewportId) {\n  return new Promise(function (resolve, reject) {\n    const message = 'Do you want to add this measurement to the existing report?';\n    const actions = [\n      {\n        type: ButtonEnums.type.secondary,\n        text: 'Cancel',\n        value: RESPONSE.CANCEL,\n      },\n      {\n        type: ButtonEnums.type.primary,\n        text: 'Create new report',\n        value: RESPONSE.CREATE_REPORT,\n      },\n      {\n        type: ButtonEnums.type.primary,\n        text: 'Add to existing report',\n        value: RESPONSE.ADD_SERIES,\n      },\n    ];\n    const onSubmit = result => {\n      uiViewportDialogService.hide();\n      resolve(result);\n    };\n\n    uiViewportDialogService.show({\n      viewportId,\n      type: 'info',\n      message,\n      actions,\n      onSubmit,\n      onOutsideClick: () => {\n        uiViewportDialogService.hide();\n        resolve(RESPONSE.CANCEL);\n      },\n    });\n  });\n}\n\nfunction _askSaveDiscardOrCancel(UIViewportDialogService, viewportId) {\n  return new Promise(function (resolve, reject) {\n    const message =\n      'You have existing tracked measurements. What would you like to do with your existing tracked measurements?';\n    const actions = [\n      { type: 'cancel', text: 'Cancel', value: RESPONSE.CANCEL },\n      {\n        type: 'secondary',\n        text: 'Save',\n        value: RESPONSE.CREATE_REPORT,\n      },\n      {\n        type: 'primary',\n        text: 'Discard',\n        value: RESPONSE.SET_STUDY_AND_SERIES,\n      },\n    ];\n    const onSubmit = result => {\n      UIViewportDialogService.hide();\n      resolve(result);\n    };\n\n    UIViewportDialogService.show({\n      viewportId,\n      type: 'warning',\n      message,\n      actions,\n      onSubmit,\n      onOutsideClick: () => {\n        UIViewportDialogService.hide();\n        resolve(RESPONSE.CANCEL);\n      },\n    });\n  });\n}\n\nexport default promptTrackNewSeries;\n","import i18n from 'i18next';\n\nconst RESPONSE = {\n  NO_NEVER: -1,\n  CANCEL: 0,\n  CREATE_REPORT: 1,\n  ADD_SERIES: 2,\n  SET_STUDY_AND_SERIES: 3,\n  NO_NOT_FOR_SERIES: 4,\n};\n\nfunction promptTrackNewStudy({ servicesManager, extensionManager }: withAppTypes, ctx, evt) {\n  const { uiViewportDialogService } = servicesManager.services;\n  // When the state change happens after a promise, the state machine sends the retult in evt.data;\n  // In case of direct transition to the state, the state machine sends the data in evt;\n  const { viewportId, StudyInstanceUID, SeriesInstanceUID } = evt.data || evt;\n\n  return new Promise(async function (resolve, reject) {\n    let promptResult = await _askTrackMeasurements(uiViewportDialogService, viewportId);\n\n    if (promptResult === RESPONSE.SET_STUDY_AND_SERIES) {\n      promptResult = ctx.isDirty\n        ? await _askSaveDiscardOrCancel(uiViewportDialogService, viewportId)\n        : RESPONSE.SET_STUDY_AND_SERIES;\n    }\n\n    resolve({\n      userResponse: promptResult,\n      StudyInstanceUID,\n      SeriesInstanceUID,\n      viewportId,\n      isBackupSave: false,\n    });\n  });\n}\n\nfunction _askTrackMeasurements(\n  UIViewportDialogService: AppTypes.UIViewportDialogService,\n  viewportId\n) {\n  return new Promise(function (resolve, reject) {\n    const message = i18n.t('MeasurementTable:Track measurements for this series?');\n    const actions = [\n      { type: 'cancel', text: i18n.t('MeasurementTable:No'), value: RESPONSE.CANCEL },\n      {\n        type: 'secondary',\n        text: i18n.t('MeasurementTable:No, do not ask again'),\n        value: RESPONSE.NO_NOT_FOR_SERIES,\n      },\n      {\n        type: 'primary',\n        text: i18n.t('MeasurementTable:Yes'),\n        value: RESPONSE.SET_STUDY_AND_SERIES,\n      },\n    ];\n    const onSubmit = result => {\n      UIViewportDialogService.hide();\n      resolve(result);\n    };\n\n    UIViewportDialogService.show({\n      viewportId,\n      type: 'info',\n      message,\n      actions,\n      onSubmit,\n      onOutsideClick: () => {\n        UIViewportDialogService.hide();\n        resolve(RESPONSE.CANCEL);\n      },\n      onKeyPress: event => {\n        if (event.key === 'Enter') {\n          const action = actions.find(action => action.value === RESPONSE.SET_STUDY_AND_SERIES);\n          onSubmit(action.value);\n        }\n      },\n    });\n  });\n}\n\nfunction _askSaveDiscardOrCancel(\n  UIViewportDialogService: AppTypes.UIViewportDialogService,\n  viewportId\n) {\n  return new Promise(function (resolve, reject) {\n    const message =\n      'Measurements cannot span across multiple studies. Do you want to save your tracked measurements?';\n    const actions = [\n      { type: 'cancel', text: 'Cancel', value: RESPONSE.CANCEL },\n      {\n        type: 'secondary',\n        text: 'No, discard previously tracked series & measurements',\n        value: RESPONSE.SET_STUDY_AND_SERIES,\n      },\n      {\n        type: 'primary',\n        text: 'Yes',\n        value: RESPONSE.CREATE_REPORT,\n      },\n    ];\n    const onSubmit = result => {\n      UIViewportDialogService.hide();\n      resolve(result);\n    };\n\n    UIViewportDialogService.show({\n      viewportId,\n      type: 'warning',\n      message,\n      actions,\n      onSubmit,\n      onOutsideClick: () => {\n        UIViewportDialogService.hide();\n        resolve(RESPONSE.CANCEL);\n      },\n    });\n  });\n}\n\nexport default promptTrackNewStudy;\n","const MIN_SR_SERIES_NUMBER = 4700;\n\nexport default function getNextSRSeriesNumber(displaySetService) {\n  const activeDisplaySets = displaySetService.getActiveDisplaySets();\n  const srDisplaySets = activeDisplaySets.filter(ds => ds.Modality === 'SR');\n  const srSeriesNumbers = srDisplaySets.map(ds => ds.SeriesNumber);\n  const maxSeriesNumber = Math.max(...srSeriesNumbers, MIN_SR_SERIES_NUMBER);\n\n  return maxSeriesNumber + 1;\n}\n","const RESPONSE = {\n  NO_NEVER: -1,\n  CANCEL: 0,\n  CREATE_REPORT: 1,\n  ADD_SERIES: 2,\n  SET_STUDY_AND_SERIES: 3,\n  NO_NOT_FOR_SERIES: 4,\n};\n\nexport default RESPONSE;\n","import { createReportAsync, createReportDialogPrompt } from '@ohif/extension-default';\nimport getNextSRSeriesNumber from '../../_shared/getNextSRSeriesNumber';\nimport RESPONSE from '../../_shared/PROMPT_RESPONSES';\n\nasync function promptSaveReport({ servicesManager, commandsManager, extensionManager }, ctx, evt) {\n  const { uiDialogService, measurementService, displaySetService } = servicesManager.services;\n  const viewportId = evt.viewportId === undefined ? evt.data.viewportId : evt.viewportId;\n  const isBackupSave = evt.isBackupSave === undefined ? evt.data.isBackupSave : evt.isBackupSave;\n  const StudyInstanceUID = evt?.data?.StudyInstanceUID;\n  const SeriesInstanceUID = evt?.data?.SeriesInstanceUID;\n\n  const { trackedStudy, trackedSeries } = ctx;\n  let displaySetInstanceUIDs;\n\n  try {\n    const promptResult = await createReportDialogPrompt(uiDialogService, {\n      extensionManager,\n    });\n\n    if (promptResult.action === RESPONSE.CREATE_REPORT) {\n      const dataSources = extensionManager.getDataSources();\n      const dataSource = dataSources[0];\n      const measurements = measurementService.getMeasurements();\n      const trackedMeasurements = measurements\n        .filter(\n          m => trackedStudy === m.referenceStudyUID && trackedSeries.includes(m.referenceSeriesUID)\n        )\n        .filter(m => m.referencedImageId != null);\n\n      const SeriesDescription =\n        // isUndefinedOrEmpty\n        promptResult.value === undefined || promptResult.value === ''\n          ? 'Research Derived Series' // default\n          : promptResult.value; // provided value\n\n      const SeriesNumber = getNextSRSeriesNumber(displaySetService);\n\n      const getReport = async () => {\n        return commandsManager.runCommand(\n          'storeMeasurements',\n          {\n            measurementData: trackedMeasurements,\n            dataSource,\n            additionalFindingTypes: ['ArrowAnnotate'],\n            options: {\n              SeriesDescription,\n              SeriesNumber,\n            },\n          },\n          'CORNERSTONE_STRUCTURED_REPORT'\n        );\n      };\n      displaySetInstanceUIDs = await createReportAsync({\n        servicesManager,\n        getReport,\n      });\n    } else if (promptResult.action === RESPONSE.CANCEL) {\n      // Do nothing\n    }\n\n    return {\n      userResponse: promptResult.action,\n      createdDisplaySetInstanceUIDs: displaySetInstanceUIDs,\n      StudyInstanceUID,\n      SeriesInstanceUID,\n      viewportId,\n      isBackupSave,\n    };\n  } catch (error) {\n    return null;\n  }\n}\n\nexport default promptSaveReport;\n","import { hydrateStructuredReport } from '@ohif/extension-cornerstone-dicom-sr';\nimport { ButtonEnums } from '@ohif/ui';\n\nconst RESPONSE = {\n  NO_NEVER: -1,\n  CANCEL: 0,\n  CREATE_REPORT: 1,\n  ADD_SERIES: 2,\n  SET_STUDY_AND_SERIES: 3,\n  NO_NOT_FOR_SERIES: 4,\n  HYDRATE_REPORT: 5,\n};\n\nfunction promptHydrateStructuredReport({ servicesManager, extensionManager, appConfig }, ctx, evt) {\n  const { uiViewportDialogService, displaySetService } = servicesManager.services;\n  const { viewportId, displaySetInstanceUID } = evt;\n  const srDisplaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n  return new Promise(async function (resolve, reject) {\n    const promptResult = appConfig?.disableConfirmationPrompts\n      ? RESPONSE.HYDRATE_REPORT\n      : await _askTrackMeasurements(uiViewportDialogService, viewportId);\n\n    // Need to do action here... So we can set state...\n    let StudyInstanceUID, SeriesInstanceUIDs;\n\n    if (promptResult === RESPONSE.HYDRATE_REPORT) {\n      console.warn('!! HYDRATING STRUCTURED REPORT');\n      const hydrationResult = hydrateStructuredReport(\n        { servicesManager, extensionManager, appConfig },\n        displaySetInstanceUID\n      );\n\n      StudyInstanceUID = hydrationResult.StudyInstanceUID;\n      SeriesInstanceUIDs = hydrationResult.SeriesInstanceUIDs;\n    }\n\n    resolve({\n      userResponse: promptResult,\n      displaySetInstanceUID: evt.displaySetInstanceUID,\n      srSeriesInstanceUID: srDisplaySet.SeriesInstanceUID,\n      viewportId,\n      StudyInstanceUID,\n      SeriesInstanceUIDs,\n    });\n  });\n}\n\nfunction _askTrackMeasurements(uiViewportDialogService, viewportId) {\n  return new Promise(function (resolve, reject) {\n    const message = 'Do you want to continue tracking measurements for this study?';\n    const actions = [\n      {\n        id: 'no-hydrate',\n        type: ButtonEnums.type.secondary,\n        text: 'No',\n        value: RESPONSE.CANCEL,\n      },\n      {\n        id: 'yes-hydrate',\n        type: ButtonEnums.type.primary,\n        text: 'Yes',\n        value: RESPONSE.HYDRATE_REPORT,\n      },\n    ];\n    const onSubmit = result => {\n      uiViewportDialogService.hide();\n      resolve(result);\n    };\n\n    uiViewportDialogService.show({\n      viewportId,\n      type: 'info',\n      message,\n      actions,\n      onSubmit,\n      onOutsideClick: () => {\n        uiViewportDialogService.hide();\n        resolve(RESPONSE.CANCEL);\n      },\n      onKeyPress: event => {\n        if (event.key === 'Enter') {\n          const action = actions.find(action => action.value === RESPONSE.HYDRATE_REPORT);\n          onSubmit(action.value);\n        }\n      },\n    });\n  });\n}\n\nexport default promptHydrateStructuredReport;\n","import { hydrateStructuredReport as baseHydrateStructuredReport } from '@ohif/extension-cornerstone-dicom-sr';\n\nfunction hydrateStructuredReport(\n  { servicesManager, extensionManager, appConfig }: withAppTypes,\n  ctx,\n  evt\n) {\n  const { displaySetService } = servicesManager.services;\n  const { viewportId, displaySetInstanceUID } = evt;\n  const srDisplaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n\n  return new Promise((resolve, reject) => {\n    const hydrationResult = baseHydrateStructuredReport(\n      { servicesManager, extensionManager, appConfig },\n      displaySetInstanceUID\n    );\n\n    const StudyInstanceUID = hydrationResult.StudyInstanceUID;\n    const SeriesInstanceUIDs = hydrationResult.SeriesInstanceUIDs;\n\n    resolve({\n      displaySetInstanceUID: evt.displaySetInstanceUID,\n      srSeriesInstanceUID: srDisplaySet.SeriesInstanceUID,\n      viewportId,\n      StudyInstanceUID,\n      SeriesInstanceUIDs,\n    });\n  });\n}\n\nexport default hydrateStructuredReport;\n","function promptLabelAnnotation({ servicesManager, extensionManager }, ctx, evt) {\n  const { measurementService, customizationService } = servicesManager.services;\n  const { viewportId, StudyInstanceUID, SeriesInstanceUID, measurementId } = evt;\n  const utilityModule = extensionManager.getModuleEntry(\n    '@ohif/extension-cornerstone.utilityModule.common'\n  );\n  const { showLabelAnnotationPopup } = utilityModule.exports;\n  return new Promise(async function (resolve) {\n    const labelConfig = customizationService.get('measurementLabels');\n    const measurement = measurementService.getMeasurement(measurementId);\n    const value = await showLabelAnnotationPopup(\n      measurement,\n      servicesManager.services.uiDialogService,\n      labelConfig\n    );\n\n    measurementService.update(\n      measurementId,\n      {\n        ...value,\n      },\n      true\n    );\n\n    resolve({\n      StudyInstanceUID,\n      SeriesInstanceUID,\n      viewportId,\n    });\n  });\n}\n\nexport default promptLabelAnnotation;\n","import React, { useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Machine } from 'xstate';\nimport { useMachine } from '@xstate/react';\nimport { useViewportGrid } from '@ohif/ui';\nimport { machineConfiguration, defaultOptions, RESPONSE } from './measurementTrackingMachine';\nimport promptBeginTracking from './promptBeginTracking';\nimport promptTrackNewSeries from './promptTrackNewSeries';\nimport promptTrackNewStudy from './promptTrackNewStudy';\nimport promptSaveReport from './promptSaveReport';\nimport promptHydrateStructuredReport from './promptHydrateStructuredReport';\nimport hydrateStructuredReport from './hydrateStructuredReport';\nimport { useAppConfig } from '@state';\nimport promptLabelAnnotation from './promptLabelAnnotation';\n\nconst TrackedMeasurementsContext = React.createContext();\nTrackedMeasurementsContext.displayName = 'TrackedMeasurementsContext';\nconst useTrackedMeasurements = () => useContext(TrackedMeasurementsContext);\n\nconst SR_SOPCLASSHANDLERID = '@ohif/extension-cornerstone-dicom-sr.sopClassHandlerModule.dicom-sr';\n\n/**\n *\n * @param {*} param0\n */\nfunction TrackedMeasurementsContextProvider(\n  { servicesManager, commandsManager, extensionManager }: withAppTypes, // Bound by consumer\n  { children } // Component props\n) {\n  const [appConfig] = useAppConfig();\n\n  const [viewportGrid, viewportGridService] = useViewportGrid();\n  const { activeViewportId, viewports } = viewportGrid;\n  const {\n    measurementService,\n    displaySetService,\n    customizationService,\n    cornerstoneViewportService,\n  } = servicesManager.services;\n\n  const machineOptions = Object.assign({}, defaultOptions);\n  machineOptions.actions = Object.assign({}, machineOptions.actions, {\n    jumpToFirstMeasurementInActiveViewport: (ctx, evt) => {\n      const { trackedStudy, trackedSeries, activeViewportId } = ctx;\n      const measurements = measurementService.getMeasurements();\n      const trackedMeasurements = measurements.filter(\n        m => trackedStudy === m.referenceStudyUID && trackedSeries.includes(m.referenceSeriesUID)\n      );\n\n      console.log(\n        'jumping to measurement reset viewport',\n        activeViewportId,\n        trackedMeasurements[0]\n      );\n\n      const referencedDisplaySetUID = trackedMeasurements[0].displaySetInstanceUID;\n      const referencedDisplaySet = displaySetService.getDisplaySetByUID(referencedDisplaySetUID);\n\n      const referencedImages = referencedDisplaySet.images;\n      const isVolumeIdReferenced = referencedImages[0].imageId.startsWith('volumeId');\n\n      const measurementData = trackedMeasurements[0].data;\n\n      let imageIndex = 0;\n      if (!isVolumeIdReferenced && measurementData) {\n        // if it is imageId referenced find the index of the imageId, we don't have\n        // support for volumeId referenced images yet\n        imageIndex = referencedImages.findIndex(image => {\n          const imageIdToUse = Object.keys(measurementData)[0].substring(8);\n          return image.imageId === imageIdToUse;\n        });\n\n        if (imageIndex === -1) {\n          console.warn('Could not find image index for tracked measurement, using 0');\n          imageIndex = 0;\n        }\n      }\n\n      viewportGridService.setDisplaySetsForViewport({\n        viewportId: activeViewportId,\n        displaySetInstanceUIDs: [referencedDisplaySetUID],\n        viewportOptions: {\n          initialImageOptions: {\n            index: imageIndex,\n          },\n        },\n      });\n    },\n\n    jumpToSameImageInActiveViewport: (ctx, evt) => {\n      const { trackedStudy, trackedSeries, activeViewportId } = ctx;\n      const measurements = measurementService.getMeasurements();\n      const trackedMeasurements = measurements.filter(\n        m => trackedStudy === m.referenceStudyUID && trackedSeries.includes(m.referenceSeriesUID)\n      );\n\n      const trackedMeasurement = trackedMeasurements[0];\n      const referencedDisplaySetUID = trackedMeasurement.displaySetInstanceUID;\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\n      const imageIndex = viewport.getCurrentImageIdIndex();\n\n      viewportGridService.setDisplaySetsForViewport({\n        viewportId: activeViewportId,\n        displaySetInstanceUIDs: [referencedDisplaySetUID],\n        viewportOptions: {\n          initialImageOptions: {\n            index: imageIndex,\n          },\n        },\n      });\n    },\n    showStructuredReportDisplaySetInActiveViewport: (ctx, evt) => {\n      if (evt.data.createdDisplaySetInstanceUIDs.length > 0) {\n        const StructuredReportDisplaySetInstanceUID = evt.data.createdDisplaySetInstanceUIDs[0];\n\n        viewportGridService.setDisplaySetsForViewport({\n          viewportId: evt.data.viewportId,\n          displaySetInstanceUIDs: [StructuredReportDisplaySetInstanceUID],\n        });\n      }\n    },\n    discardPreviouslyTrackedMeasurements: (ctx, evt) => {\n      const measurements = measurementService.getMeasurements();\n      const filteredMeasurements = measurements.filter(ms =>\n        ctx.prevTrackedSeries.includes(ms.referenceSeriesUID)\n      );\n      const measurementIds = filteredMeasurements.map(fm => fm.id);\n\n      for (let i = 0; i < measurementIds.length; i++) {\n        measurementService.remove(measurementIds[i]);\n      }\n    },\n    clearAllMeasurements: (ctx, evt) => {\n      const measurements = measurementService.getMeasurements();\n      const measurementIds = measurements.map(fm => fm.uid);\n\n      for (let i = 0; i < measurementIds.length; i++) {\n        measurementService.remove(measurementIds[i]);\n      }\n    },\n  });\n  machineOptions.services = Object.assign({}, machineOptions.services, {\n    promptBeginTracking: promptBeginTracking.bind(null, {\n      servicesManager,\n      extensionManager,\n      appConfig,\n    }),\n    promptTrackNewSeries: promptTrackNewSeries.bind(null, {\n      servicesManager,\n      extensionManager,\n      appConfig,\n    }),\n    promptTrackNewStudy: promptTrackNewStudy.bind(null, {\n      servicesManager,\n      extensionManager,\n      appConfig,\n    }),\n    promptSaveReport: promptSaveReport.bind(null, {\n      servicesManager,\n      commandsManager,\n      extensionManager,\n      appConfig,\n    }),\n    promptHydrateStructuredReport: promptHydrateStructuredReport.bind(null, {\n      servicesManager,\n      extensionManager,\n      appConfig,\n    }),\n    hydrateStructuredReport: hydrateStructuredReport.bind(null, {\n      servicesManager,\n      extensionManager,\n      appConfig,\n    }),\n    promptLabelAnnotation: promptLabelAnnotation.bind(null, {\n      servicesManager,\n      extensionManager,\n    }),\n  });\n  machineOptions.guards = Object.assign({}, machineOptions.guards, {\n    isLabelOnMeasure: (ctx, evt, condMeta) => {\n      const labelConfig = customizationService.get('measurementLabels');\n      return labelConfig?.labelOnMeasure;\n    },\n    isLabelOnMeasureAndShouldKillMachine: (ctx, evt, condMeta) => {\n      const labelConfig = customizationService.get('measurementLabels');\n      return evt.data && evt.data.userResponse === RESPONSE.NO_NEVER && labelConfig?.labelOnMeasure;\n    },\n  });\n\n  // TODO: IMPROVE\n  // - Add measurement_updated to cornerstone; debounced? (ext side, or consumption?)\n  // - Friendlier transition/api in front of measurementTracking machine?\n  // - Blocked: viewport overlay shouldn't clip when resized\n  // TODO: PRIORITY\n  // - Fix \"ellipses\" series description dynamic truncate length\n  // - Fix viewport border resize\n  // - created/destroyed hooks for extensions (cornerstone measurement subscriptions in it's `init`)\n\n  const measurementTrackingMachine = Machine(machineConfiguration, machineOptions);\n\n  const [trackedMeasurements, sendTrackedMeasurementsEvent] = useMachine(\n    measurementTrackingMachine\n  );\n\n  useEffect(() => {\n    // Update the state machine with the active viewport ID\n    sendTrackedMeasurementsEvent('UPDATE_ACTIVE_VIEWPORT_ID', {\n      activeViewportId,\n    });\n  }, [activeViewportId, sendTrackedMeasurementsEvent]);\n\n  // ~~ Listen for changes to ViewportGrid for potential SRs hung in panes when idle\n  useEffect(() => {\n    const triggerPromptHydrateFlow = async () => {\n      if (viewports.size > 0) {\n        const activeViewport = viewports.get(activeViewportId);\n\n        if (!activeViewport || !activeViewport?.displaySetInstanceUIDs?.length) {\n          return;\n        }\n\n        // Todo: Getting the first displaySetInstanceUID is wrong, but we don't have\n        // tracking fusion viewports yet. This should change when we do.\n        const { displaySetService } = servicesManager.services;\n        const displaySet = displaySetService.getDisplaySetByUID(\n          activeViewport.displaySetInstanceUIDs[0]\n        );\n\n        if (!displaySet) {\n          return;\n        }\n\n        // If this is an SR produced by our SR SOPClassHandler,\n        // and it hasn't been loaded yet, do that now so we\n        // can check if it can be rehydrated or not.\n        //\n        // Note: This happens:\n        // - If the viewport is not currently an OHIFCornerstoneSRViewport\n        // - If the displaySet has never been hung\n        //\n        // Otherwise, the displaySet will be loaded by the useEffect handler\n        // listening to displaySet changes inside OHIFCornerstoneSRViewport.\n        // The issue here is that this handler in TrackedMeasurementsContext\n        // ends up occurring before the Viewport is created, so the displaySet\n        // is not loaded yet, and isRehydratable is undefined unless we call load().\n        if (\n          displaySet.SOPClassHandlerId === SR_SOPCLASSHANDLERID &&\n          !displaySet.isLoaded &&\n          displaySet.load\n        ) {\n          await displaySet.load();\n        }\n\n        // Magic string\n        // load function added by our sopClassHandler module\n        if (\n          displaySet.SOPClassHandlerId === SR_SOPCLASSHANDLERID &&\n          displaySet.isRehydratable === true\n        ) {\n          console.log('sending event...', trackedMeasurements);\n          sendTrackedMeasurementsEvent('PROMPT_HYDRATE_SR', {\n            displaySetInstanceUID: displaySet.displaySetInstanceUID,\n            SeriesInstanceUID: displaySet.SeriesInstanceUID,\n            viewportId: activeViewportId,\n          });\n        }\n      }\n    };\n    triggerPromptHydrateFlow();\n  }, [\n    trackedMeasurements,\n    activeViewportId,\n    sendTrackedMeasurementsEvent,\n    servicesManager.services,\n    viewports,\n  ]);\n\n  return (\n    <TrackedMeasurementsContext.Provider\n      value={[trackedMeasurements, sendTrackedMeasurementsEvent]}\n    >\n      {children}\n    </TrackedMeasurementsContext.Provider>\n  );\n}\n\nTrackedMeasurementsContextProvider.propTypes = {\n  children: PropTypes.oneOf([PropTypes.func, PropTypes.node]),\n  servicesManager: PropTypes.object.isRequired,\n  commandsManager: PropTypes.object.isRequired,\n  extensionManager: PropTypes.object.isRequired,\n  appConfig: PropTypes.object,\n};\n\nexport { TrackedMeasurementsContext, TrackedMeasurementsContextProvider, useTrackedMeasurements };\n","import {\n  TrackedMeasurementsContext,\n  TrackedMeasurementsContextProvider,\n  useTrackedMeasurements,\n} from './contexts';\n\nfunction getContextModule({ servicesManager, extensionManager, commandsManager }) {\n  const BoundTrackedMeasurementsContextProvider = TrackedMeasurementsContextProvider.bind(null, {\n    servicesManager,\n    extensionManager,\n    commandsManager,\n  });\n\n  return [\n    {\n      name: 'TrackedMeasurementsContext',\n      context: TrackedMeasurementsContext,\n      provider: BoundTrackedMeasurementsContextProvider,\n    },\n  ];\n}\n\nexport { useTrackedMeasurements };\nexport default getContextModule;\n","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport PropTypes from 'prop-types';\nimport { utils } from '@ohif/core';\nimport { StudyBrowser, useImageViewer, useViewportGrid, Dialog, ButtonEnums } from '@ohif/ui';\nimport { useTrackedMeasurements } from '../../getContextModule';\n\nconst { formatDate, createStudyBrowserTabs } = utils;\n\n/**\n *\n * @param {*} param0\n */\nfunction PanelStudyBrowserTracking({\n  servicesManager,\n  getImageSrc,\n  getStudiesForPatientByMRN,\n  requestDisplaySetCreationForStudy,\n  dataSource,\n}: withAppTypes) {\n  const {\n    displaySetService,\n    uiDialogService,\n    hangingProtocolService,\n    uiNotificationService,\n    measurementService,\n    studyPrefetcherService,\n  } = servicesManager.services;\n  const navigate = useNavigate();\n\n  const { t } = useTranslation('Common');\n\n  // Normally you nest the components so the tree isn't so deep, and the data\n  // doesn't have to have such an intense shape. This works well enough for now.\n  // Tabs --> Studies --> DisplaySets --> Thumbnails\n  const { StudyInstanceUIDs } = useImageViewer();\n  const [{ activeViewportId, viewports, isHangingProtocolLayout }, viewportGridService] =\n    useViewportGrid();\n  const [trackedMeasurements, sendTrackedMeasurementsEvent] = useTrackedMeasurements();\n  const [activeTabName, setActiveTabName] = useState('primary');\n  const [expandedStudyInstanceUIDs, setExpandedStudyInstanceUIDs] = useState([\n    ...StudyInstanceUIDs,\n  ]);\n  const [studyDisplayList, setStudyDisplayList] = useState([]);\n  const [hasLoadedViewports, setHasLoadedViewports] = useState(false);\n  const [displaySets, setDisplaySets] = useState([]);\n  const [displaySetsLoadingState, setDisplaySetsLoadingState] = useState({});\n  const [thumbnailImageSrcMap, setThumbnailImageSrcMap] = useState({});\n  const [jumpToDisplaySet, setJumpToDisplaySet] = useState(null);\n\n  const onDoubleClickThumbnailHandler = displaySetInstanceUID => {\n    let updatedViewports = [];\n    const viewportId = activeViewportId;\n    try {\n      updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\n        viewportId,\n        displaySetInstanceUID,\n        isHangingProtocolLayout\n      );\n    } catch (error) {\n      console.warn(error);\n      uiNotificationService.show({\n        title: 'Thumbnail Double Click',\n        message:\n          'The selected display sets could not be added to the viewport due to a mismatch in the Hanging Protocol rules.',\n        type: 'info',\n        duration: 3000,\n      });\n    }\n\n    viewportGridService.setDisplaySetsForViewports(updatedViewports);\n  };\n\n  const activeViewportDisplaySetInstanceUIDs =\n    viewports.get(activeViewportId)?.displaySetInstanceUIDs;\n\n  const { trackedSeries } = trackedMeasurements.context;\n\n  // ~~ studyDisplayList\n  useEffect(() => {\n    // Fetch all studies for the patient in each primary study\n    async function fetchStudiesForPatient(StudyInstanceUID) {\n      // current study qido\n      const qidoForStudyUID = await dataSource.query.studies.search({\n        studyInstanceUid: StudyInstanceUID,\n      });\n\n      if (!qidoForStudyUID?.length) {\n        navigate('/notfoundstudy', '_self');\n        throw new Error('Invalid study URL');\n      }\n\n      let qidoStudiesForPatient = qidoForStudyUID;\n\n      // try to fetch the prior studies based on the patientID if the\n      // server can respond.\n      try {\n        qidoStudiesForPatient = await getStudiesForPatientByMRN(qidoForStudyUID);\n      } catch (error) {\n        console.warn(error);\n      }\n\n      const mappedStudies = _mapDataSourceStudies(qidoStudiesForPatient);\n      const actuallyMappedStudies = mappedStudies.map(qidoStudy => {\n        return {\n          studyInstanceUid: qidoStudy.StudyInstanceUID,\n          date: formatDate(qidoStudy.StudyDate) || t('NoStudyDate'),\n          description: qidoStudy.StudyDescription,\n          modalities: qidoStudy.ModalitiesInStudy,\n          numInstances: qidoStudy.NumInstances,\n        };\n      });\n\n      setStudyDisplayList(prevArray => {\n        const ret = [...prevArray];\n        for (const study of actuallyMappedStudies) {\n          if (!prevArray.find(it => it.studyInstanceUid === study.studyInstanceUid)) {\n            ret.push(study);\n          }\n        }\n        return ret;\n      });\n    }\n\n    StudyInstanceUIDs.forEach(sid => fetchStudiesForPatient(sid));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [StudyInstanceUIDs, getStudiesForPatientByMRN]);\n\n  // ~~ Initial Thumbnails\n  useEffect(() => {\n    if (!hasLoadedViewports) {\n      if (activeViewportId) {\n        // Once there is an active viewport id, it means the layout is ready\n        // so wait a bit of time to allow the viewports preferential loading\n        // which improves user experience of responsiveness significantly on slower\n        // systems.\n        window.setTimeout(() => setHasLoadedViewports(true), 250);\n      }\n\n      return;\n    }\n\n    const currentDisplaySets = displaySetService.activeDisplaySets;\n\n    if (!currentDisplaySets.length) {\n      return;\n    }\n\n    currentDisplaySets.forEach(async dSet => {\n      const newImageSrcEntry = {};\n      const displaySet = displaySetService.getDisplaySetByUID(dSet.displaySetInstanceUID);\n      const imageIds = dataSource.getImageIdsForDisplaySet(displaySet);\n\n      const imageId = getImageIdForThumbnail(displaySet, imageIds);\n\n      // TODO: Is it okay that imageIds are not returned here for SR displaySets?\n      if (!imageId || displaySet?.unsupported) {\n        return;\n      }\n      // When the image arrives, render it and store the result in the thumbnailImgSrcMap\n      newImageSrcEntry[dSet.displaySetInstanceUID] = await getImageSrc(imageId);\n\n      setThumbnailImageSrcMap(prevState => {\n        return { ...prevState, ...newImageSrcEntry };\n      });\n    });\n  }, [displaySetService, dataSource, getImageSrc, activeViewportId, hasLoadedViewports]);\n\n  // ~~ displaySets\n  useEffect(() => {\n    const currentDisplaySets = displaySetService.activeDisplaySets;\n\n    if (!currentDisplaySets.length) {\n      return;\n    }\n\n    const mappedDisplaySets = _mapDisplaySets(\n      currentDisplaySets,\n      displaySetsLoadingState,\n      thumbnailImageSrcMap,\n      trackedSeries,\n      viewports,\n      viewportGridService,\n      dataSource,\n      displaySetService,\n      uiDialogService,\n      uiNotificationService\n    );\n\n    setDisplaySets(mappedDisplaySets);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    displaySetService.activeDisplaySets,\n    displaySetsLoadingState,\n    trackedSeries,\n    viewports,\n    dataSource,\n    thumbnailImageSrcMap,\n  ]);\n\n  // -- displaySetsLoadingState\n  useEffect(() => {\n    const { unsubscribe } = studyPrefetcherService.subscribe(\n      studyPrefetcherService.EVENTS.DISPLAYSET_LOAD_PROGRESS,\n      updatedDisplaySetLoadingState => {\n        const { displaySetInstanceUID, loadingProgress } = updatedDisplaySetLoadingState;\n\n        setDisplaySetsLoadingState(prevState => ({\n          ...prevState,\n          [displaySetInstanceUID]: loadingProgress,\n        }));\n      }\n    );\n\n    return () => unsubscribe();\n  }, [studyPrefetcherService]);\n\n  // ~~ subscriptions --> displaySets\n  useEffect(() => {\n    // DISPLAY_SETS_ADDED returns an array of DisplaySets that were added\n    const SubscriptionDisplaySetsAdded = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SETS_ADDED,\n      data => {\n        if (!hasLoadedViewports) {\n          return;\n        }\n        const { displaySetsAdded, options } = data;\n        displaySetsAdded.forEach(async dSet => {\n          const displaySetInstanceUID = dSet.displaySetInstanceUID;\n\n          const newImageSrcEntry = {};\n          const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n          if (displaySet?.unsupported) {\n            return;\n          }\n\n          if (options.madeInClient) {\n            setJumpToDisplaySet(displaySetInstanceUID);\n          }\n\n          const imageIds = dataSource.getImageIdsForDisplaySet(displaySet);\n          const imageId = getImageIdForThumbnail(displaySet, imageIds);\n\n          // TODO: Is it okay that imageIds are not returned here for SR displaysets?\n          if (!imageId) {\n            return;\n          }\n\n          // When the image arrives, render it and store the result in the thumbnailImgSrcMap\n          newImageSrcEntry[displaySetInstanceUID] = await getImageSrc(imageId);\n          setThumbnailImageSrcMap(prevState => {\n            return { ...prevState, ...newImageSrcEntry };\n          });\n        });\n      }\n    );\n\n    return () => {\n      SubscriptionDisplaySetsAdded.unsubscribe();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [displaySetService, dataSource, getImageSrc, thumbnailImageSrcMap, trackedSeries, viewports]);\n\n  useEffect(() => {\n    // TODO: Will this always hold _all_ the displaySets we care about?\n    // DISPLAY_SETS_CHANGED returns `DisplaySerService.activeDisplaySets`\n    const SubscriptionDisplaySetsChanged = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SETS_CHANGED,\n      changedDisplaySets => {\n        const mappedDisplaySets = _mapDisplaySets(\n          changedDisplaySets,\n          displaySetsLoadingState,\n          thumbnailImageSrcMap,\n          trackedSeries,\n          viewports,\n          viewportGridService,\n          dataSource,\n          displaySetService,\n          uiDialogService,\n          uiNotificationService\n        );\n\n        setDisplaySets(mappedDisplaySets);\n      }\n    );\n\n    const SubscriptionDisplaySetMetaDataInvalidated = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SET_SERIES_METADATA_INVALIDATED,\n      () => {\n        const mappedDisplaySets = _mapDisplaySets(\n          displaySetService.getActiveDisplaySets(),\n          displaySetsLoadingState,\n          thumbnailImageSrcMap,\n          trackedSeries,\n          viewports,\n          viewportGridService,\n          dataSource,\n          displaySetService,\n          uiDialogService,\n          uiNotificationService\n        );\n\n        setDisplaySets(mappedDisplaySets);\n      }\n    );\n\n    return () => {\n      SubscriptionDisplaySetsChanged.unsubscribe();\n      SubscriptionDisplaySetMetaDataInvalidated.unsubscribe();\n    };\n  }, [\n    displaySetsLoadingState,\n    thumbnailImageSrcMap,\n    trackedSeries,\n    viewports,\n    dataSource,\n    displaySetService,\n  ]);\n\n  const tabs = createStudyBrowserTabs(StudyInstanceUIDs, studyDisplayList, displaySets);\n\n  // TODO: Should not fire this on \"close\"\n  function _handleStudyClick(StudyInstanceUID) {\n    const shouldCollapseStudy = expandedStudyInstanceUIDs.includes(StudyInstanceUID);\n    const updatedExpandedStudyInstanceUIDs = shouldCollapseStudy\n      ? [...expandedStudyInstanceUIDs.filter(stdyUid => stdyUid !== StudyInstanceUID)]\n      : [...expandedStudyInstanceUIDs, StudyInstanceUID];\n\n    setExpandedStudyInstanceUIDs(updatedExpandedStudyInstanceUIDs);\n\n    if (!shouldCollapseStudy) {\n      const madeInClient = true;\n      requestDisplaySetCreationForStudy(displaySetService, StudyInstanceUID, madeInClient);\n    }\n  }\n\n  useEffect(() => {\n    if (jumpToDisplaySet) {\n      // Get element by displaySetInstanceUID\n      const displaySetInstanceUID = jumpToDisplaySet;\n      const element = document.getElementById(`thumbnail-${displaySetInstanceUID}`);\n\n      if (element && typeof element.scrollIntoView === 'function') {\n        // TODO: Any way to support IE here?\n        element.scrollIntoView({ behavior: 'smooth' });\n\n        setJumpToDisplaySet(null);\n      }\n    }\n  }, [jumpToDisplaySet, expandedStudyInstanceUIDs, activeTabName]);\n\n  useEffect(() => {\n    if (!jumpToDisplaySet) {\n      return;\n    }\n\n    const displaySetInstanceUID = jumpToDisplaySet;\n    // Set the activeTabName and expand the study\n    const thumbnailLocation = _findTabAndStudyOfDisplaySet(displaySetInstanceUID, tabs);\n    if (!thumbnailLocation) {\n      console.warn('jumpToThumbnail: displaySet thumbnail not found.');\n\n      return;\n    }\n    const { tabName, StudyInstanceUID } = thumbnailLocation;\n    setActiveTabName(tabName);\n    const studyExpanded = expandedStudyInstanceUIDs.includes(StudyInstanceUID);\n    if (!studyExpanded) {\n      const updatedExpandedStudyInstanceUIDs = [...expandedStudyInstanceUIDs, StudyInstanceUID];\n      setExpandedStudyInstanceUIDs(updatedExpandedStudyInstanceUIDs);\n    }\n  }, [expandedStudyInstanceUIDs, jumpToDisplaySet, tabs]);\n\n  const onClickUntrack = displaySetInstanceUID => {\n    const onConfirm = () => {\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n      sendTrackedMeasurementsEvent('UNTRACK_SERIES', {\n        SeriesInstanceUID: displaySet.SeriesInstanceUID,\n      });\n      const measurements = measurementService.getMeasurements();\n      measurements.forEach(m => {\n        if (m.referenceSeriesUID === displaySet.SeriesInstanceUID) {\n          measurementService.remove(m.uid);\n        }\n      });\n    };\n\n    uiDialogService.create({\n      id: 'untrack-series',\n      centralize: true,\n      isDraggable: false,\n      showOverlay: true,\n      content: Dialog,\n      contentProps: {\n        title: 'Untrack Series',\n        body: () => (\n          <div className=\"bg-primary-dark p-4 text-white\">\n            <p>Are you sure you want to untrack this series?</p>\n            <p className=\"mt-2\">\n              This action cannot be undone and will delete all your existing measurements.\n            </p>\n          </div>\n        ),\n        actions: [\n          {\n            id: 'cancel',\n            text: 'Cancel',\n            type: ButtonEnums.type.secondary,\n          },\n          {\n            id: 'yes',\n            text: 'Yes',\n            type: ButtonEnums.type.primary,\n            classes: ['untrack-yes-button'],\n          },\n        ],\n        onClose: () => uiDialogService.dismiss({ id: 'untrack-series' }),\n        onSubmit: async ({ action }) => {\n          switch (action.id) {\n            case 'yes':\n              onConfirm();\n              uiDialogService.dismiss({ id: 'untrack-series' });\n              break;\n            case 'cancel':\n              uiDialogService.dismiss({ id: 'untrack-series' });\n              break;\n          }\n        },\n      },\n    });\n  };\n\n  return (\n    <StudyBrowser\n      tabs={tabs}\n      servicesManager={servicesManager}\n      activeTabName={activeTabName}\n      expandedStudyInstanceUIDs={expandedStudyInstanceUIDs}\n      onClickStudy={_handleStudyClick}\n      onClickTab={clickedTabName => {\n        setActiveTabName(clickedTabName);\n      }}\n      onClickUntrack={displaySetInstanceUID => {\n        onClickUntrack(displaySetInstanceUID);\n      }}\n      onClickThumbnail={() => {}}\n      onDoubleClickThumbnail={onDoubleClickThumbnailHandler}\n      activeDisplaySetInstanceUIDs={activeViewportDisplaySetInstanceUIDs}\n    />\n  );\n}\n\nPanelStudyBrowserTracking.propTypes = {\n  servicesManager: PropTypes.object.isRequired,\n  dataSource: PropTypes.shape({\n    getImageIdsForDisplaySet: PropTypes.func.isRequired,\n  }).isRequired,\n  getImageSrc: PropTypes.func.isRequired,\n  getStudiesForPatientByMRN: PropTypes.func.isRequired,\n  requestDisplaySetCreationForStudy: PropTypes.func.isRequired,\n};\n\nexport default PanelStudyBrowserTracking;\n\nfunction getImageIdForThumbnail(displaySet: any, imageIds: any) {\n  let imageId;\n  if (displaySet.isDynamicVolume) {\n    const timePoints = displaySet.dynamicVolumeInfo.timePoints;\n    const middleIndex = Math.floor(timePoints.length / 2);\n    const middleTimePointImageIds = timePoints[middleIndex];\n    imageId = middleTimePointImageIds[Math.floor(middleTimePointImageIds.length / 2)];\n  } else {\n    imageId = imageIds[Math.floor(imageIds.length / 2)];\n  }\n  return imageId;\n}\n\n/**\n * Maps from the DataSource's format to a naturalized object\n *\n * @param {*} studies\n */\nfunction _mapDataSourceStudies(studies) {\n  return studies.map(study => {\n    // TODO: Why does the data source return in this format?\n    return {\n      AccessionNumber: study.accession,\n      StudyDate: study.date,\n      StudyDescription: study.description,\n      NumInstances: study.instances,\n      ModalitiesInStudy: study.modalities,\n      PatientID: study.mrn,\n      PatientName: study.patientName,\n      StudyInstanceUID: study.studyInstanceUid,\n      StudyTime: study.time,\n    };\n  });\n}\n\nfunction _mapDisplaySets(\n  displaySets,\n  displaySetLoadingState,\n  thumbnailImageSrcMap,\n  trackedSeriesInstanceUIDs,\n  viewports, // TODO: make array of `displaySetInstanceUIDs`?\n  viewportGridService,\n  dataSource,\n  displaySetService,\n  uiDialogService,\n  uiNotificationService\n) {\n  const thumbnailDisplaySets = [];\n  const thumbnailNoImageDisplaySets = [];\n  displaySets\n    .filter(ds => !ds.excludeFromThumbnailBrowser)\n    .forEach(ds => {\n      const imageSrc = thumbnailImageSrcMap[ds.displaySetInstanceUID];\n      const componentType = _getComponentType(ds);\n      const numPanes = viewportGridService.getNumViewportPanes();\n\n      const array =\n        componentType === 'thumbnailTracked' ? thumbnailDisplaySets : thumbnailNoImageDisplaySets;\n\n      const { displaySetInstanceUID } = ds;\n      const loadingProgress = displaySetLoadingState?.[displaySetInstanceUID];\n\n      const thumbnailProps = {\n        displaySetInstanceUID,\n        description: ds.SeriesDescription,\n        seriesNumber: ds.SeriesNumber,\n        modality: ds.Modality,\n        seriesDate: formatDate(ds.SeriesDate),\n        numInstances: ds.numImageFrames,\n        loadingProgress,\n        countIcon: ds.countIcon,\n        messages: ds.messages,\n        StudyInstanceUID: ds.StudyInstanceUID,\n        componentType,\n        imageSrc,\n        dragData: {\n          type: 'displayset',\n          displaySetInstanceUID,\n          // .. Any other data to pass\n        },\n        isTracked: trackedSeriesInstanceUIDs.includes(ds.SeriesInstanceUID),\n        isHydratedForDerivedDisplaySet: ds.isHydrated,\n      };\n\n      if (componentType === 'thumbnailNoImage') {\n        if (dataSource.reject && dataSource.reject.series) {\n          thumbnailProps.canReject = !ds?.unsupported;\n          thumbnailProps.onReject = () => {\n            uiDialogService.create({\n              id: 'ds-reject-sr',\n              centralize: true,\n              isDraggable: false,\n              showOverlay: true,\n              content: Dialog,\n              contentProps: {\n                title: 'Delete Report',\n                body: () => (\n                  <div className=\"bg-primary-dark p-4 text-white\">\n                    <p>Are you sure you want to delete this report?</p>\n                    <p className=\"mt-2\">This action cannot be undone.</p>\n                  </div>\n                ),\n                actions: [\n                  {\n                    id: 'cancel',\n                    text: 'Cancel',\n                    type: ButtonEnums.type.secondary,\n                  },\n                  {\n                    id: 'yes',\n                    text: 'Yes',\n                    type: ButtonEnums.type.primary,\n                    classes: ['reject-yes-button'],\n                  },\n                ],\n                onClose: () => uiDialogService.dismiss({ id: 'ds-reject-sr' }),\n                onShow: () => {\n                  const yesButton = document.querySelector('.reject-yes-button');\n\n                  yesButton.focus();\n                },\n                onSubmit: async ({ action }) => {\n                  switch (action.id) {\n                    case 'yes':\n                      try {\n                        await dataSource.reject.series(ds.StudyInstanceUID, ds.SeriesInstanceUID);\n                        displaySetService.deleteDisplaySet(displaySetInstanceUID);\n                        uiDialogService.dismiss({ id: 'ds-reject-sr' });\n                        uiNotificationService.show({\n                          title: 'Delete Report',\n                          message: 'Report deleted successfully',\n                          type: 'success',\n                        });\n                      } catch (error) {\n                        uiDialogService.dismiss({ id: 'ds-reject-sr' });\n                        uiNotificationService.show({\n                          title: 'Delete Report',\n                          message: 'Failed to delete report',\n                          type: 'error',\n                        });\n                      }\n                      break;\n                    case 'cancel':\n                      uiDialogService.dismiss({ id: 'ds-reject-sr' });\n                      break;\n                  }\n                },\n              },\n            });\n          };\n        } else {\n          thumbnailProps.canReject = false;\n        }\n      }\n\n      array.push(thumbnailProps);\n    });\n\n  return [...thumbnailDisplaySets, ...thumbnailNoImageDisplaySets];\n}\n\nconst thumbnailNoImageModalities = [\n  'SR',\n  'SEG',\n  'SM',\n  'RTSTRUCT',\n  'RTPLAN',\n  'RTDOSE',\n  'DOC',\n  'OT',\n  'PMAP',\n];\n\nfunction _getComponentType(ds) {\n  if (thumbnailNoImageModalities.includes(ds.Modality) || ds?.unsupported) {\n    return 'thumbnailNoImage';\n  }\n\n  return 'thumbnailTracked';\n}\n\nfunction _findTabAndStudyOfDisplaySet(displaySetInstanceUID, tabs) {\n  for (let t = 0; t < tabs.length; t++) {\n    const { studies } = tabs[t];\n\n    for (let s = 0; s < studies.length; s++) {\n      const { displaySets } = studies[s];\n\n      for (let d = 0; d < displaySets.length; d++) {\n        const displaySet = displaySets[d];\n\n        if (displaySet.displaySetInstanceUID === displaySetInstanceUID) {\n          return {\n            tabName: tabs[t].name,\n            StudyInstanceUID: studies[s].studyInstanceUid,\n          };\n        }\n      }\n    }\n  }\n}\n","/**\n * @param {*} cornerstone\n * @param {*} imageId\n */\nfunction getImageSrcFromImageId(cornerstone, imageId) {\n  return new Promise((resolve, reject) => {\n    const canvas = document.createElement('canvas');\n    cornerstone.utilities\n      .loadImageToCanvas({ canvas, imageId, thumbnail: true })\n      .then(imageId => {\n        resolve(canvas.toDataURL());\n      })\n      .catch(reject);\n  });\n}\n\nexport default getImageSrcFromImageId;\n","function requestDisplaySetCreationForStudy(\n  dataSource,\n  displaySetService,\n  StudyInstanceUID,\n  madeInClient\n) {\n  if (\n    displaySetService.activeDisplaySets.some(\n      displaySet => displaySet.StudyInstanceUID === StudyInstanceUID\n    )\n  ) {\n    return;\n  }\n\n  dataSource.retrieve.series.metadata({ StudyInstanceUID, madeInClient });\n}\n\nexport default requestDisplaySetCreationForStudy;\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\n//\nimport PanelStudyBrowserTracking from './PanelStudyBrowserTracking';\nimport getImageSrcFromImageId from './getImageSrcFromImageId';\nimport requestDisplaySetCreationForStudy from './requestDisplaySetCreationForStudy';\n\nfunction _getStudyForPatientUtility(extensionManager) {\n  const utilityModule = extensionManager.getModuleEntry(\n    '@ohif/extension-default.utilityModule.common'\n  );\n\n  const { getStudiesForPatientByMRN } = utilityModule.exports;\n  return getStudiesForPatientByMRN;\n}\n\n/**\n * Wraps the PanelStudyBrowser and provides features afforded by managers/services\n *\n * @param {object} params\n * @param {object} commandsManager\n * @param {object} extensionManager\n */\nfunction WrappedPanelStudyBrowserTracking({\n  commandsManager,\n  extensionManager,\n  servicesManager,\n}: withAppTypes) {\n  const dataSource = extensionManager.getActiveDataSource()[0];\n\n  const getStudiesForPatientByMRN = _getStudyForPatientUtility(extensionManager);\n  const _getStudiesForPatientByMRN = getStudiesForPatientByMRN.bind(null, dataSource);\n  const _getImageSrcFromImageId = useCallback(\n    _createGetImageSrcFromImageIdFn(extensionManager),\n    []\n  );\n  const _requestDisplaySetCreationForStudy = requestDisplaySetCreationForStudy.bind(\n    null,\n    dataSource\n  );\n\n  return (\n    <PanelStudyBrowserTracking\n      servicesManager={servicesManager}\n      dataSource={dataSource}\n      getImageSrc={_getImageSrcFromImageId}\n      getStudiesForPatientByMRN={_getStudiesForPatientByMRN}\n      requestDisplaySetCreationForStudy={_requestDisplaySetCreationForStudy}\n    />\n  );\n}\n\n/**\n * Grabs cornerstone library reference using a dependent command from\n * the @ohif/extension-cornerstone extension. Then creates a helper function\n * that can take an imageId and return an image src.\n *\n * @param {func} getCommand - CommandManager's getCommand method\n * @returns {func} getImageSrcFromImageId - A utility function powered by\n * cornerstone\n */\nfunction _createGetImageSrcFromImageIdFn(extensionManager) {\n  const utilities = extensionManager.getModuleEntry(\n    '@ohif/extension-cornerstone.utilityModule.common'\n  );\n\n  try {\n    const { cornerstone } = utilities.exports.getCornerstoneLibraries();\n    return getImageSrcFromImageId.bind(null, cornerstone);\n  } catch (ex) {\n    throw new Error('Required command not found');\n  }\n}\n\nWrappedPanelStudyBrowserTracking.propTypes = {\n  commandsManager: PropTypes.object.isRequired,\n  extensionManager: PropTypes.object.isRequired,\n  servicesManager: PropTypes.object.isRequired,\n};\n\nexport default WrappedPanelStudyBrowserTracking;\n","import React, { useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { StudySummary, MeasurementTable, useViewportGrid, ActionButtons } from '@ohif/ui';\nimport { DicomMetadataStore, utils } from '@ohif/core';\nimport { useDebounce } from '@hooks';\nimport { useAppConfig } from '@state';\nimport { useTrackedMeasurements } from '../../getContextModule';\nimport debounce from 'lodash.debounce';\nimport { useTranslation } from 'react-i18next';\n\nconst { downloadCSVReport } = utils;\nconst { formatDate } = utils;\n\nconst DISPLAY_STUDY_SUMMARY_INITIAL_VALUE = {\n  key: undefined, //\n  date: '', // '07-Sep-2010',\n  modality: '', // 'CT',\n  description: '', // 'CHEST/ABD/PELVIS W CONTRAST',\n};\n\nfunction PanelMeasurementTableTracking({ servicesManager, extensionManager }: withAppTypes) {\n  const [viewportGrid] = useViewportGrid();\n  const { t } = useTranslation('MeasurementTable');\n  const [measurementChangeTimestamp, setMeasurementsUpdated] = useState(Date.now().toString());\n  const debouncedMeasurementChangeTimestamp = useDebounce(measurementChangeTimestamp, 200);\n  const { measurementService, uiDialogService, displaySetService, customizationService } =\n    servicesManager.services;\n  const [trackedMeasurements, sendTrackedMeasurementsEvent] = useTrackedMeasurements();\n  const { trackedStudy, trackedSeries } = trackedMeasurements.context;\n  const [displayStudySummary, setDisplayStudySummary] = useState(\n    DISPLAY_STUDY_SUMMARY_INITIAL_VALUE\n  );\n  const [displayMeasurements, setDisplayMeasurements] = useState([]);\n  const measurementsPanelRef = useRef(null);\n  const [appConfig] = useAppConfig();\n\n  useEffect(() => {\n    const measurements = measurementService.getMeasurements();\n    const filteredMeasurements = measurements.filter(\n      m => trackedStudy === m.referenceStudyUID && trackedSeries.includes(m.referenceSeriesUID)\n    );\n\n    const mappedMeasurements = filteredMeasurements.map(m =>\n      _mapMeasurementToDisplay(m, measurementService.VALUE_TYPES, displaySetService)\n    );\n    setDisplayMeasurements(mappedMeasurements);\n    // eslint-ignore-next-line\n  }, [measurementService, trackedStudy, trackedSeries, debouncedMeasurementChangeTimestamp]);\n\n  const updateDisplayStudySummary = async () => {\n    if (trackedMeasurements.matches('tracking')) {\n      const StudyInstanceUID = trackedStudy;\n      const studyMeta = DicomMetadataStore.getStudy(StudyInstanceUID);\n      const instanceMeta = studyMeta.series[0].instances[0];\n      const { StudyDate, StudyDescription } = instanceMeta;\n\n      const modalities = new Set();\n      studyMeta.series.forEach(series => {\n        if (trackedSeries.includes(series.SeriesInstanceUID)) {\n          modalities.add(series.instances[0].Modality);\n        }\n      });\n      const modality = Array.from(modalities).join('/');\n\n      if (displayStudySummary.key !== StudyInstanceUID) {\n        setDisplayStudySummary({\n          key: StudyInstanceUID,\n          date: StudyDate, // TODO: Format: '07-Sep-2010'\n          modality,\n          description: StudyDescription,\n        });\n      }\n    } else if (trackedStudy === '' || trackedStudy === undefined) {\n      setDisplayStudySummary(DISPLAY_STUDY_SUMMARY_INITIAL_VALUE);\n    }\n  };\n\n  // ~~ DisplayStudySummary\n  useEffect(() => {\n    updateDisplayStudySummary();\n  }, [displayStudySummary.key, trackedMeasurements, trackedStudy, updateDisplayStudySummary]);\n\n  // TODO: Better way to consolidated, debounce, check on change?\n  // Are we exposing the right API for measurementService?\n  // This watches for ALL measurementService changes. It updates a timestamp,\n  // which is debounced. After a brief period of inactivity, this triggers\n  // a re-render where we grab up-to-date measurements\n  useEffect(() => {\n    const added = measurementService.EVENTS.MEASUREMENT_ADDED;\n    const addedRaw = measurementService.EVENTS.RAW_MEASUREMENT_ADDED;\n    const updated = measurementService.EVENTS.MEASUREMENT_UPDATED;\n    const removed = measurementService.EVENTS.MEASUREMENT_REMOVED;\n    const cleared = measurementService.EVENTS.MEASUREMENTS_CLEARED;\n    const subscriptions = [];\n\n    [added, addedRaw, updated, removed, cleared].forEach(evt => {\n      subscriptions.push(\n        measurementService.subscribe(evt, () => {\n          setMeasurementsUpdated(Date.now().toString());\n          if (evt === added) {\n            debounce(() => {\n              measurementsPanelRef.current.scrollTop = measurementsPanelRef.current.scrollHeight;\n            }, 300)();\n          }\n        }).unsubscribe\n      );\n    });\n\n    return () => {\n      subscriptions.forEach(unsub => {\n        unsub();\n      });\n    };\n  }, [measurementService, sendTrackedMeasurementsEvent]);\n\n  async function exportReport() {\n    const measurements = measurementService.getMeasurements();\n    const trackedMeasurements = measurements.filter(\n      m => trackedStudy === m.referenceStudyUID && trackedSeries.includes(m.referenceSeriesUID)\n    );\n\n    downloadCSVReport(trackedMeasurements, measurementService);\n  }\n\n  const jumpToImage = ({ uid, isActive }) => {\n    measurementService.jumpToMeasurement(viewportGrid.activeViewportId, uid);\n\n    onMeasurementItemClickHandler({ uid, isActive });\n  };\n\n  const onMeasurementItemEditHandler = ({ uid, isActive }) => {\n    jumpToImage({ uid, isActive });\n    const labelConfig = customizationService.get('measurementLabels');\n    const measurement = measurementService.getMeasurement(uid);\n    const utilityModule = extensionManager.getModuleEntry(\n      '@ohif/extension-cornerstone.utilityModule.common'\n    );\n    const { showLabelAnnotationPopup } = utilityModule.exports;\n    showLabelAnnotationPopup(measurement, uiDialogService, labelConfig).then(\n      (val: Map<any, any>) => {\n        measurementService.update(\n          uid,\n          {\n            ...val,\n          },\n          true\n        );\n      }\n    );\n  };\n\n  const onMeasurementItemClickHandler = ({ uid, isActive }) => {\n    if (!isActive) {\n      const measurements = [...displayMeasurements];\n      const measurement = measurements.find(m => m.uid === uid);\n\n      measurements.forEach(m => (m.isActive = m.uid !== uid ? false : true));\n      measurement.isActive = true;\n      setDisplayMeasurements(measurements);\n    }\n  };\n\n  const displayMeasurementsWithoutFindings = displayMeasurements.filter(\n    dm => dm.measurementType !== measurementService.VALUE_TYPES.POINT && dm.referencedImageId\n  );\n  const additionalFindings = displayMeasurements.filter(\n    dm => dm.measurementType === measurementService.VALUE_TYPES.POINT && dm.referencedImageId\n  );\n\n  const nonAcquisitionMeasurements = displayMeasurements.filter(dm => dm.referencedImageId == null);\n\n  const disabled =\n    additionalFindings.length === 0 &&\n    displayMeasurementsWithoutFindings.length === 0 &&\n    nonAcquisitionMeasurements.length === 0;\n\n  return (\n    <>\n      <div\n        className=\"invisible-scrollbar overflow-y-auto overflow-x-hidden\"\n        ref={measurementsPanelRef}\n        data-cy={'trackedMeasurements-panel'}\n      >\n        {displayStudySummary.key && (\n          <StudySummary\n            date={formatDate(displayStudySummary.date)}\n            modality={displayStudySummary.modality}\n            description={displayStudySummary.description}\n          />\n        )}\n        <MeasurementTable\n          title=\"Measurements\"\n          data={displayMeasurementsWithoutFindings}\n          servicesManager={servicesManager}\n          onClick={jumpToImage}\n          onEdit={onMeasurementItemEditHandler}\n        />\n        {additionalFindings.length !== 0 && (\n          <MeasurementTable\n            title=\"Additional Findings\"\n            data={additionalFindings}\n            servicesManager={servicesManager}\n            onClick={jumpToImage}\n            onEdit={onMeasurementItemEditHandler}\n          />\n        )}\n        {nonAcquisitionMeasurements.length !== 0 && (\n          <MeasurementTable\n            title=\"Non-tracked\"\n            data={nonAcquisitionMeasurements}\n            servicesManager={servicesManager}\n            onClick={jumpToImage}\n            onEdit={onMeasurementItemEditHandler}\n          />\n        )}\n      </div>\n      {!appConfig?.disableEditing && (\n        <div className=\"flex justify-center p-4\">\n          <ActionButtons\n            t={t}\n            actions={[\n              {\n                label: 'Download CSV',\n                onClick: exportReport,\n              },\n              {\n                label: 'Create Report',\n                onClick: () => {\n                  sendTrackedMeasurementsEvent('SAVE_REPORT', {\n                    viewportId: viewportGrid.activeViewportId,\n                    isBackupSave: true,\n                  });\n                },\n              },\n            ]}\n            disabled={disabled}\n          />\n        </div>\n      )}\n    </>\n  );\n}\n\nPanelMeasurementTableTracking.propTypes = {\n  servicesManager: PropTypes.shape({\n    services: PropTypes.shape({\n      measurementService: PropTypes.shape({\n        getMeasurements: PropTypes.func.isRequired,\n        VALUE_TYPES: PropTypes.object.isRequired,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\n// TODO: This could be a measurementService mapper\nfunction _mapMeasurementToDisplay(measurement, types, displaySetService) {\n  const { referenceStudyUID, referenceSeriesUID, SOPInstanceUID } = measurement;\n\n  // TODO: We don't deal with multiframe well yet, would need to update\n  // This in OHIF-312 when we add FrameIndex to measurements.\n\n  const instance = DicomMetadataStore.getInstance(\n    referenceStudyUID,\n    referenceSeriesUID,\n    SOPInstanceUID\n  );\n\n  const displaySets = displaySetService.getDisplaySetsForSeries(referenceSeriesUID);\n\n  if (!displaySets[0] || !displaySets[0].images) {\n    throw new Error('The tracked measurements panel should only be tracking \"stack\" displaySets.');\n  }\n\n  const {\n    displayText: baseDisplayText,\n    uid,\n    label: baseLabel,\n    type,\n    selected,\n    findingSites,\n    finding,\n    referencedImageId,\n  } = measurement;\n\n  const firstSite = findingSites?.[0];\n  const label = baseLabel || finding?.text || firstSite?.text || '(empty)';\n  let displayText = baseDisplayText || [];\n  if (findingSites) {\n    const siteText = [];\n    findingSites.forEach(site => {\n      if (site?.text !== label) {\n        siteText.push(site.text);\n      }\n    });\n    displayText = [...siteText, ...displayText];\n  }\n  if (finding && finding?.text !== label) {\n    displayText = [finding.text, ...displayText];\n  }\n\n  return {\n    uid,\n    label,\n    baseLabel,\n    measurementType: type,\n    displayText,\n    baseDisplayText,\n    isActive: selected,\n    finding,\n    findingSites,\n    referencedImageId,\n  };\n}\n\nexport default PanelMeasurementTableTracking;\n","import { Types } from '@ohif/core';\nimport { PanelMeasurementTableTracking, PanelStudyBrowserTracking } from './panels';\nimport i18n from 'i18next';\n\n// TODO:\n// - No loading UI exists yet\n// - cancel promises when component is destroyed\n// - show errors in UI for thumbnails if promise fails\nfunction getPanelModule({ commandsManager, extensionManager, servicesManager }): Types.Panel[] {\n  return [\n    {\n      name: 'seriesList',\n      iconName: 'tab-studies',\n      iconLabel: 'Studies',\n      label: i18n.t('SidePanel:Studies'),\n      component: PanelStudyBrowserTracking.bind(null, {\n        commandsManager,\n        extensionManager,\n        servicesManager,\n      }),\n    },\n\n    {\n      name: 'trackedMeasurements',\n      iconName: 'tab-linear',\n      iconLabel: 'Measure',\n      label: i18n.t('SidePanel:Measurements'),\n      component: PanelMeasurementTableTracking.bind(null, {\n        commandsManager,\n        extensionManager,\n        servicesManager,\n      }),\n    },\n  ];\n}\n\nexport default getPanelModule;\n","import React from 'react';\n\nconst Component = React.lazy(() => {\n  return import(/* webpackPrefetch: true */ './viewports/TrackedCornerstoneViewport');\n});\n\nconst OHIFCornerstoneViewport = props => {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </React.Suspense>\n  );\n};\n\nfunction getViewportModule({ servicesManager, commandsManager, extensionManager }) {\n  const ExtendedOHIFCornerstoneTrackingViewport = props => {\n    return (\n      <OHIFCornerstoneViewport\n        servicesManager={servicesManager}\n        commandsManager={commandsManager}\n        extensionManager={extensionManager}\n        {...props}\n      />\n    );\n  };\n\n  return [\n    {\n      name: 'cornerstone-tracked',\n      component: ExtendedOHIFCornerstoneTrackingViewport,\n    },\n  ];\n}\n\nexport default getViewportModule;\n","import getContextModule from './getContextModule';\nimport getPanelModule from './getPanelModule';\nimport getViewportModule from './getViewportModule';\nimport { id } from './id.js';\n\nconst measurementTrackingExtension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   */\n  id,\n\n  getContextModule,\n  getPanelModule,\n  getViewportModule,\n};\n\nexport default measurementTrackingExtension;\n","import packageJson from '../package.json';\n\nconst id = packageJson.name;\n\nexport { id };\n"],"names":["RESPONSE","NO_NEVER","CANCEL","CREATE_REPORT","ADD_SERIES","SET_STUDY_AND_SERIES","NO_NOT_FOR_SERIES","HYDRATE_REPORT","machineConfiguration","id","initial","context","activeViewportId","trackedStudy","trackedSeries","ignoredSeries","prevTrackedStudy","prevTrackedSeries","prevIgnoredSeries","ignoredSRSeriesForHydration","isDirty","states","off","type","labellingOnly","on","TRACK_SERIES","target","actions","idle","entry","cond","SET_TRACKED_SERIES","PROMPT_HYDRATE_SR","RESTORE_PROMPT_HYDRATE_SR","HYDRATE_SR","UPDATE_ACTIVE_VIEWPORT_ID","assign","_","event","promptBeginTracking","invoke","src","onDone","onError","tracking","UNTRACK_SERIES","SAVE_REPORT","SET_DIRTY","promptTrackNewSeries","promptTrackNewStudy","promptSaveReport","promptHydrateStructuredReport","hydrateStructuredReport","promptLabelAnnotation","strict","defaultOptions","services","ctx","evt","discardPreviouslyTrackedMeasurements","console","log","clearAllMeasurements","jumpToFirstMeasurementInActiveViewport","warn","showStructuredReportDisplaySetInActiveViewport","clearContext","setTrackedStudyAndSeries","slice","data","StudyInstanceUID","SeriesInstanceUID","setTrackedStudyAndMultipleSeries","studyInstanceUID","seriesInstanceUIDs","SeriesInstanceUIDs","setIsDirtyToClean","setIsDirty","ignoreSeries","ignoreHydrationForSRSeries","srSeriesInstanceUID","addTrackedSeries","removeTrackedSeries","filter","ser","setPreviousState","meta","prevState","state","value","guards","shouldSetDirty","undefined","includes","wasLabellingOnly","condMeta","wasIdle","wasTracking","wasTrackingAndIsNewStudy","wasTrackingAndIsNewSeries","shouldKillMachine","userResponse","shouldAddSeries","shouldSetStudyAndSeries","shouldAddIgnoredSeries","shouldPromptSaveReport","shouldIgnoreHydrationForSR","shouldSaveAndContinueWithSameReport","isBackupSave","shouldSaveAndStartNewReport","shouldHydrateStructuredReport","hasRemainingTrackedSeries","length","hasNotIgnoredSRSeriesForHydration","isNewStudy","isNewSeries","servicesManager","extensionManager","uiViewportDialogService","appConfig","_appConfig","viewportId","Promise","async","resolve","reject","promptResult","disableConfirmationPrompts","message","i18n","t","ButtonEnums","secondary","text","primary","onSubmit","result","hide","show","onOutsideClick","onKeyPress","key","action","find","_askTrackMeasurements","UIViewportDialogService","_askShouldAddMeasurements","_askSaveDiscardOrCancel","MIN_SR_SERIES_NUMBER","commandsManager","uiDialogService","measurementService","displaySetService","displaySetInstanceUIDs","createReportDialogPrompt","dataSource","getDataSources","trackedMeasurements","getMeasurements","m","referenceStudyUID","referenceSeriesUID","referencedImageId","SeriesDescription","SeriesNumber","srSeriesNumbers","getActiveDisplaySets","ds","Modality","map","Math","max","getNextSRSeriesNumber","getReport","runCommand","measurementData","additionalFindingTypes","options","createReportAsync","createdDisplaySetInstanceUIDs","error","displaySetInstanceUID","srDisplaySet","getDisplaySetByUID","hydrationResult","baseHydrateStructuredReport","customizationService","measurementId","utilityModule","getModuleEntry","showLabelAnnotationPopup","exports","labelConfig","get","measurement","getMeasurement","update","TrackedMeasurementsContext","React","displayName","useTrackedMeasurements","useContext","SR_SOPCLASSHANDLERID","TrackedMeasurementsContextProvider","children","useAppConfig","viewportGrid","viewportGridService","useViewportGrid","viewports","cornerstoneViewportService","machineOptions","Object","referencedDisplaySetUID","referencedImages","images","isVolumeIdReferenced","imageId","startsWith","imageIndex","findIndex","image","imageIdToUse","keys","substring","setDisplaySetsForViewport","viewportOptions","initialImageOptions","index","jumpToSameImageInActiveViewport","getCornerstoneViewport","getCurrentImageIdIndex","StructuredReportDisplaySetInstanceUID","measurementIds","ms","fm","i","remove","uid","bind","isLabelOnMeasure","labelOnMeasure","isLabelOnMeasureAndShouldKillMachine","measurementTrackingMachine","Machine","sendTrackedMeasurementsEvent","useMachine","useEffect","size","activeViewport","displaySet","SOPClassHandlerId","isLoaded","load","isRehydratable","triggerPromptHydrateFlow","Provider","propTypes","PropTypes","isRequired","BoundTrackedMeasurementsContextProvider","name","provider","formatDate","createStudyBrowserTabs","utils","PanelStudyBrowserTracking","getImageSrc","getStudiesForPatientByMRN","requestDisplaySetCreationForStudy","hangingProtocolService","uiNotificationService","studyPrefetcherService","navigate","useNavigate","useTranslation","StudyInstanceUIDs","useImageViewer","isHangingProtocolLayout","activeTabName","setActiveTabName","useState","expandedStudyInstanceUIDs","setExpandedStudyInstanceUIDs","studyDisplayList","setStudyDisplayList","hasLoadedViewports","setHasLoadedViewports","displaySets","setDisplaySets","displaySetsLoadingState","setDisplaySetsLoadingState","thumbnailImageSrcMap","setThumbnailImageSrcMap","jumpToDisplaySet","setJumpToDisplaySet","activeViewportDisplaySetInstanceUIDs","forEach","sid","qidoForStudyUID","query","studies","search","studyInstanceUid","Error","qidoStudiesForPatient","actuallyMappedStudies","study","AccessionNumber","accession","StudyDate","date","StudyDescription","description","NumInstances","instances","ModalitiesInStudy","modalities","PatientID","mrn","PatientName","patientName","StudyTime","time","qidoStudy","numInstances","prevArray","ret","it","push","fetchStudiesForPatient","window","setTimeout","currentDisplaySets","activeDisplaySets","newImageSrcEntry","dSet","getImageIdForThumbnail","getImageIdsForDisplaySet","unsupported","mappedDisplaySets","_mapDisplaySets","unsubscribe","subscribe","EVENTS","DISPLAYSET_LOAD_PROGRESS","updatedDisplaySetLoadingState","loadingProgress","SubscriptionDisplaySetsAdded","DISPLAY_SETS_ADDED","displaySetsAdded","madeInClient","SubscriptionDisplaySetsChanged","DISPLAY_SETS_CHANGED","changedDisplaySets","SubscriptionDisplaySetMetaDataInvalidated","DISPLAY_SET_SERIES_METADATA_INVALIDATED","tabs","element","document","getElementById","scrollIntoView","behavior","thumbnailLocation","s","d","tabName","_findTabAndStudyOfDisplaySet","updatedExpandedStudyInstanceUIDs","onClickUntrack","create","centralize","isDraggable","showOverlay","content","Dialog","contentProps","title","body","className","classes","onClose","dismiss","onConfirm","StudyBrowser","onClickStudy","shouldCollapseStudy","stdyUid","onClickTab","clickedTabName","onClickThumbnail","onDoubleClickThumbnail","updatedViewports","getViewportsRequireUpdate","duration","setDisplaySetsForViewports","activeDisplaySetInstanceUIDs","imageIds","isDynamicVolume","timePoints","dynamicVolumeInfo","middleTimePointImageIds","floor","displaySetLoadingState","trackedSeriesInstanceUIDs","thumbnailDisplaySets","thumbnailNoImageDisplaySets","excludeFromThumbnailBrowser","imageSrc","componentType","thumbnailNoImageModalities","_getComponentType","array","getNumViewportPanes","thumbnailProps","seriesNumber","modality","seriesDate","SeriesDate","numImageFrames","countIcon","messages","dragData","isTracked","isHydratedForDerivedDisplaySet","isHydrated","series","canReject","onReject","onShow","querySelector","focus","deleteDisplaySet","cornerstone","canvas","createElement","utilities","loadImageToCanvas","thumbnail","then","toDataURL","catch","some","retrieve","metadata","WrappedPanelStudyBrowserTracking","getActiveDataSource","_getStudyForPatientUtility","_getStudiesForPatientByMRN","_getImageSrcFromImageId","useCallback","getCornerstoneLibraries","getImageSrcFromImageId","ex","_createGetImageSrcFromImageIdFn","_requestDisplaySetCreationForStudy","downloadCSVReport","DISPLAY_STUDY_SUMMARY_INITIAL_VALUE","PanelMeasurementTableTracking","measurementChangeTimestamp","setMeasurementsUpdated","Date","now","toString","debouncedMeasurementChangeTimestamp","useDebounce","displayStudySummary","setDisplayStudySummary","displayMeasurements","setDisplayMeasurements","measurementsPanelRef","useRef","mappedMeasurements","types","SOPInstanceUID","DicomMetadataStore","getInstance","getDisplaySetsForSeries","displayText","baseDisplayText","label","baseLabel","selected","findingSites","finding","firstSite","siteText","site","measurementType","isActive","_mapMeasurementToDisplay","VALUE_TYPES","updateDisplayStudySummary","matches","studyMeta","getStudy","instanceMeta","Set","add","Array","from","join","added","MEASUREMENT_ADDED","addedRaw","RAW_MEASUREMENT_ADDED","updated","MEASUREMENT_UPDATED","removed","MEASUREMENT_REMOVED","cleared","MEASUREMENTS_CLEARED","subscriptions","debounce","current","scrollTop","scrollHeight","unsub","jumpToImage","jumpToMeasurement","onMeasurementItemClickHandler","onMeasurementItemEditHandler","val","measurements","displayMeasurementsWithoutFindings","dm","POINT","additionalFindings","nonAcquisitionMeasurements","disabled","ref","StudySummary","MeasurementTable","onClick","onEdit","disableEditing","ActionButtons","iconName","iconLabel","component","Component","OHIFCornerstoneViewport","props","fallback","_extends","packageJson","getContextModule","getPanelModule","getViewportModule"],"sourceRoot":""}