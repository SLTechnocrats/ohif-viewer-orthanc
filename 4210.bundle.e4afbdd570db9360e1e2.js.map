{"version":3,"file":"4210.bundle.e4afbdd570db9360e1e2.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-seg/src/id.js","webpack:///../../../extensions/cornerstone-dicom-seg/src/getSopClassHandlerModule.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/dicomlabToRGB.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/getHangingProtocolModule.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/types/segmentation.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/callInputDialog.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/colorPickerDialog.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/PanelSegmentation.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/getPanelModule.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/hydrationUtils.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/commandsModule.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/index.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/getToolbarModule.ts"],"sourcesContent":["import packageJson from '../package.json';\n\nconst id = packageJson.name;\nconst SOPClassHandlerName = 'dicom-seg';\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.${SOPClassHandlerName}`;\n\nexport { id, SOPClassHandlerId, SOPClassHandlerName };\n","import { utils } from '@ohif/core';\nimport { metaData, cache, triggerEvent, eventTarget } from '@cornerstonejs/core';\nimport { CONSTANTS } from '@cornerstonejs/tools';\nimport { adaptersSEG, Enums } from '@cornerstonejs/adapters';\n\nimport { SOPClassHandlerId } from './id';\nimport { dicomlabToRGB } from './utils/dicomlabToRGB';\n\nconst sopClassUids = ['1.2.840.10008.5.1.4.1.1.66.4'];\n\nconst loadPromises = {};\n\nfunction _getDisplaySetsFromSeries(\n  instances,\n  servicesManager: AppTypes.ServicesManager,\n  extensionManager\n) {\n  const instance = instances[0];\n\n  const {\n    StudyInstanceUID,\n    SeriesInstanceUID,\n    SOPInstanceUID,\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPClassUID,\n    wadoRoot,\n    wadoUri,\n    wadoUriRoot,\n  } = instance;\n\n  const displaySet = {\n    Modality: 'SEG',\n    loading: false,\n    isReconstructable: true, // by default for now since it is a volumetric SEG currently\n    displaySetInstanceUID: utils.guid(),\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPInstanceUID,\n    SeriesInstanceUID,\n    StudyInstanceUID,\n    SOPClassHandlerId,\n    SOPClassUID,\n    referencedImages: null,\n    referencedSeriesInstanceUID: null,\n    referencedDisplaySetInstanceUID: null,\n    isDerivedDisplaySet: true,\n    isLoaded: false,\n    isHydrated: false,\n    segments: {},\n    sopClassUids,\n    instance,\n    instances: [instance],\n    wadoRoot,\n    wadoUriRoot,\n    wadoUri,\n    isOverlayDisplaySet: true,\n  };\n\n  const referencedSeriesSequence = instance.ReferencedSeriesSequence;\n\n  if (!referencedSeriesSequence) {\n    console.error('ReferencedSeriesSequence is missing for the SEG');\n    return;\n  }\n\n  const referencedSeries = referencedSeriesSequence[0] || referencedSeriesSequence;\n\n  displaySet.referencedImages = instance.ReferencedSeriesSequence.ReferencedInstanceSequence;\n  displaySet.referencedSeriesInstanceUID = referencedSeries.SeriesInstanceUID;\n\n  displaySet.getReferenceDisplaySet = () => {\n    const { displaySetService } = servicesManager.services;\n    const referencedDisplaySets = displaySetService.getDisplaySetsForSeries(\n      displaySet.referencedSeriesInstanceUID\n    );\n\n    if (!referencedDisplaySets || referencedDisplaySets.length === 0) {\n      throw new Error('Referenced DisplaySet is missing for the SEG');\n    }\n\n    const referencedDisplaySet = referencedDisplaySets[0];\n\n    displaySet.referencedDisplaySetInstanceUID = referencedDisplaySet.displaySetInstanceUID;\n\n    // Todo: this needs to be able to work with other reference volumes (other than streaming) such as nifti, etc.\n    displaySet.referencedVolumeURI = referencedDisplaySet.displaySetInstanceUID;\n    const referencedVolumeId = `cornerstoneStreamingImageVolume:${displaySet.referencedVolumeURI}`;\n    displaySet.referencedVolumeId = referencedVolumeId;\n\n    return referencedDisplaySet;\n  };\n\n  displaySet.load = async ({ headers }) =>\n    await _load(displaySet, servicesManager, extensionManager, headers);\n\n  return [displaySet];\n}\n\nfunction _load(\n  segDisplaySet,\n  servicesManager: AppTypes.ServicesManager,\n  extensionManager,\n  headers\n) {\n  const { SOPInstanceUID } = segDisplaySet;\n  const { segmentationService } = servicesManager.services;\n\n  if (\n    (segDisplaySet.loading || segDisplaySet.isLoaded) &&\n    loadPromises[SOPInstanceUID] &&\n    _segmentationExists(segDisplaySet, segmentationService)\n  ) {\n    return loadPromises[SOPInstanceUID];\n  }\n\n  segDisplaySet.loading = true;\n\n  // We don't want to fire multiple loads, so we'll wait for the first to finish\n  // and also return the same promise to any other callers.\n  loadPromises[SOPInstanceUID] = new Promise(async (resolve, reject) => {\n    if (!segDisplaySet.segments || Object.keys(segDisplaySet.segments).length === 0) {\n      await _loadSegments({\n        extensionManager,\n        servicesManager,\n        segDisplaySet,\n        headers,\n      });\n    }\n\n    const suppressEvents = true;\n    segmentationService\n      .createSegmentationForSEGDisplaySet(segDisplaySet, null, suppressEvents)\n      .then(() => {\n        segDisplaySet.loading = false;\n        resolve();\n      })\n      .catch(error => {\n        segDisplaySet.loading = false;\n        reject(error);\n      });\n  });\n\n  return loadPromises[SOPInstanceUID];\n}\n\nasync function _loadSegments({\n  extensionManager,\n  servicesManager,\n  segDisplaySet,\n  headers,\n}: withAppTypes) {\n  const utilityModule = extensionManager.getModuleEntry(\n    '@ohif/extension-cornerstone.utilityModule.common'\n  );\n\n  const { segmentationService, uiNotificationService } = servicesManager.services;\n\n  const { dicomLoaderService } = utilityModule.exports;\n  const arrayBuffer = await dicomLoaderService.findDicomDataPromise(segDisplaySet, null, headers);\n\n  const cachedReferencedVolume = cache.getVolume(segDisplaySet.referencedVolumeId);\n\n  if (!cachedReferencedVolume) {\n    throw new Error(\n      'Referenced Volume is missing for the SEG, and stack viewport SEG is not supported yet'\n    );\n  }\n\n  const { imageIds } = cachedReferencedVolume;\n\n  // Todo: what should be defaults here\n  const tolerance = 0.001;\n  const skipOverlapping = true;\n\n  eventTarget.addEventListener(Enums.Events.SEGMENTATION_LOAD_PROGRESS, evt => {\n    const { percentComplete } = evt.detail;\n    segmentationService._broadcastEvent(segmentationService.EVENTS.SEGMENT_LOADING_COMPLETE, {\n      percentComplete,\n    });\n  });\n\n  const results = await adaptersSEG.Cornerstone3D.Segmentation.generateToolState(\n    imageIds,\n    arrayBuffer,\n    metaData,\n    { skipOverlapping, tolerance, eventTarget, triggerEvent }\n  );\n\n  let usedRecommendedDisplayCIELabValue = true;\n  results.segMetadata.data.forEach((data, i) => {\n    if (i > 0) {\n      data.rgba = data.RecommendedDisplayCIELabValue;\n\n      if (data.rgba) {\n        data.rgba = dicomlabToRGB(data.rgba);\n      } else {\n        usedRecommendedDisplayCIELabValue = false;\n        data.rgba = CONSTANTS.COLOR_LUT[i % CONSTANTS.COLOR_LUT.length];\n      }\n    }\n  });\n\n  if (results.overlappingSegments) {\n    uiNotificationService.show({\n      title: 'Overlapping Segments',\n      message:\n        'Unsupported overlapping segments detected, segmentation rendering results may be incorrect.',\n      type: 'warning',\n    });\n  }\n\n  if (!usedRecommendedDisplayCIELabValue) {\n    // Display a notification about the non-utilization of RecommendedDisplayCIELabValue\n    uiNotificationService.show({\n      title: 'DICOM SEG import',\n      message:\n        'RecommendedDisplayCIELabValue not found for one or more segments. The default color was used instead.',\n      type: 'warning',\n      duration: 5000,\n    });\n  }\n\n  Object.assign(segDisplaySet, results);\n}\n\nfunction _segmentationExists(segDisplaySet, segmentationService: AppTypes.SegmentationService) {\n  // This should be abstracted with the CornerstoneCacheService\n  return segmentationService.getSegmentation(segDisplaySet.displaySetInstanceUID);\n}\n\nfunction getSopClassHandlerModule({ servicesManager, extensionManager }) {\n  const getDisplaySetsFromSeries = instances => {\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\n  };\n\n  return [\n    {\n      name: 'dicom-seg',\n      sopClassUids,\n      getDisplaySetsFromSeries,\n    },\n  ];\n}\n\nexport default getSopClassHandlerModule;\n","import dcmjs from 'dcmjs';\n\n/**\n * Converts a CIELAB color to an RGB color using the dcmjs library.\n * @param cielab - The CIELAB color to convert.\n * @returns The RGB color as an array of three integers between 0 and 255.\n */\nfunction dicomlabToRGB(cielab: number[]): number[] {\n  const rgb = dcmjs.data.Colors.dicomlab2RGB(cielab).map(x => Math.round(x * 255));\n\n  return rgb;\n}\n\nexport { dicomlabToRGB };\n","import { Types } from '@ohif/core';\n\nconst segProtocol: Types.HangingProtocol.Protocol = {\n  id: '@ohif/seg',\n  // Don't store this hanging protocol as it applies to the currently active\n  // display set by default\n  // cacheId: null,\n  name: 'Segmentations',\n  // Just apply this one when specifically listed\n  protocolMatchingRules: [],\n  toolGroupIds: ['default'],\n  // -1 would be used to indicate active only, whereas other values are\n  // the number of required priors referenced - so 0 means active with\n  // 0 or more priors.\n  numberOfPriorsReferenced: 0,\n  // Default viewport is used to define the viewport when\n  // additional viewports are added using the layout tool\n  defaultViewport: {\n    viewportOptions: {\n      viewportType: 'stack',\n      toolGroupId: 'default',\n      allowUnmatchedView: true,\n    },\n    displaySets: [\n      {\n        id: 'segDisplaySetId',\n        matchedDisplaySetsIndex: -1,\n      },\n    ],\n  },\n  displaySetSelectors: {\n    segDisplaySetId: {\n      seriesMatchingRules: [\n        {\n          attribute: 'Modality',\n          constraint: {\n            equals: 'SEG',\n          },\n        },\n      ],\n    },\n  },\n  stages: [\n    {\n      name: 'Segmentations',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 1,\n          columns: 1,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: { allowUnmatchedView: true },\n          displaySets: [\n            {\n              id: 'segDisplaySetId',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n\nfunction getHangingProtocolModule() {\n  return [\n    {\n      name: segProtocol.id,\n      protocol: segProtocol,\n    },\n  ];\n}\n\nexport default getHangingProtocolModule;\nexport { segProtocol };\n","export enum SegmentationPanelMode {\n  Expanded = 'expanded',\n  Dropdown = 'dropdown',\n}\n","import React from 'react';\nimport { Input, Dialog, ButtonEnums } from '@ohif/ui';\n\nfunction callInputDialog(uiDialogService, label, callback) {\n  const dialogId = 'enter-segment-label';\n\n  const onSubmitHandler = ({ action, value }) => {\n    switch (action.id) {\n      case 'save':\n        callback(value.label, action.id);\n        break;\n      case 'cancel':\n        callback('', action.id);\n        break;\n    }\n    uiDialogService.dismiss({ id: dialogId });\n  };\n\n  if (uiDialogService) {\n    uiDialogService.create({\n      id: dialogId,\n      centralize: true,\n      isDraggable: false,\n      showOverlay: true,\n      content: Dialog,\n      contentProps: {\n        title: 'Segment',\n        value: { label },\n        noCloseButton: true,\n        onClose: () => uiDialogService.dismiss({ id: dialogId }),\n        actions: [\n          { id: 'cancel', text: 'Cancel', type: ButtonEnums.type.secondary },\n          { id: 'save', text: 'Confirm', type: ButtonEnums.type.primary },\n        ],\n        onSubmit: onSubmitHandler,\n        body: ({ value, setValue }) => {\n          return (\n            <Input\n              label=\"Enter the segment label\"\n              labelClassName=\"text-white text-[14px] leading-[1.2]\"\n              autoFocus\n              className=\"border-primary-main bg-black\"\n              type=\"text\"\n              value={value.label}\n              onChange={event => {\n                event.persist();\n                setValue(value => ({ ...value, label: event.target.value }));\n              }}\n              onKeyPress={event => {\n                if (event.key === 'Enter') {\n                  onSubmitHandler({ value, action: { id: 'save' } });\n                }\n              }}\n            />\n          );\n        },\n      },\n    });\n  }\n}\n\nexport default callInputDialog;\n","import React from 'react';\nimport { Dialog } from '@ohif/ui';\nimport { ChromePicker } from 'react-color';\n\nimport './colorPickerDialog.css';\n\nfunction callColorPickerDialog(uiDialogService, rgbaColor, callback) {\n  const dialogId = 'pick-color';\n\n  const onSubmitHandler = ({ action, value }) => {\n    switch (action.id) {\n      case 'save':\n        callback(value.rgbaColor, action.id);\n        break;\n      case 'cancel':\n        callback('', action.id);\n        break;\n    }\n    uiDialogService.dismiss({ id: dialogId });\n  };\n\n  if (uiDialogService) {\n    uiDialogService.create({\n      id: dialogId,\n      centralize: true,\n      isDraggable: false,\n      showOverlay: true,\n      content: Dialog,\n      contentProps: {\n        title: 'Segment Color',\n        value: { rgbaColor },\n        noCloseButton: true,\n        onClose: () => uiDialogService.dismiss({ id: dialogId }),\n        actions: [\n          { id: 'cancel', text: 'Cancel', type: 'primary' },\n          { id: 'save', text: 'Save', type: 'secondary' },\n        ],\n        onSubmit: onSubmitHandler,\n        body: ({ value, setValue }) => {\n          const handleChange = color => {\n            setValue({ rgbaColor: color.rgb });\n          };\n\n          return (\n            <ChromePicker\n              color={value.rgbaColor}\n              onChange={handleChange}\n              presetColors={[]}\n              width={300}\n            />\n          );\n        },\n      },\n    });\n  }\n}\n\nexport default callColorPickerDialog;\n","import { createReportAsync } from '@ohif/extension-default';\nimport React, { useEffect, useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { SegmentationGroupTable, SegmentationGroupTableExpanded } from '@ohif/ui';\nimport { SegmentationPanelMode } from '../types/segmentation';\nimport callInputDialog from './callInputDialog';\nimport callColorPickerDialog from './colorPickerDialog';\nimport { useTranslation } from 'react-i18next';\n\nconst components = {\n  [SegmentationPanelMode.Expanded]: SegmentationGroupTableExpanded,\n  [SegmentationPanelMode.Dropdown]: SegmentationGroupTable,\n};\n\nexport default function PanelSegmentation({\n  servicesManager,\n  commandsManager,\n  extensionManager,\n  configuration,\n}: withAppTypes) {\n  const {\n    segmentationService,\n    viewportGridService,\n    uiDialogService,\n    displaySetService,\n    cornerstoneViewportService,\n  } = servicesManager.services;\n\n  const { t } = useTranslation('PanelSegmentation');\n\n  const [selectedSegmentationId, setSelectedSegmentationId] = useState(null);\n  const [addSegmentationClassName, setAddSegmentationClassName] = useState('');\n  const [segmentationConfiguration, setSegmentationConfiguration] = useState(\n    segmentationService.getConfiguration()\n  );\n\n  const [segmentations, setSegmentations] = useState(() => segmentationService.getSegmentations());\n\n  useEffect(() => {\n    // ~~ Subscription\n    const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\n    const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\n    const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\n    const subscriptions = [];\n\n    [added, updated, removed].forEach(evt => {\n      const { unsubscribe } = segmentationService.subscribe(evt, () => {\n        const segmentations = segmentationService.getSegmentations();\n        setSegmentations(segmentations);\n        setSegmentationConfiguration(segmentationService.getConfiguration());\n      });\n      subscriptions.push(unsubscribe);\n    });\n\n    return () => {\n      subscriptions.forEach(unsub => {\n        unsub();\n      });\n    };\n  }, []);\n\n  // temporary measure to not allow add segmentation when the selected viewport\n  // is stack viewport\n  useEffect(() => {\n    const handleActiveViewportChange = viewportId => {\n      const displaySetUIDs = viewportGridService.getDisplaySetsUIDsForViewport(\n        viewportId || viewportGridService.getActiveViewportId()\n      );\n\n      if (!displaySetUIDs) {\n        return;\n      }\n\n      const isReconstructable =\n        displaySetUIDs?.some(displaySetUID => {\n          const displaySet = displaySetService.getDisplaySetByUID(displaySetUID);\n          return displaySet?.isReconstructable;\n        }) || false;\n\n      if (isReconstructable) {\n        setAddSegmentationClassName('');\n      } else {\n        setAddSegmentationClassName('ohif-disabled');\n      }\n    };\n\n    // Handle initial state\n    handleActiveViewportChange();\n\n    const changedGrid = viewportGridService.EVENTS.ACTIVE_VIEWPORT_ID_CHANGED;\n    const ready = viewportGridService.EVENTS.VIEWPORTS_READY;\n\n    const subsGrid = [];\n    [ready, changedGrid].forEach(evt => {\n      const { unsubscribe } = viewportGridService.subscribe(evt, ({ viewportId }) => {\n        handleActiveViewportChange(viewportId);\n      });\n\n      subsGrid.push(unsubscribe);\n    });\n\n    const changedData = cornerstoneViewportService.EVENTS.VIEWPORT_DATA_CHANGED;\n\n    const subsData = [];\n    [changedData].forEach(evt => {\n      const { unsubscribe } = cornerstoneViewportService.subscribe(evt, () => {\n        handleActiveViewportChange();\n      });\n\n      subsData.push(unsubscribe);\n    });\n\n    // Clean up\n    return () => {\n      subsGrid.forEach(unsub => unsub());\n      subsData.forEach(unsub => unsub());\n    };\n  }, []);\n\n  const getToolGroupIds = segmentationId => {\n    const toolGroupIds = segmentationService.getToolGroupIdsWithSegmentation(segmentationId);\n\n    return toolGroupIds;\n  };\n\n  const onSegmentationAdd = async () => {\n    commandsManager.runCommand('createEmptySegmentationForViewport', {\n      viewportId: viewportGridService.getActiveViewportId(),\n    });\n  };\n\n  const onSegmentationClick = (segmentationId: string) => {\n    segmentationService.setActiveSegmentationForToolGroup(segmentationId);\n  };\n\n  const onSegmentationDelete = (segmentationId: string) => {\n    segmentationService.remove(segmentationId);\n  };\n\n  const onSegmentAdd = segmentationId => {\n    segmentationService.addSegment(segmentationId);\n  };\n\n  const onSegmentClick = (segmentationId, segmentIndex) => {\n    segmentationService.setActiveSegment(segmentationId, segmentIndex);\n\n    const toolGroupIds = getToolGroupIds(segmentationId);\n\n    toolGroupIds.forEach(toolGroupId => {\n      // const toolGroupId =\n      segmentationService.setActiveSegmentationForToolGroup(segmentationId, toolGroupId);\n      segmentationService.jumpToSegmentCenter(segmentationId, segmentIndex, toolGroupId);\n    });\n  };\n\n  const onSegmentEdit = (segmentationId, segmentIndex) => {\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n\n    const segment = segmentation.segments[segmentIndex];\n    const { label } = segment;\n\n    callInputDialog(uiDialogService, label, (label, actionId) => {\n      if (label === '') {\n        return;\n      }\n\n      segmentationService.setSegmentLabel(segmentationId, segmentIndex, label);\n    });\n  };\n\n  const onSegmentationEdit = segmentationId => {\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n    const { label } = segmentation;\n\n    callInputDialog(uiDialogService, label, (label, actionId) => {\n      if (label === '') {\n        return;\n      }\n\n      segmentationService.addOrUpdateSegmentation(\n        {\n          id: segmentationId,\n          label,\n        },\n        false, // suppress event\n        true // notYetUpdatedAtSource\n      );\n    });\n  };\n\n  const onSegmentColorClick = (segmentationId, segmentIndex) => {\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n\n    const segment = segmentation.segments[segmentIndex];\n    const { color, opacity } = segment;\n\n    const rgbaColor = {\n      r: color[0],\n      g: color[1],\n      b: color[2],\n      a: opacity / 255.0,\n    };\n\n    callColorPickerDialog(uiDialogService, rgbaColor, (newRgbaColor, actionId) => {\n      if (actionId === 'cancel') {\n        return;\n      }\n\n      segmentationService.setSegmentRGBAColor(segmentationId, segmentIndex, [\n        newRgbaColor.r,\n        newRgbaColor.g,\n        newRgbaColor.b,\n        newRgbaColor.a * 255.0,\n      ]);\n    });\n  };\n\n  const onSegmentDelete = (segmentationId, segmentIndex) => {\n    segmentationService.removeSegment(segmentationId, segmentIndex);\n  };\n\n  // segment hide\n  const onToggleSegmentVisibility = (segmentationId, segmentIndex) => {\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n    const segmentInfo = segmentation.segments[segmentIndex];\n    const isVisible = !segmentInfo.isVisible;\n    const toolGroupIds = getToolGroupIds(segmentationId);\n\n    // Todo: right now we apply the visibility to all tool groups\n    toolGroupIds.forEach(toolGroupId => {\n      segmentationService.setSegmentVisibility(\n        segmentationId,\n        segmentIndex,\n        isVisible,\n        toolGroupId\n      );\n    });\n  };\n\n  const onToggleSegmentLock = (segmentationId, segmentIndex) => {\n    segmentationService.toggleSegmentLocked(segmentationId, segmentIndex);\n  };\n\n  const onToggleSegmentationVisibility = segmentationId => {\n    segmentationService.toggleSegmentationVisibility(segmentationId);\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n    const isVisible = segmentation.isVisible;\n    const segments = segmentation.segments;\n\n    const toolGroupIds = getToolGroupIds(segmentationId);\n\n    toolGroupIds.forEach(toolGroupId => {\n      segments.forEach((segment, segmentIndex) => {\n        segmentationService.setSegmentVisibility(\n          segmentationId,\n          segmentIndex,\n          isVisible,\n          toolGroupId\n        );\n      });\n    });\n  };\n\n  const _setSegmentationConfiguration = useCallback(\n    (segmentationId, key, value) => {\n      segmentationService.setConfiguration({\n        segmentationId,\n        [key]: value,\n      });\n    },\n    [segmentationService]\n  );\n\n  const onSegmentationDownload = segmentationId => {\n    commandsManager.runCommand('downloadSegmentation', {\n      segmentationId,\n    });\n  };\n\n  const storeSegmentation = async segmentationId => {\n    const datasources = extensionManager.getActiveDataSource();\n\n    const displaySetInstanceUIDs = await createReportAsync({\n      servicesManager,\n      getReport: () =>\n        commandsManager.runCommand('storeSegmentation', {\n          segmentationId,\n          dataSource: datasources[0],\n        }),\n      reportType: 'Segmentation',\n    });\n\n    // Show the exported report in the active viewport as read only (similar to SR)\n    if (displaySetInstanceUIDs) {\n      // clear the segmentation that we exported, similar to the storeMeasurement\n      // where we remove the measurements and prompt again the user if they would like\n      // to re-read the measurements in a SR read only viewport\n      segmentationService.remove(segmentationId);\n\n      viewportGridService.setDisplaySetsForViewport({\n        viewportId: viewportGridService.getActiveViewportId(),\n        displaySetInstanceUIDs,\n      });\n    }\n  };\n\n  const onSegmentationDownloadRTSS = segmentationId => {\n    commandsManager.runCommand('downloadRTSS', {\n      segmentationId,\n    });\n  };\n\n  const SegmentationGroupTableComponent =\n    components[configuration?.segmentationPanelMode] || SegmentationGroupTable;\n  const allowAddSegment = configuration?.addSegment;\n  const onSegmentationAddWrapper =\n    configuration?.onSegmentationAdd && typeof configuration?.onSegmentationAdd === 'function'\n      ? configuration?.onSegmentationAdd\n      : onSegmentationAdd;\n\n  return (\n    <SegmentationGroupTableComponent\n      title={t('Segmentations')}\n      segmentations={segmentations}\n      disableEditing={configuration.disableEditing}\n      activeSegmentationId={selectedSegmentationId || ''}\n      onSegmentationAdd={onSegmentationAddWrapper}\n      addSegmentationClassName={addSegmentationClassName}\n      showAddSegment={allowAddSegment}\n      onSegmentationClick={onSegmentationClick}\n      onSegmentationDelete={onSegmentationDelete}\n      onSegmentationDownload={onSegmentationDownload}\n      onSegmentationDownloadRTSS={onSegmentationDownloadRTSS}\n      storeSegmentation={storeSegmentation}\n      onSegmentationEdit={onSegmentationEdit}\n      onSegmentClick={onSegmentClick}\n      onSegmentEdit={onSegmentEdit}\n      onSegmentAdd={onSegmentAdd}\n      onSegmentColorClick={onSegmentColorClick}\n      onSegmentDelete={onSegmentDelete}\n      onToggleSegmentVisibility={onToggleSegmentVisibility}\n      onToggleSegmentLock={onToggleSegmentLock}\n      onToggleSegmentationVisibility={onToggleSegmentationVisibility}\n      showDeleteSegment={true}\n      segmentationConfig={{ initialConfig: segmentationConfiguration }}\n      setRenderOutline={value =>\n        _setSegmentationConfiguration(selectedSegmentationId, 'renderOutline', value)\n      }\n      setOutlineOpacityActive={value =>\n        _setSegmentationConfiguration(selectedSegmentationId, 'outlineOpacity', value)\n      }\n      setRenderFill={value =>\n        _setSegmentationConfiguration(selectedSegmentationId, 'renderFill', value)\n      }\n      setRenderInactiveSegmentations={value =>\n        _setSegmentationConfiguration(selectedSegmentationId, 'renderInactiveSegmentations', value)\n      }\n      setOutlineWidthActive={value =>\n        _setSegmentationConfiguration(selectedSegmentationId, 'outlineWidthActive', value)\n      }\n      setFillAlpha={value =>\n        _setSegmentationConfiguration(selectedSegmentationId, 'fillAlpha', value)\n      }\n      setFillAlphaInactive={value =>\n        _setSegmentationConfiguration(selectedSegmentationId, 'fillAlphaInactive', value)\n      }\n    />\n  );\n}\n\nPanelSegmentation.propTypes = {\n  commandsManager: PropTypes.shape({\n    runCommand: PropTypes.func.isRequired,\n  }),\n  servicesManager: PropTypes.shape({\n    services: PropTypes.shape({\n      segmentationService: PropTypes.shape({\n        getSegmentation: PropTypes.func.isRequired,\n        getSegmentations: PropTypes.func.isRequired,\n        toggleSegmentationVisibility: PropTypes.func.isRequired,\n        subscribe: PropTypes.func.isRequired,\n        EVENTS: PropTypes.object.isRequired,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n","import React from 'react';\n\nimport { useAppConfig } from '@state';\nimport { Toolbox } from '@ohif/ui';\nimport PanelSegmentation from './panels/PanelSegmentation';\n\nconst getPanelModule = ({\n  commandsManager,\n  servicesManager,\n  extensionManager,\n  configuration,\n  title,\n}: withAppTypes) => {\n  const { customizationService } = servicesManager.services;\n\n  const wrappedPanelSegmentation = configuration => {\n    const [appConfig] = useAppConfig();\n\n    return (\n      <PanelSegmentation\n        commandsManager={commandsManager}\n        servicesManager={servicesManager}\n        extensionManager={extensionManager}\n        configuration={{\n          ...configuration,\n          disableEditing: appConfig.disableEditing,\n          ...customizationService.get('segmentation.panel'),\n        }}\n      />\n    );\n  };\n\n  const wrappedPanelSegmentationWithTools = configuration => {\n    const [appConfig] = useAppConfig();\n\n    return (\n      <>\n        <Toolbox\n          commandsManager={commandsManager}\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          buttonSectionId=\"segmentationToolbox\"\n          title=\"Segmentation Tools\"\n          configuration={{\n            ...configuration,\n          }}\n        />\n        <PanelSegmentation\n          commandsManager={commandsManager}\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          configuration={{\n            ...configuration,\n            disableEditing: appConfig.disableEditing,\n            ...customizationService.get('segmentation.panel'),\n          }}\n        />\n      </>\n    );\n  };\n\n  return [\n    {\n      name: 'panelSegmentation',\n      iconName: 'tab-segmentation',\n      iconLabel: 'Segmentation',\n      label: 'Segmentation',\n      component: wrappedPanelSegmentation,\n    },\n    {\n      name: 'panelSegmentationWithTools',\n      iconName: 'tab-segmentation',\n      iconLabel: 'Segmentation',\n      label: 'Segmentation',\n      component: wrappedPanelSegmentationWithTools,\n    },\n  ];\n};\n\nexport default getPanelModule;\n","import { Enums, cache } from '@cornerstonejs/core';\n\n/**\n * Updates the viewports in preparation for rendering segmentations.\n * Evaluates each viewport to determine which need modifications,\n * then for those viewports, changes them to a volume type and ensures\n * they are ready for segmentation rendering.\n *\n * @param {Object} params - Parameters for the function.\n * @param params.viewportId - ID of the viewport to be updated.\n * @param params.loadFn - Function to load the segmentation data.\n * @param params.servicesManager - The services manager.\n * @param params.displaySet -  the display set.\n * @param params.initialSliceIndex - The initial slice index.\n *\n * @returns Returns true upon successful update of viewports for segmentation rendering.\n */\nasync function updateViewportsForSegmentationRendering({\n  viewportId,\n  loadFn,\n  servicesManager,\n  displaySet,\n  initialSliceIndex = null,\n}: {\n  viewportId: string;\n  loadFn: () => Promise<string>;\n  servicesManager: AppTypes.ServicesManager;\n  displaySet?: any;\n  initialSliceIndex?: number;\n}) {\n  const { cornerstoneViewportService, segmentationService, viewportGridService } =\n    servicesManager.services;\n\n  const viewport = getTargetViewport({ viewportId, viewportGridService });\n  const targetViewportId = viewport.viewportOptions.viewportId;\n\n  const referencedDisplaySetInstanceUID =\n    displaySet?.referencedDisplaySetInstanceUID || viewport?.displaySetInstanceUIDs[0];\n\n  const updatedViewports = getUpdatedViewportsForSegmentation({\n    viewportId,\n    servicesManager,\n    displaySet,\n  });\n\n  // create Segmentation callback which needs to be waited until\n  // the volume is created (if coming from stack)\n  const createSegmentationForVolume = async () => {\n    const segmentationId = await loadFn();\n    segmentationService.hydrateSegmentation(segmentationId);\n  };\n\n  // the reference volume that is used to draw the segmentation. so check if the\n  // volume exists in the cache (the target Viewport is already a volume viewport)\n  const volumeExists = Array.from(cache._volumeCache.keys()).some(volumeId =>\n    volumeId.includes(referencedDisplaySetInstanceUID)\n  );\n\n  updatedViewports.forEach(async viewport => {\n    viewport.viewportOptions = {\n      ...viewport.viewportOptions,\n      viewportType: displaySet?.Modality === 'RTSTRUCT' ? 'stack' : 'volume',\n      needsRerendering: true,\n    };\n    const viewportId = viewport.viewportId;\n\n    // maintain the prehydration slice on the target viewport only\n    if (viewportId === targetViewportId) {\n      viewport.viewportOptions.initialImageOptions = {\n        index: initialSliceIndex,\n        useOnce: true,\n      };\n    }\n\n    const csViewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n    const prevCamera = csViewport.getCamera();\n\n    // only run the createSegmentationForVolume for the targetViewportId\n    // since the rest will get handled by cornerstoneViewportService\n    if ((volumeExists || displaySet.Modality === 'RTSTRUCT') && viewportId === targetViewportId) {\n      await createSegmentationForVolume();\n      return;\n    }\n\n    const createNewSegmentationWhenVolumeMounts = async evt => {\n      const isTheActiveViewportVolumeMounted = evt.detail.volumeActors?.find(ac =>\n        ac.uid.includes(referencedDisplaySetInstanceUID)\n      );\n\n      // Note: make sure to re-grab the viewport since it might have changed\n      // during the time it took for the volume to be mounted, for instance\n      // the stack viewport has been changed to a volume viewport\n      const volumeViewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n      volumeViewport.setCamera(prevCamera);\n\n      volumeViewport.element.removeEventListener(\n        Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n        createNewSegmentationWhenVolumeMounts\n      );\n\n      if (!isTheActiveViewportVolumeMounted) {\n        // it means it is one of those other updated viewports so just update the camera\n        return;\n      }\n\n      if (viewportId === targetViewportId) {\n        await createSegmentationForVolume();\n      }\n    };\n\n    csViewport.element.addEventListener(\n      Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n      createNewSegmentationWhenVolumeMounts\n    );\n  });\n\n  // Set the displaySets for the viewports that require to be updated\n  viewportGridService.setDisplaySetsForViewports(updatedViewports);\n\n  return true;\n}\n\nconst getTargetViewport = ({ viewportId, viewportGridService }) => {\n  const { viewports, activeViewportId } = viewportGridService.getState();\n  const targetViewportId = viewportId || activeViewportId;\n\n  const viewport = viewports.get(targetViewportId);\n\n  return viewport;\n};\n\n/**\n * Retrieves a list of viewports that require updates in preparation for segmentation rendering.\n * This function evaluates viewports based on their compatibility with the provided segmentation's\n * frame of reference UID and appends them to the updated list if they should render the segmentation.\n *\n * @param {Object} params - Parameters for the function.\n * @param params.viewportId - the ID of the viewport to be updated.\n * @param params.servicesManager - The services manager\n * @param params.displaySet -  the display set.\n *\n * @returns {Array} Returns an array of viewports that require updates for segmentation rendering.\n */\nfunction getUpdatedViewportsForSegmentation({\n  viewportId,\n  servicesManager,\n  displaySet,\n}: withAppTypes) {\n  const { hangingProtocolService, displaySetService, segmentationService, viewportGridService } =\n    servicesManager.services;\n\n  const { viewports, isHangingProtocolLayout } = viewportGridService.getState();\n\n  const viewport = getTargetViewport({ viewportId, viewportGridService });\n  const targetViewportId = viewport.viewportOptions.viewportId;\n\n  const displaySetInstanceUIDs = viewports.get(targetViewportId).displaySetInstanceUIDs;\n\n  const referenceDisplaySetInstanceUID =\n    displaySet?.referencedDisplaySetInstanceUID || displaySetInstanceUIDs[0];\n\n  const referencedDisplaySet = displaySetService.getDisplaySetByUID(referenceDisplaySetInstanceUID);\n  const segmentationFrameOfReferenceUID = referencedDisplaySet.instances[0].FrameOfReferenceUID;\n\n  const updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\n    targetViewportId,\n    referenceDisplaySetInstanceUID,\n    isHangingProtocolLayout\n  );\n\n  viewports.forEach((viewport, viewportId) => {\n    if (\n      targetViewportId === viewportId ||\n      updatedViewports.find(v => v.viewportId === viewportId)\n    ) {\n      return;\n    }\n\n    const shouldDisplaySeg = segmentationService.shouldRenderSegmentation(\n      viewport.displaySetInstanceUIDs,\n      segmentationFrameOfReferenceUID\n    );\n\n    if (shouldDisplaySeg) {\n      updatedViewports.push({\n        viewportId,\n        displaySetInstanceUIDs: viewport.displaySetInstanceUIDs,\n        viewportOptions: {\n          viewportType: displaySet?.Modality === 'RTSTRUCT' ? 'stack' : 'volume',\n          needsRerendering: true,\n        },\n      });\n    }\n  });\n\n  return updatedViewports.filter(v => v.viewportOptions?.viewportType !== 'volume3d');\n}\n\nexport {\n  updateViewportsForSegmentationRendering,\n  getUpdatedViewportsForSegmentation,\n  getTargetViewport,\n};\n","import dcmjs from 'dcmjs';\nimport { createReportDialogPrompt } from '@ohif/extension-default';\nimport { Types } from '@ohif/core';\nimport { cache, metaData } from '@cornerstonejs/core';\nimport {\n  segmentation as cornerstoneToolsSegmentation,\n  Enums as cornerstoneToolsEnums,\n  utilities,\n} from '@cornerstonejs/tools';\nimport { adaptersRT, helpers, adaptersSEG } from '@cornerstonejs/adapters';\nimport { classes, DicomMetadataStore } from '@ohif/core';\n\nimport vtkImageMarchingSquares from '@kitware/vtk.js/Filters/General/ImageMarchingSquares';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';\n\nimport {\n  updateViewportsForSegmentationRendering,\n  getUpdatedViewportsForSegmentation,\n  getTargetViewport,\n} from './utils/hydrationUtils';\nconst { segmentation: segmentationUtils } = utilities;\n\nconst { datasetToBlob } = dcmjs.data;\n\nconst {\n  Cornerstone3D: {\n    Segmentation: { generateLabelMaps2DFrom3D, generateSegmentation },\n  },\n} = adaptersSEG;\n\nconst {\n  Cornerstone3D: {\n    RTSS: { generateRTSSFromSegmentations },\n  },\n} = adaptersRT;\n\nconst { downloadDICOMData } = helpers;\n\nconst commandsModule = ({\n  servicesManager,\n  extensionManager,\n}: Types.Extensions.ExtensionParams): Types.Extensions.CommandsModule => {\n  const {\n    uiNotificationService,\n    segmentationService,\n    uiDialogService,\n    displaySetService,\n    viewportGridService,\n    toolGroupService,\n    cornerstoneViewportService,\n  } = servicesManager.services;\n\n  const actions = {\n    /**\n     * Retrieves a list of viewports that require updates in preparation for segmentation rendering.\n     * This function evaluates viewports based on their compatibility with the provided segmentation's\n     * frame of reference UID and appends them to the updated list if they should render the segmentation.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.viewportId - the ID of the viewport to be updated.\n     * @param params.servicesManager - The services manager\n     * @param params.referencedDisplaySetInstanceUID - Optional UID for the referenced display set instance.\n     *\n     * @returns {Array} Returns an array of viewports that require updates for segmentation rendering.\n     */\n    getUpdatedViewportsForSegmentation,\n    /**\n     * Creates an empty segmentation for a specified viewport.\n     * It first checks if the display set associated with the viewport is reconstructable.\n     * If not, it raises a notification error. Otherwise, it creates a new segmentation\n     * for the display set after handling the necessary steps for making the viewport\n     * a volume viewport first\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.viewportId - the target viewport ID.\n     *\n     */\n    createEmptySegmentationForViewport: async ({ viewportId }) => {\n      const viewport = getTargetViewport({ viewportId, viewportGridService });\n      // Todo: add support for multiple display sets\n      const displaySetInstanceUID = viewport.displaySetInstanceUIDs[0];\n\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n\n      if (!displaySet.isReconstructable) {\n        uiNotificationService.show({\n          title: 'Segmentation',\n          message: 'Segmentation is not supported for non-reconstructible displaysets yet',\n          type: 'error',\n        });\n        return;\n      }\n\n      updateViewportsForSegmentationRendering({\n        viewportId,\n        servicesManager,\n        displaySet,\n        loadFn: async () => {\n          const currentSegmentations = segmentationService.getSegmentations();\n          const segmentationId = await segmentationService.createSegmentationForDisplaySet(\n            displaySetInstanceUID,\n            { label: `Segmentation ${currentSegmentations.length + 1}` }\n          );\n\n          const toolGroupId = viewport.viewportOptions.toolGroupId;\n\n          await segmentationService.addSegmentationRepresentationToToolGroup(\n            toolGroupId,\n            segmentationId\n          );\n\n          // Add only one segment for now\n          segmentationService.addSegment(segmentationId, {\n            toolGroupId,\n            segmentIndex: 1,\n            properties: {\n              label: 'Segment 1',\n            },\n          });\n\n          return segmentationId;\n        },\n      });\n    },\n    /**\n     * Loads segmentations for a specified viewport.\n     * The function prepares the viewport for rendering, then loads the segmentation details.\n     * Additionally, if the segmentation has scalar data, it is set for the corresponding label map volume.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.segmentations - Array of segmentations to be loaded.\n     * @param params.viewportId - the target viewport ID.\n     *\n     */\n    loadSegmentationsForViewport: async ({ segmentations, viewportId }) => {\n      updateViewportsForSegmentationRendering({\n        viewportId,\n        servicesManager,\n        loadFn: async () => {\n          // Todo: handle adding more than one segmentation\n          const viewport = getTargetViewport({ viewportId, viewportGridService });\n          const displaySetInstanceUID = viewport.displaySetInstanceUIDs[0];\n\n          const segmentation = segmentations[0];\n          const segmentationId = segmentation.id;\n          const label = segmentation.label;\n          const segments = segmentation.segments;\n\n          delete segmentation.segments;\n\n          await segmentationService.createSegmentationForDisplaySet(displaySetInstanceUID, {\n            segmentationId,\n            label,\n          });\n\n          if (segmentation.scalarData) {\n            const labelmapVolume = segmentationService.getLabelmapVolume(segmentationId);\n            labelmapVolume.scalarData.set(segmentation.scalarData);\n          }\n\n          segmentationService.addOrUpdateSegmentation(segmentation);\n\n          const toolGroupId = viewport.viewportOptions.toolGroupId;\n          await segmentationService.addSegmentationRepresentationToToolGroup(\n            toolGroupId,\n            segmentationId\n          );\n\n          segments.forEach(segment => {\n            if (segment === null) {\n              return;\n            }\n            segmentationService.addSegment(segmentationId, {\n              segmentIndex: segment.segmentIndex,\n              toolGroupId,\n              properties: {\n                color: segment.color,\n                label: segment.label,\n                opacity: segment.opacity,\n                isLocked: segment.isLocked,\n                visibility: segment.isVisible,\n                active: segmentation.activeSegmentIndex === segment.segmentIndex,\n              },\n            });\n          });\n\n          if (segmentation.centroidsIJK) {\n            segmentationService.setCentroids(segmentation.id, segmentation.centroidsIJK);\n          }\n\n          return segmentationId;\n        },\n      });\n    },\n    /**\n     * Loads segmentation display sets for a specified viewport.\n     * Depending on the modality of the display set (SEG or RTSTRUCT),\n     * it chooses the appropriate service function to create\n     * the segmentation for the display set.\n     * The function then prepares the viewport for rendering segmentation.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.viewportId - ID of the viewport where the segmentation display sets should be loaded.\n     * @param params.displaySets - Array of display sets to be loaded for segmentation.\n     *\n     */\n    loadSegmentationDisplaySetsForViewport: async ({ viewportId, displaySets }) => {\n      // Todo: handle adding more than one segmentation\n      const displaySet = displaySets[0];\n      const referencedDisplaySet = displaySetService.getDisplaySetByUID(\n        displaySet.referencedDisplaySetInstanceUID\n      );\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n      const initialSliceIndex = viewport.getSliceIndex();\n\n      updateViewportsForSegmentationRendering({\n        viewportId,\n        servicesManager,\n        displaySet,\n        loadFn: async () => {\n          const segDisplaySet = displaySet;\n          const suppressEvents = false;\n          const serviceFunction =\n            segDisplaySet.Modality === 'SEG'\n              ? 'createSegmentationForSEGDisplaySet'\n              : 'createSegmentationForRTDisplaySet';\n\n          const boundFn = segmentationService[serviceFunction].bind(segmentationService);\n          const segmentationId = await boundFn(segDisplaySet, null, suppressEvents);\n          const segmentation = segmentationService.getSegmentation(segmentationId);\n          segmentation.description = `S${referencedDisplaySet.SeriesNumber}: ${referencedDisplaySet.SeriesDescription}`;\n          return segmentationId;\n        },\n        initialSliceIndex,\n      });\n    },\n    /**\n     * Generates a segmentation from a given segmentation ID.\n     * This function retrieves the associated segmentation and\n     * its referenced volume, extracts label maps from the\n     * segmentation volume, and produces segmentation data\n     * alongside associated metadata.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.segmentationId - ID of the segmentation to be generated.\n     * @param params.options - Optional configuration for the generation process.\n     *\n     * @returns Returns the generated segmentation data.\n     */\n    generateSegmentation: ({ segmentationId, options = {} }) => {\n      const segmentation = cornerstoneToolsSegmentation.state.getSegmentation(segmentationId);\n\n      const { referencedVolumeId } = segmentation.representationData.LABELMAP;\n\n      const segmentationVolume = cache.getVolume(segmentationId);\n      const referencedVolume = cache.getVolume(referencedVolumeId);\n      const referencedImages = referencedVolume.getCornerstoneImages();\n\n      const labelmapObj = generateLabelMaps2DFrom3D(segmentationVolume);\n\n      // Generate fake metadata as an example\n      labelmapObj.metadata = [];\n\n      const segmentationInOHIF = segmentationService.getSegmentation(segmentationId);\n      segmentationInOHIF.segments.forEach(segment => {\n        // segmentation service already has a color for each segment\n        if (!segment) {\n          return;\n        }\n        const segmentIndex = segment.segmentIndex;\n        const { label, color } = segment;\n\n        const RecommendedDisplayCIELabValue = dcmjs.data.Colors.rgb2DICOMLAB(\n          color.slice(0, 3).map(value => value / 255)\n        ).map(value => Math.round(value));\n\n        const segmentMetadata = {\n          SegmentNumber: segmentIndex.toString(),\n          SegmentLabel: label,\n          SegmentAlgorithmType: segment?.algorithmType || 'MANUAL',\n          SegmentAlgorithmName: segment?.algorithmName || 'OHIF Brush',\n          RecommendedDisplayCIELabValue,\n          SegmentedPropertyCategoryCodeSequence: {\n            CodeValue: 'T-D0050',\n            CodingSchemeDesignator: 'SRT',\n            CodeMeaning: 'Tissue',\n          },\n          SegmentedPropertyTypeCodeSequence: {\n            CodeValue: 'T-D0050',\n            CodingSchemeDesignator: 'SRT',\n            CodeMeaning: 'Tissue',\n          },\n        };\n        labelmapObj.metadata[segmentIndex] = segmentMetadata;\n      });\n\n      const generatedSegmentation = generateSegmentation(\n        referencedImages,\n        labelmapObj,\n        metaData,\n        options\n      );\n\n      return generatedSegmentation;\n    },\n    /**\n     * Downloads a segmentation based on the provided segmentation ID.\n     * This function retrieves the associated segmentation and\n     * uses it to generate the corresponding DICOM dataset, which\n     * is then downloaded with an appropriate filename.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.segmentationId - ID of the segmentation to be downloaded.\n     *\n     */\n    downloadSegmentation: ({ segmentationId }) => {\n      const segmentationInOHIF = segmentationService.getSegmentation(segmentationId);\n      const generatedSegmentation = actions.generateSegmentation({\n        segmentationId,\n      });\n\n      downloadDICOMData(generatedSegmentation.dataset, `${segmentationInOHIF.label}`);\n    },\n    /**\n     * Stores a segmentation based on the provided segmentationId into a specified data source.\n     * The SeriesDescription is derived from user input or defaults to the segmentation label,\n     * and in its absence, defaults to 'Research Derived Series'.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.segmentationId - ID of the segmentation to be stored.\n     * @param params.dataSource - Data source where the generated segmentation will be stored.\n     *\n     * @returns {Object|void} Returns the naturalized report if successfully stored,\n     * otherwise throws an error.\n     */\n    storeSegmentation: async ({ segmentationId, dataSource }) => {\n      const promptResult = await createReportDialogPrompt(uiDialogService, {\n        extensionManager,\n      });\n\n      if (promptResult.action !== 1 && promptResult.value) {\n        return;\n      }\n\n      const segmentation = segmentationService.getSegmentation(segmentationId);\n\n      if (!segmentation) {\n        throw new Error('No segmentation found');\n      }\n\n      const { label } = segmentation;\n      const SeriesDescription = promptResult.value || label || 'Research Derived Series';\n\n      const generatedData = actions.generateSegmentation({\n        segmentationId,\n        options: {\n          SeriesDescription,\n        },\n      });\n\n      if (!generatedData || !generatedData.dataset) {\n        throw new Error('Error during segmentation generation');\n      }\n\n      const { dataset: naturalizedReport } = generatedData;\n\n      await dataSource.store.dicom(naturalizedReport);\n\n      // The \"Mode\" route listens for DicomMetadataStore changes\n      // When a new instance is added, it listens and\n      // automatically calls makeDisplaySets\n\n      // add the information for where we stored it to the instance as well\n      naturalizedReport.wadoRoot = dataSource.getConfig().wadoRoot;\n\n      DicomMetadataStore.addInstances([naturalizedReport], true);\n\n      return naturalizedReport;\n    },\n    /**\n     * Converts segmentations into RTSS for download.\n     * This sample function retrieves all segentations and passes to\n     * cornerstone tool adapter to convert to DICOM RTSS format. It then\n     * converts dataset to downloadable blob.\n     *\n     */\n    downloadRTSS: ({ segmentationId }) => {\n      const segmentations = segmentationService.getSegmentation(segmentationId);\n      const vtkUtils = {\n        vtkImageMarchingSquares,\n        vtkDataArray,\n        vtkImageData,\n      };\n\n      const RTSS = generateRTSSFromSegmentations(\n        segmentations,\n        classes.MetadataProvider,\n        DicomMetadataStore,\n        cache,\n        cornerstoneToolsEnums,\n        vtkUtils\n      );\n\n      try {\n        const reportBlob = datasetToBlob(RTSS);\n\n        //Create a URL for the binary.\n        const objectUrl = URL.createObjectURL(reportBlob);\n        window.location.assign(objectUrl);\n      } catch (e) {\n        console.warn(e);\n      }\n    },\n    setBrushSize: ({ value, toolNames }) => {\n      const brushSize = Number(value);\n\n      toolGroupService.getToolGroupIds()?.forEach(toolGroupId => {\n        if (toolNames?.length === 0) {\n          segmentationUtils.setBrushSizeForToolGroup(toolGroupId, brushSize);\n        } else {\n          toolNames?.forEach(toolName => {\n            segmentationUtils.setBrushSizeForToolGroup(toolGroupId, brushSize, toolName);\n          });\n        }\n      });\n    },\n    setThresholdRange: ({\n      value,\n      toolNames = ['ThresholdCircularBrush', 'ThresholdSphereBrush'],\n    }) => {\n      toolGroupService.getToolGroupIds()?.forEach(toolGroupId => {\n        const toolGroup = toolGroupService.getToolGroup(toolGroupId);\n        toolNames?.forEach(toolName => {\n          toolGroup.setToolConfiguration(toolName, {\n            strategySpecificConfiguration: {\n              THRESHOLD: {\n                threshold: value,\n              },\n            },\n          });\n        });\n      });\n    },\n  };\n\n  const definitions = {\n    getUpdatedViewportsForSegmentation: {\n      commandFn: actions.getUpdatedViewportsForSegmentation,\n    },\n    loadSegmentationDisplaySetsForViewport: {\n      commandFn: actions.loadSegmentationDisplaySetsForViewport,\n    },\n    loadSegmentationsForViewport: {\n      commandFn: actions.loadSegmentationsForViewport,\n    },\n    createEmptySegmentationForViewport: {\n      commandFn: actions.createEmptySegmentationForViewport,\n    },\n    generateSegmentation: {\n      commandFn: actions.generateSegmentation,\n    },\n    downloadSegmentation: {\n      commandFn: actions.downloadSegmentation,\n    },\n    storeSegmentation: {\n      commandFn: actions.storeSegmentation,\n    },\n    downloadRTSS: {\n      commandFn: actions.downloadRTSS,\n    },\n    setBrushSize: {\n      commandFn: actions.setBrushSize,\n    },\n    setThresholdRange: {\n      commandFn: actions.setThresholdRange,\n    },\n  };\n\n  return {\n    actions,\n    definitions,\n    defaultContext: 'SEGMENTATION',\n  };\n};\n\nexport default commandsModule;\n","import { id } from './id';\nimport React from 'react';\n\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\nimport getHangingProtocolModule from './getHangingProtocolModule';\nimport getPanelModule from './getPanelModule';\nimport getCommandsModule from './commandsModule';\nimport { getToolbarModule } from './getToolbarModule';\n\nconst Component = React.lazy(() => {\n  return import(/* webpackPrefetch: true */ './viewports/OHIFCornerstoneSEGViewport');\n});\n\nconst OHIFCornerstoneSEGViewport = props => {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </React.Suspense>\n  );\n};\n\n/**\n * You can remove any of the following modules if you don't need them.\n */\nconst extension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   * You ID can be anything you want, but it should be unique.\n   */\n  id,\n  /**\n   * PanelModule should provide a list of panels that will be available in OHIF\n   * for Modes to consume and render. Each panel is defined by a {name,\n   * iconName, iconLabel, label, component} object. Example of a panel module\n   * is the StudyBrowserPanel that is provided by the default extension in OHIF.\n   */\n  getPanelModule,\n  getCommandsModule,\n  getToolbarModule,\n  getViewportModule({ servicesManager, extensionManager, commandsManager }) {\n    const ExtendedOHIFCornerstoneSEGViewport = props => {\n      return (\n        <OHIFCornerstoneSEGViewport\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          commandsManager={commandsManager}\n          {...props}\n        />\n      );\n    };\n\n    return [{ name: 'dicom-seg', component: ExtendedOHIFCornerstoneSEGViewport }];\n  },\n  /**\n   * SopClassHandlerModule should provide a list of sop class handlers that will be\n   * available in OHIF for Modes to consume and use to create displaySets from Series.\n   * Each sop class handler is defined by a { name, sopClassUids, getDisplaySetsFromSeries}.\n   * Examples include the default sop class handler provided by the default extension\n   */\n  getSopClassHandlerModule,\n  getHangingProtocolModule,\n};\n\nexport default extension;\n","export function getToolbarModule({ servicesManager }: withAppTypes) {\n  const { segmentationService, toolbarService, toolGroupService } = servicesManager.services;\n  return [\n    {\n      name: 'evaluate.cornerstone.segmentation',\n      evaluate: ({ viewportId, button, toolNames, disabledText }) => {\n        // Todo: we need to pass in the button section Id since we are kind of\n        // forcing the button to have black background since initially\n        // it is designed for the toolbox not the toolbar on top\n        // we should then branch the buttonSectionId to have different styles\n        const segmentations = segmentationService.getSegmentations();\n        if (!segmentations?.length) {\n          return {\n            disabled: true,\n            className: '!text-common-bright !bg-black opacity-50',\n            disabledText: disabledText ?? 'No segmentations available',\n          };\n        }\n\n        const toolGroup = toolGroupService.getToolGroupForViewport(viewportId);\n\n        if (!toolGroup) {\n          return {\n            disabled: true,\n            className: '!text-common-bright ohif-disabled',\n            disabledText: disabledText ?? 'Not available on the current viewport',\n          };\n        }\n\n        const toolName = toolbarService.getToolNameForButton(button);\n\n        if (!toolGroup.hasTool(toolName) && !toolNames) {\n          return {\n            disabled: true,\n            className: '!text-common-bright ohif-disabled',\n            disabledText: disabledText ?? 'Not available on the current viewport',\n          };\n        }\n\n        const isPrimaryActive = toolNames\n          ? toolNames.includes(toolGroup.getActivePrimaryMouseButtonTool())\n          : toolGroup.getActivePrimaryMouseButtonTool() === toolName;\n\n        return {\n          disabled: false,\n          className: isPrimaryActive\n            ? '!text-black !bg-primary-light hover:bg-primary-light hover-text-black hover:cursor-pointer'\n            : '!text-common-bright !bg-black hover:bg-primary-light hover:cursor-pointer hover:text-black',\n          // Todo: isActive right now is used for nested buttons where the primary\n          // button needs to be fully rounded (vs partial rounded) when active\n          // otherwise it does not have any other use\n          isActive: isPrimaryActive,\n        };\n      },\n    },\n  ];\n}\n"],"names":["id","packageJson","SOPClassHandlerId","sopClassUids","loadPromises","_getDisplaySetsFromSeries","instances","servicesManager","extensionManager","instance","StudyInstanceUID","SeriesInstanceUID","SOPInstanceUID","SeriesDescription","SeriesNumber","SeriesDate","SOPClassUID","wadoRoot","wadoUri","wadoUriRoot","displaySet","Modality","loading","isReconstructable","displaySetInstanceUID","utils","guid","referencedImages","referencedSeriesInstanceUID","referencedDisplaySetInstanceUID","isDerivedDisplaySet","isLoaded","isHydrated","segments","isOverlayDisplaySet","referencedSeriesSequence","ReferencedSeriesSequence","console","error","referencedSeries","ReferencedInstanceSequence","getReferenceDisplaySet","displaySetService","services","referencedDisplaySets","getDisplaySetsForSeries","length","Error","referencedDisplaySet","referencedVolumeURI","referencedVolumeId","load","async","headers","segDisplaySet","segmentationService","getSegmentation","_segmentationExists","Promise","resolve","reject","Object","keys","utilityModule","getModuleEntry","uiNotificationService","dicomLoaderService","exports","arrayBuffer","findDicomDataPromise","cachedReferencedVolume","cache","getVolume","imageIds","tolerance","skipOverlapping","eventTarget","addEventListener","Enums","Events","SEGMENTATION_LOAD_PROGRESS","evt","percentComplete","detail","_broadcastEvent","EVENTS","SEGMENT_LOADING_COMPLETE","results","adaptersSEG","Cornerstone3D","Segmentation","generateToolState","metaData","triggerEvent","usedRecommendedDisplayCIELabValue","segMetadata","data","forEach","i","cielab","rgba","RecommendedDisplayCIELabValue","dcmjs","Colors","dicomlab2RGB","map","x","Math","round","CONSTANTS","overlappingSegments","show","title","message","type","duration","assign","_loadSegments","suppressEvents","createSegmentationForSEGDisplaySet","then","catch","_load","name","getDisplaySetsFromSeries","segProtocol","protocolMatchingRules","toolGroupIds","numberOfPriorsReferenced","defaultViewport","viewportOptions","viewportType","toolGroupId","allowUnmatchedView","displaySets","matchedDisplaySetsIndex","displaySetSelectors","segDisplaySetId","seriesMatchingRules","attribute","constraint","equals","stages","viewportStructure","layoutType","properties","rows","columns","viewports","protocol","SegmentationPanelMode","uiDialogService","label","callback","dialogId","onSubmitHandler","action","value","dismiss","create","centralize","isDraggable","showOverlay","content","Dialog","contentProps","noCloseButton","onClose","actions","text","ButtonEnums","secondary","primary","onSubmit","body","setValue","React","Input","labelClassName","autoFocus","className","onChange","event","persist","target","onKeyPress","key","rgbaColor","ChromePicker","color","rgb","presetColors","width","components","Expanded","SegmentationGroupTableExpanded","Dropdown","SegmentationGroupTable","PanelSegmentation","commandsManager","configuration","viewportGridService","cornerstoneViewportService","t","useTranslation","selectedSegmentationId","setSelectedSegmentationId","useState","addSegmentationClassName","setAddSegmentationClassName","segmentationConfiguration","setSegmentationConfiguration","getConfiguration","segmentations","setSegmentations","getSegmentations","useEffect","added","SEGMENTATION_ADDED","updated","SEGMENTATION_UPDATED","removed","SEGMENTATION_REMOVED","subscriptions","unsubscribe","subscribe","push","unsub","handleActiveViewportChange","viewportId","displaySetUIDs","getDisplaySetsUIDsForViewport","getActiveViewportId","some","displaySetUID","getDisplaySetByUID","changedGrid","ACTIVE_VIEWPORT_ID_CHANGED","ready","VIEWPORTS_READY","subsGrid","changedData","VIEWPORT_DATA_CHANGED","subsData","getToolGroupIds","segmentationId","getToolGroupIdsWithSegmentation","_setSegmentationConfiguration","useCallback","setConfiguration","SegmentationGroupTableComponent","segmentationPanelMode","allowAddSegment","addSegment","onSegmentationAddWrapper","onSegmentationAdd","runCommand","disableEditing","activeSegmentationId","showAddSegment","onSegmentationClick","setActiveSegmentationForToolGroup","onSegmentationDelete","remove","onSegmentationDownload","onSegmentationDownloadRTSS","storeSegmentation","datasources","getActiveDataSource","displaySetInstanceUIDs","createReportAsync","getReport","dataSource","reportType","setDisplaySetsForViewport","onSegmentationEdit","segmentation","callInputDialog","actionId","addOrUpdateSegmentation","onSegmentClick","segmentIndex","setActiveSegment","jumpToSegmentCenter","onSegmentEdit","segment","setSegmentLabel","onSegmentAdd","onSegmentColorClick","opacity","r","g","b","a","callColorPickerDialog","newRgbaColor","setSegmentRGBAColor","onSegmentDelete","removeSegment","onToggleSegmentVisibility","isVisible","setSegmentVisibility","onToggleSegmentLock","toggleSegmentLocked","onToggleSegmentationVisibility","toggleSegmentationVisibility","showDeleteSegment","segmentationConfig","initialConfig","setRenderOutline","setOutlineOpacityActive","setRenderFill","setRenderInactiveSegmentations","setOutlineWidthActive","setFillAlpha","setFillAlphaInactive","propTypes","PropTypes","isRequired","getPanelModule","customizationService","iconName","iconLabel","component","appConfig","useAppConfig","get","Toolbox","buttonSectionId","updateViewportsForSegmentationRendering","loadFn","initialSliceIndex","viewport","getTargetViewport","targetViewportId","updatedViewports","getUpdatedViewportsForSegmentation","createSegmentationForVolume","hydrateSegmentation","volumeExists","Array","from","_volumeCache","volumeId","includes","needsRerendering","initialImageOptions","index","useOnce","csViewport","getCornerstoneViewport","prevCamera","getCamera","createNewSegmentationWhenVolumeMounts","isTheActiveViewportVolumeMounted","volumeActors","find","ac","uid","volumeViewport","setCamera","element","removeEventListener","VOLUME_VIEWPORT_NEW_VOLUME","setDisplaySetsForViewports","activeViewportId","getState","hangingProtocolService","isHangingProtocolLayout","referenceDisplaySetInstanceUID","segmentationFrameOfReferenceUID","FrameOfReferenceUID","getViewportsRequireUpdate","v","shouldRenderSegmentation","filter","segmentationUtils","utilities","datasetToBlob","generateLabelMaps2DFrom3D","generateSegmentation","RTSS","generateRTSSFromSegmentations","adaptersRT","downloadDICOMData","helpers","commandsModule","toolGroupService","createEmptySegmentationForViewport","currentSegmentations","createSegmentationForDisplaySet","addSegmentationRepresentationToToolGroup","loadSegmentationsForViewport","scalarData","getLabelmapVolume","set","isLocked","visibility","active","activeSegmentIndex","centroidsIJK","setCentroids","loadSegmentationDisplaySetsForViewport","getSliceIndex","serviceFunction","boundFn","bind","description","options","cornerstoneToolsSegmentation","representationData","LABELMAP","segmentationVolume","getCornerstoneImages","labelmapObj","metadata","rgb2DICOMLAB","slice","segmentMetadata","SegmentNumber","toString","SegmentLabel","SegmentAlgorithmType","algorithmType","SegmentAlgorithmName","algorithmName","SegmentedPropertyCategoryCodeSequence","CodeValue","CodingSchemeDesignator","CodeMeaning","SegmentedPropertyTypeCodeSequence","downloadSegmentation","segmentationInOHIF","generatedSegmentation","dataset","promptResult","createReportDialogPrompt","generatedData","naturalizedReport","store","dicom","getConfig","DicomMetadataStore","addInstances","downloadRTSS","vtkUtils","vtkImageMarchingSquares","vtkDataArray","vtkImageData","classes","MetadataProvider","cornerstoneToolsEnums","reportBlob","objectUrl","URL","createObjectURL","window","location","e","warn","setBrushSize","toolNames","brushSize","Number","setBrushSizeForToolGroup","toolName","setThresholdRange","toolGroup","getToolGroup","setToolConfiguration","strategySpecificConfiguration","THRESHOLD","threshold","definitions","commandFn","defaultContext","Component","OHIFCornerstoneSEGViewport","props","fallback","getCommandsModule","getToolbarModule","toolbarService","evaluate","button","disabledText","disabled","getToolGroupForViewport","getToolNameForButton","hasTool","isPrimaryActive","getActivePrimaryMouseButtonTool","isActive","getViewportModule","_extends","getSopClassHandlerModule","getHangingProtocolModule"],"sourceRoot":""}