{"version":3,"file":"5113.bundle.6ea5fa8c16002bca5666.js","mappings":"uLAGA,MAOMA,EAAcA,KAClB,MAAMC,EAAQC,EAAAA,EAAmBC,QAAQ,SACzC,OAAOC,OAAOH,EAAM,E,SCPtB,SAASI,EAAYC,GACnB,OAAKA,GACI,EASX,CAcA,SAASC,EAAMC,GACb,OAAOA,SAAqCA,GAAKC,OAAS,CAC5D,CAOA,SAASC,EAAQC,GACf,OAAOA,SAAyCA,GAAOF,OAAS,CAClE,CAgCA,SAASG,EAAMC,GACb,OAAOA,SAAqCA,EAAM,CACpD,CCrEA,MAAMC,EAAW,gCACJC,EAAiB,sCAEjBC,EAAM,CACjBC,IAAKC,MAAOZ,EAAaa,KACvB,MAAMlB,EAAQD,IACdoB,QAAQC,IAAIpB,GACZK,EAAMD,EAAYC,GAClB,MAAMgB,EAAS,CACbC,QAAS,CACPC,MAAOvB,GAETkB,UAEF,OAAOM,IAAAA,IAAUnB,EAAKgB,EAAO,EAG/BI,KAAMR,MAAOZ,EAAaqB,EAAeJ,EAAU,CAAC,KAClD,MAAMtB,EAAQD,IACRsB,EAAS,CACbM,OAAQ,OACRtB,IAAKD,EAAYC,GACjBiB,QAAS,IACJA,EACHC,MAAOvB,GAET4B,KAAMF,GAER,OAAOF,IAAMH,EAAO,EAEtBQ,IAAKZ,MAAOZ,EAAaa,EAAaI,EAAU,CAAC,KAC/C,MAAMtB,EAAQD,IACRsB,EAAS,CACbM,OAAQ,MACRtB,IAAKD,EAAYC,GACjBiB,QAAS,IACJA,EACHC,MAAOvB,GAET4B,KAAMV,GAER,OAAOM,IAAMH,EAAO,EAEtBS,OAAQb,MAAOZ,EAAaa,EAAaI,EAAU,CAAC,KAClD,MAAMtB,EAAQD,IACRsB,EAAS,CACbM,OAAQ,SACRtB,IAAKD,EAAYC,GACjBiB,QAAS,IACJA,EACHC,MAAOvB,GAET4B,KAAMV,GAER,OAAOM,IAAMH,EAAO,EAEtBU,UAAW,CACTC,OAAQ,CACNhB,IAAKH,EAAW,+BAElBoB,gBAAiB,CACfjB,IAAK,CACHkB,GAAIrB,EAAW,2BACfsB,YAAatB,EAAW,+BACxBuB,QAASvB,EAAW,wCAEtBwB,OAAQxB,EAAW,kCACnByB,UAAWzB,EAAW,gCAExB0B,OAAQ,CACNC,MAAO3B,EAAW,kBAClB4B,SAAU5B,EAAW,mBAEvB6B,SAAU,CACR1B,IAAKH,EAAW,aAElB8B,UAAW,CACT3B,IAAKH,EAAW,aAChB+B,gBAAiB/B,EAAW,6BAE9BgC,MAAO,CACLN,OAAQ1B,EAAW,uBAErBiC,SAAU,CACRC,0BAA2BlC,EAAW,gDAExCmC,cAAe,CACbC,OAAQpC,EAAW,wCACnBG,IAAKH,EAAW,iCAChBwB,OAAQxB,EAAW,yCAErBqC,UAAWrC,EAAW,uBC9BbsC,EAA6C,CACxDC,OAAQ,GACRN,SAAU,CAAEO,SAAU,GAAIC,SAAU,GAAIC,YAAa,GAAIC,MAAO,GAAIC,YAAa,GAAIC,MAAO,GAC5FC,UAAW,GACXC,QAAS,GACTC,IAAK,EACLC,YAAa,EACbC,UAAW,EACXC,YAAa,GACbC,UAAW,EACXC,gBAAiB,EACjBC,YAAa,GACbC,iBAAkB,GAClBd,SAAU,GACVD,SAAU,GACVgB,WAAY,GACZC,uBAAwB,EACxBC,sBAAuB,GACvBC,IAAK,GACLC,UAAW,EACXC,YAAa,GACbC,QAAS,EACTC,OAAQ,GACRC,YAAa,EACb3C,GAAI,EACJ4C,gBAAiB,GACjBC,aAAc,GACdC,iBAAkB,GAClBC,WAAY,GACZC,cAAe,GACfxC,SAAU,GACVe,YAAa,EACb0B,cAAe,GACfC,WAAY,EACZC,eAAgB,GAChBC,aAAc,GACdC,kBAAmB,EACnBC,iBAAkB,GAClBC,0BAA2B,GAC3BC,cAAe,GACfC,eAAgB,EAChBC,SAAU,GACVC,uBAAmBC,EACnBC,mBAAoB,EACpBC,cAAe,GACfC,aAAc,GACdC,WAAY,GACZvD,UAAW,GACXwD,aAAc,EACdC,kBAAcN,G,eC7GhB,SAASO,EAAiBC,GACxBC,EAAAA,GAAMC,QAAQF,EAAS,CACrBG,SAAU,aAEd,CAEA,SAASC,EAAeJ,GACtBC,EAAAA,GAAMI,MAAML,EAAS,CACnBG,SAAU,aAEd,C,wBCNA,MAmBA,EAnB2DG,EAAGpD,QAAOqD,WAAUC,OAAMC,WAEjFC,EAAAA,cAAA,OAAKC,UAAU,+BACbD,EAAAA,cAAA,OAAKC,UAAU,WACbD,EAAAA,cAAA,MACED,MAAOA,EACPE,UAAWC,IACT,sDACAJ,GAAQ,cAGTtD,IAGLwD,EAAAA,cAAA,OAAKC,UAAU,4CAA4CJ,ICAjE,EAjBgDM,EAC9CC,WACA1D,QACA2D,cAAc,cACdC,OAAO,UAGLN,EAAAA,cAAA,SACEM,KAAMA,EACNL,UAAU,oHACVvD,MAAOA,EACP0D,SAAUA,EACVC,YAAaA,I,eCFnB,MA4GA,EA5GsEE,EACpE/D,QACAE,QACA8D,WACAC,YACAC,UACAZ,WAEA,MAAMa,GAAWC,EAAAA,EAAAA,QAAY,MAwD7B,OACEZ,EAAAA,cAAA,OAAKC,UAAU,iBACbD,EAAAA,cAAA,MACEC,UAAWC,IACT,yCACAJ,GAAQ,4BAGTtD,GAEHwD,EAAAA,cAAA,OAAKC,UAAU,oDACbD,EAAAA,cAAA,SACEa,IAAKF,EACLL,KAAK,OACLQ,OAAO,oBACPC,KAAK,OACLd,UAAU,SACVG,SAtESnG,UACf,MAAM+G,EAAOC,GAAOC,QAAQC,MAAM,GAClC,IAAKH,EAEH,YADAtB,EAAe,gBAIjB,MAAM0B,EAAOJ,EAAKI,KAAO,QAEzB,GAAIA,GAAQ,EAEV,YADA1B,EAAe,4BAGjB,GAAI0B,EAAO,EAET,YADA1B,EAAe,qEAIjB,MAAMY,EAAOU,EAAKV,KACZ5F,EAAW,IAAI2G,SACrB3G,EAAS4G,OAAO,OAAQN,GAExB,IACE,IAAIO,EAEFA,EADW,oBAATjB,EACQ,GAAGvG,EAAIgB,UAAUQ,OAAOE,aAExB,GAAG1B,EAAIgB,UAAUQ,OAAOC,UAGpC,MAAMlB,EAAU,CACd,eAAgB,wBAGVkH,OAAQC,EAAW7G,KAAM8G,SAAkB3H,EAAIU,KAAK8G,EAAS7G,EAAUJ,GAE/E,GAAkB,MAAdmH,EAAmB,CACrB,MAAM,WAAEE,EAAU,KAAE/G,GAAc8G,EACf,MAAfC,GACFnB,EAAS5F,EAEb,MACE8E,EAAe,wBAEnB,CAAE,MAAOC,GACPD,EAAe,2CACjB,KA0BIM,EAAAA,cAAA,SACE4B,QAASA,IAAMjB,GAAUkB,SAASC,QAClC7B,UAAU,gDACX,gBAIHD,EAAAA,cAAA,KAAGC,UAAU,iDAAgD,yBAC5D3G,EAAMoD,IACLsD,EAAAA,cAAA,KACE+B,MAjCQ1I,EAiCKqD,EClCvB,SAAoBsF,GAClB,IAEE,OADA,IAAIC,IAAID,IACD,CACT,CAAE,MAAOE,GACP,OAAO,CACT,CACF,CDLWC,CAAW9I,GAAOA,EAAM,GAAGS,KAAkBT,KAiC9C4G,UAAU,qHACViB,OAAO,SACPkB,IAAI,cACL,aAIF1B,GAAWD,GAAatH,OAAOsH,IAAYjH,OAAS,GACnDwG,EAAAA,cAAA,QAAMC,UAAU,wBAAwB9G,OAAOsH,KA1CrCpH,KA4CR,EE7CV,EAnEkDgJ,EAAGC,gBAAgB,GAAIlC,eACvE,MAAOmC,EAASC,IAAcC,EAAAA,EAAAA,UAAgB,IAExCC,EAAkBC,IACtB,MAAMvG,EAASuG,EAAOC,KAAIC,GACjBA,EAAK7B,OAEdZ,EAAShE,EAAO,EAgClB,OAXA0G,EAAAA,EAAAA,YAAU,KACR,IAAKrJ,EAAQ8I,IAAY9I,EAAQ6I,GAAgB,CAC/C,MAAMS,EAAMT,EAAcM,KAAI,CAACI,EAAKC,KAAU,CAC5C/H,GAAIgI,KAAKC,MAAQF,EACjBjC,KAAMgC,MAERR,EAAWO,EACb,IAEC,CAACT,IAGFtC,EAAAA,cAAA,OAAKC,UAAU,wBAAwBF,MAAO,CAAEqD,IAAK,SAClDb,EAAQK,KAAI,CAACrH,EAAQ0H,IACpBjD,EAAAA,cAAA,OAAKqD,IAAK9H,EAAOL,GAAI+E,UAAU,WAAWF,MAAO,CAAEN,SAAU,aAC3DO,EAAAA,cAACO,EAAiB,CAChB/D,MAAO,UAAUyG,EAAQ,IACzBvG,MAAOnB,EAAOyF,KACdR,SAAU9D,GAhCE4G,EAACpI,EAAYwB,KACjC,MAAM6G,EAAiBhB,EAAQK,KAAIrH,GACjCA,EAAOL,KAAOA,EAAK,IAAKK,EAAQyF,KAAMtE,GAAUnB,IAElDiH,EAAWe,GACXb,EAAea,EAAe,EA2BHD,CAAc/H,EAAOL,GAAIwB,KAE9CsD,EAAAA,cAACwD,EAAAA,IAAS,CACRzD,MAAO,CAAEN,SAAU,WAAYgE,MAAO,OAAQC,IAAK,SACnDzD,UAAU,iEACVmB,KAAM,GACNQ,QAASA,IA9BS1G,KAC1B,MAAMyH,EAASJ,EAAQI,QAAOpH,GAAUA,EAAOL,KAAOA,IACtDsH,EAAWG,GACXD,EAAeC,EAAO,EA2BCgB,CAAmBpI,EAAOL,SAI/C8E,EAAAA,cAAA,UACEC,UAAU,gDACV2B,QAhDkBgC,KACtBpB,EAAW,IAAID,EAAS,CAAErH,GAAIgI,KAAKC,MAAOnC,KAAM,KAAM,EAgDlDjB,MAAO,CAAE8D,gBAAiB,UAAWC,OAAQ,gBAC9C,UAGG,E,eC7DV,MAmDA,EAnDyCC,EAAGvH,QAAOE,QAAO8D,WAAUwD,cAClE,MAuBOC,EAAUC,IAAezB,EAAAA,EAAAA,UAAS,CACvC/F,MAAO,GACPF,MAAOA,EACP2H,MAAO,UAYT,OATArB,EAAAA,EAAAA,YAAU,KACR,MAAMD,EAAOmB,EAAQI,MAAKvB,GAAQA,EAAKnG,QAAUA,IAE/CwH,EADErB,QACUA,EAEA,CAAEsB,MAAO,GAAI3H,MAAOA,EAAOE,MAAO,IAChD,GAEC,CAACsH,EAAStH,IAEXsD,EAAAA,cAACqE,EAAAA,GAAM,CACL3H,MAAOuH,EACPK,OAzCsF,CACxFC,OAAQC,IACC,IACFA,EACHL,MAAO,UAGXM,UAAWD,IACF,IACFA,EACHE,MAAO,OACPb,gBAAiB,UAGrBc,YAAaC,IACJ,IACFA,EACHC,YAAa,OACbC,aAAc,UAwBhB1E,SAAUyC,GAAQrC,EAASqC,GAC3BmB,QAASA,EACT/D,UAAU,4CACVI,YAAa7D,GACb,E,mECvCN,MAqCA,EArC0CuI,EAAGrI,QAAO8D,WAAUwE,UAASC,QAAOC,oBAC5E,MAAOC,EAAQC,IAAa3C,EAAAA,EAAAA,WAAS,IAE9B4C,EAAYC,IAAiB7C,EAAAA,EAAAA,UAAS8C,mBAAmB7I,IAYhE,OAJAoG,EAAAA,EAAAA,YAAU,KACRwC,EAAcC,mBAAmB7I,GAAO,GACvC,CAACA,IAGFsD,EAAAA,cAAA,OAAKC,UAAU,QACbD,EAAAA,cAAA,OAAKC,UAAU,gDACbD,EAAAA,cAAA,MAAIC,UAAU,0BAA0BgF,GACxCjF,EAAAA,cAAA,WACGkF,IAAkBC,GACjBnF,EAAAA,cAACwF,EAAAA,IAAM,CAACvF,UAAU,iBAAiBmB,KAAM,GAAIQ,QAASA,IAAMwD,GAAU,KAEvEF,GAAiBC,GAChBnF,EAAAA,cAACyF,EAAAA,IAAK,CAACxF,UAAU,gBAAgBmB,KAAM,GAAIQ,QAASA,IAAMwD,GAAU,OAIzED,GAAUD,EACTlF,EAAAA,cAAC0F,IAAU,CAACtF,SAxBKuF,IACrBA,EAAOC,EAAAA,EAAUC,SAASF,GAC1BL,EAAcK,GACdnF,EAASwE,EAASc,mBAAmBH,GAAM,EAqBF1F,UAAU,aAAavD,MAAO2I,IAEnErF,EAAAA,cAAA,OAAKC,UAAU,aAAa8F,wBAAyB,CAAEC,OAAQX,KAE7D,E,eCjDK,SAASY,IACtB,MAAMC,GAAWC,EAAAA,EAAAA,OACVnN,EAAOoN,IAAY3D,EAAAA,EAAAA,UAAwB,OAC3C4D,EAAUC,IAAe7D,EAAAA,EAAAA,UAAwB,MAgBxD,OAdAK,EAAAA,EAAAA,YAAU,KACR,MAAM5I,EAAS,IAAIqM,gBAAgBL,EAASM,QACtCC,EAASvM,EAAOF,IAAI,UAC1B,GAAIV,EAAMmN,GAAS,CACjB,MAAMC,EAAgBnB,mBAAmBkB,GZV1BzN,KACZC,EAAAA,EAAmB0N,QAAQ,QAAS3N,EAAM,EYU7C4N,CAAYF,GACZN,EAASM,EACX,CACA,MAAMG,EAAY3M,EAAOF,IAAI,YACzBV,EAAMuN,IACRP,EAAYQ,OAAOD,GACrB,GACC,CAACX,EAASM,SAEN,CAAExN,QAAOqN,WAClB,CCcA,MAAMU,EAAYA,EAAGvK,QAAOE,WAExBsD,EAAAA,cAAA,OAAKC,UAAU,oBACbD,EAAAA,cAACJ,EAAU,CAACpD,MAAOA,GACjBwD,EAAAA,cAAA,KAAGC,UAAU,kCAAkCvD,KAMjDsK,EAAwB,CAC5B,CAAExK,MAAO,uBAAwBE,MAAO,GAAIyH,MAAO,SACnD,CAAE3H,MAAO,SAAUE,MAAO,SAAUyH,MAAO,SAC3C,CAAE3H,MAAO,WAAYE,MAAO,WAAYyH,MAAO,UA8cjD,EA3cyB8C,KACvB,MAAM,MAAEjO,EAAK,SAAEqN,GAAaJ,KACtB,OAAEiB,EAAM,cAAEC,EAAa,aAAEC,IAAiBC,EAAAA,EAAAA,IAAU,CACxDC,cAAenL,EACfoL,SAAUtN,gBACFuN,EAA4BtN,EAAO,IAIvCuN,EAA6C,CACjD,CAAEC,YAAa,uBAAwBC,SAAU,mBAAoBC,YAAY,GACjF,CAAEF,YAAa,YAAaC,SAAU,aAAcC,YAAY,GAChE,CAAEF,YAAa,WAAYC,SAAU,WAAYC,YAAY,GAC7D,CAAEF,YAAa,cAAeC,SAAU,aAAcC,YAAY,GAClE,CAAEF,YAAa,WAAYC,SAAU,WAAYC,YAAY,KAExDC,EAAYC,IAAiBrF,EAAAA,EAAAA,UAAgB,KAC7CsF,EAAWC,IAAgBvF,EAAAA,EAAAA,UAAgB,KAC3CwF,EAAWC,IAAgBzF,EAAAA,EAAAA,UAAS,IAyCrC0F,EAAiBlO,UAErB,GADA+N,EAAa,KACRrO,EAAMyO,GACT,OAEF,MAAM,OAAE5G,EAAQ5G,KAAM8G,SAAkB3H,EAAIC,IAC1CD,EAAIgB,UAAUY,UAAUC,gBAAkB,IAAMwM,EAChD,CAAC,GAEH,GAAe,MAAX5G,EAAgB,CAClB,MAAM,WAAEG,EAAU,KAAE/G,GAAS8G,EAC7B,GAAmB,MAAfC,EAAoB,CACtB,MAAM0G,EAAOzN,EAAKgI,KAAKC,IACd,CACLnG,MAAOmG,EAAK3H,GACZsB,MAAOqG,EAAKlH,UACZwI,MAAO,YAGX6D,EAAa,CAAK,CAAExL,MAAO,mBAAoBE,MAAO,OAAU2L,GAClE,CACF,MACEL,EAAa,GACf,EAGIM,EAAerO,MAAO0E,EAAwBlC,KAClD,IACE,IAAK9C,EAAM8C,GACT,OAEF,IAAK9C,EAAMgF,GAET,YADAe,EAAe,mBAGjB,MAAMpF,EAAU,CACd,eAAgB,oBAEZJ,EAASqO,KAAKC,UAAU,CAC5B7J,eAAgBA,EAChBlC,YAAaA,KAEP+E,OAAQC,EAAW7G,KAAM8G,SAAkB3H,EAAIU,KACrD,GAAGV,EAAIgB,UAAUe,SAASC,4BAC1B7B,EACAI,GAGF,GAAkB,MAAdmH,EAAmB,CACrB,MAAM,WAAEE,EAAU,KAAE/G,GAAS8G,EAC7B,GAAmB,MAAfC,EAAoB,CACtB,MAAM8G,EAAW7N,EAAKgI,KAAKC,IAClB,CACLrG,MAAOqG,EAAK6F,qBACZhM,MAAOmG,EAAK3H,GACZoB,SAAUuG,EAAKvG,SACf2B,WAAY4E,EAAK5E,WACjB5B,SAAUwG,EAAKxG,SACfI,YAAaoG,EAAKpG,gBAItByL,EAAaO,EACf,MACE/I,EAAe,uDAEnB,CACF,CAAE,MAAOiJ,GACPjJ,EAAe,uDACjB,GA2CI8H,EAA8BvN,UAClC,IACE,IAAKC,EAAOgB,GAEV,YADAwE,EAAe,qBAGjB,IAAKxF,EAAO6E,mBAEV,YADAW,EAAe,8BAGjB,MAAMpF,EAAU,CACd,eAAgB,qBAGVkH,OAAQC,EAAW7G,KAAM8G,SAAkB3H,EAAIU,KACrDV,EAAIgB,UAAUE,gBAAgBI,OAC9BkN,KAAKC,UAAU,IACVtO,EACHmD,WAAYyI,mBAAmB5L,EAAOmD,YACtCD,iBAAkB0I,mBAAmB5L,EAAOkD,oBAE9C9C,GAEF,GAAkB,MAAdmH,EAAmB,CACrB,MAAM,WAAEE,GAAeD,EACJ,MAAfC,IACElI,EAAQyN,EAAO9K,gBACXwM,UACAC,EAAiB3B,EAAOhM,KAEhCmE,EAAiB,iCAErB,MACEK,EAAe,oCAEnB,CAAE,MAAOiJ,GACPjJ,EAAe,wCACjB,GAGImJ,EAAmB5O,UACvB,GAAKN,EAAMuB,GAIX,IACE,MAAQsG,OAAQC,EAAW7G,KAAM8G,SAAkB3H,EAAIC,IACrD,GAAGD,EAAIgB,UAAUC,OAAOhB,OAAOkB,KAGjC,GAAkB,MAAduG,EAAmB,CACrB,MAAM,WAAEE,EAAU,KAAE/G,GAAS8G,EAC7B,GAAmB,MAAfC,EACF,GAAIlI,EAAQmB,GAAO,CACjB,MAAMkO,EAASlO,EAAK,GACfuM,EAAc,KAAM2B,GAAQ5N,IAC5BiM,EAAc,iBAAkB2B,GAAQnK,gBACxCwI,EAAc,cAAe2B,GAAQ9L,aACrCmK,EAAc,mBAAoB2B,GAAQ9K,kBAC1CmJ,EAAc,qBAAsB2B,GAAQ/J,oBAC5CoI,EACH,YACA7N,EAAMwP,GAAQnM,WAAamM,GAAQnM,UAAYmM,GAAQ1K,YAAc,IAElE+I,EAAc,aAAc2B,GAAQ1K,YACpC+I,EAAc,eAAgB2B,GAAQxK,cACtC6I,EAAc,MAAO2B,GAAQjM,KAC7BsK,EAAc,SAAU2B,GAAQlL,QAChCuJ,EACH,kBACA7N,EAAMwP,GAAQhL,iBAAmBgL,GAAQhL,gBAAkBgL,GAAQpL,aAAe,IAE/EyJ,EAAc,gBAAiB2B,GAAQpK,eACvCyI,EAAc,eAAgB2B,GAAQ7J,cACtCkI,EAAc,gBAAiB2B,GAAQ9J,eACvCmI,EAAc,cAAe2B,GAAQrM,aACrC0K,EAAc,eAAgB2B,GAAQ3J,cACtCgI,EAAc,mBAAoB2B,GAAQ1L,kBAC1C+J,EAAc,wBAAyB2B,GAAQvL,uBAC/C4J,EAAc,aAAc2B,GAAQzL,YACpC8J,EAAc,WAAY2B,GAAQxM,UAClC6K,EAAc,aAAc2B,GAAQ7K,YACpCkJ,EAAc,WAAY2B,GAAQzM,UAClC8K,EAAc,eAAgB2B,GAAQ/K,oBACrCoK,EAAeW,GAAQrM,mBACvB6L,EAAaQ,GAAQnK,eAAgBmK,GAAQrM,kBA7HnCxC,WACxB,GAAK8E,EAGL,IACE,MAAQnE,KAAM8G,SAAkB3H,EAAIC,IAClC,GAAGD,EAAIgB,UAAUiB,cAAchC,OAAO+E,MAElC,KAAEnE,EAAI,WAAE+G,GAAeD,EAC7B,GAAmB,MAAfC,EAAoB,CACtB,MAAMoH,EAAanO,EAAKgI,KAAKC,GACpB,GAAG/I,KAAkB+I,EAAKrH,UAE9B2L,EAAc,SAAU4B,EAC/B,CACF,CAAE,MAAOJ,GACPjJ,EAAe,uBACjB,GA6GcsJ,CAAkBF,GAAQ/J,mBAClC,MACEW,EAAe,uCAGjBA,EAAe,iCAEnB,CACF,CAAE,MAAOiJ,GACPjJ,EAAe,iCACjB,MAtDEA,EAAe,oBAsDjB,EAGIuJ,EAAqBhP,UACzB,MAAMC,EAASU,EAAKgI,KAAIC,IACf,CAAE9D,mBAAoBmI,EAAOnI,mBAAoBvD,MAAOqH,MAE3DqG,EAAU,CACdnK,mBAAoBmI,EAAOnI,mBAC3BoK,aAAcjP,GAEhB,IACE,MAAQU,KAAM8G,SAAkB3H,EAAIc,IAAId,EAAIgB,UAAUiB,cAAcX,OAAQ6N,IACtE,WAAEvH,GAAeD,EACJ,MAAfC,GACFjC,EAAe,uBAEnB,CAAE,MAAOiJ,GACPjJ,EAAe,gBACjB,GAGIkJ,EAAqB3O,UACzB,IAAKiN,EAAO9K,OAAO5C,OAEjB,kBADMyP,EAAmB,IAK3B,GADa/B,EAAO9K,OAAOgI,MAAKvB,GAAQA,EAAKuG,SAAStP,KACtD,CACE,MAAMuP,EAAkBnC,EAAO9K,OAAOwG,KAAIC,GACjCA,EAAKyG,QAAQ,GAAGxP,KAAmB,YAEtCmP,EAAmBI,EAE3B,WAvJyBpP,WACzB,MAGMiP,EAAU,CAAEC,aAHHjC,EAAO9K,OAAOwG,KAAIC,IACxB,CAAE9D,mBAAoBmI,EAAOnI,mBAAoBvD,MAAOqH,OAGjE,IACE,MAAQjI,KAAM8G,SAAkB3H,EAAIU,KAAKV,EAAIgB,UAAUiB,cAAcC,OAAQiN,IACvE,WAAEvH,EAAU,KAAE/G,GAAS8G,EAEV,MAAfC,GACFtC,EAAiB,+BACZ8H,EAAc,SAAUvM,IAE7B8E,EAAe,uBAEnB,CAAE,MAAOiJ,GACPjJ,EAAe,wCACjB,GAuIM6J,EAAoB,EAUtBzL,EAAkBxE,EAAM4N,GAAQpJ,iBAClCoJ,GAAQpJ,gBACRoJ,GAAQxJ,aAAe,GAY3B,OAVAoF,EAAAA,EAAAA,YAAU,KACJxJ,EAAMN,IAAUW,EAAM0M,IACnB,gBAxRepM,WACtB,IACE,MAAQuH,OAAQC,EAAW7G,KAAM8G,SAAkB3H,EAAIC,IAAID,EAAIgB,UAAUW,SAAS1B,IAAK,CAAC,GACxF,GAAkB,MAAdyH,EAAmB,CACrB,MAAM,WAAEE,EAAU,KAAE/G,GAAS8G,EAC7B,GAAmB,MAAfC,EAAoB,CACtB,MAAM8G,EAAW7N,EAAKgI,KAAKC,IAClB,CACLnG,MAAOmG,EAAK3H,GACZsB,MAAOqG,EAAKnH,aAGhBoM,EAAcW,EAChB,CACF,CACF,CAAE,MAAOE,GACPjJ,EAAe,6BACjB,GAwQU8J,SACAX,EAAiBxC,EACxB,EAHI,EAIP,GAEC,CAACrN,EAAOqN,IAEN1M,EAAMuN,GAAQhM,IAiBjB8E,EAAAA,cAAA,OACED,MAAO,CAAEN,SAAU,YACnBQ,UAAU,gGAEVD,EAAAA,cAACyJ,EAAAA,GAAO,MACRzJ,EAAAA,cAAA,OAAKC,UAAU,4CACbD,EAAAA,cAAA,OAAKC,UAAU,qFACbD,EAAAA,cAAC+G,EAAS,CAACvK,MAAM,aAAaE,MAAOwK,GAAQ9I,aAC7C4B,EAAAA,cAAC+G,EAAS,CAACvK,MAAM,OAAOE,MAAOwK,GAAQ5I,eACvC0B,EAAAA,cAAC+G,EAAS,CAACvK,MAAM,SAASE,MAAOwK,GAAQtJ,SACzCoC,EAAAA,cAAC+G,EAAS,CAACvK,MAAM,MAAME,MAAOwK,GAAQrK,MACtCmD,EAAAA,cAAC+G,EAAS,CAACvK,MAAM,cAAcE,MAAOwK,GAAQlK,cAC9CgD,EAAAA,cAAC+G,EAAS,CAACvK,MAAM,SAASE,MAAOoB,IACjCkC,EAAAA,cAAC+G,EAAS,CAACvK,MAAM,cAAcE,MAAOwK,GAAQlJ,mBAC9CgC,EAAAA,cAAC+G,EAAS,CAACvK,MAAM,WAAWE,MAAOwK,GAAQxI,gBAC3CsB,EAAAA,cAAC+G,EAAS,CAACvK,MAAM,gBAAgBE,OArDhB8E,EAqDuC0F,GAAQlI,cApDvD,cAAXwC,EACK,cAEFA,MAmDHxB,EAAAA,cAAA,OAAKC,UAAU,uBACbD,EAAAA,cAACJ,EAAU,CAACpD,MAAM,gBAChBwD,EAAAA,cAACG,EAAW,CACVzD,MAAOwK,EAAOnJ,aACdqC,SAAUuI,GAAKxB,EAAc,eAAgBwB,EAAEzH,OAAOxE,OACtD2D,YAAY,wBAGhBL,EAAAA,cAACJ,EAAU,CAACpD,MAAM,UAChBwD,EAAAA,cAAC+D,EAAe,CACdvH,MAAM,gBACNwH,QAASgD,EACTxG,SAAU+D,GAAU4C,EAAc,eAAgB5C,EAAO7H,OACzDA,MAAOwK,EAAOjI,gBAGlBe,EAAAA,cAACJ,EAAU,CAACpD,MAAM,YAChBwD,EAAAA,cAAC+D,EAAe,CACdvH,MAAM,kBACNE,MAAOwK,EAAOzK,YACd+D,SAAU+D,GA5VGtK,WAClBkN,EAAc,cAAe5C,EAAO7H,aACnCyL,EAAe5D,EAAO7H,aACtB4L,EAAapB,EAAOvI,eAAgB4F,EAAO7H,MAAM,EAyVzBgN,CAAiBnF,GACrCP,QAAS6D,KAGb7H,EAAAA,cAACJ,EAAU,CAACpD,MAAM,aAChBwD,EAAAA,cAAC+D,EAAe,CACdvH,MAAM,mBACNwH,QAAS+D,EACTvH,SAAU+D,GAAU4C,EAAc,eAAgB5C,EAAO7H,OACzDA,MAAOwK,EAAO/H,gBAGlBa,EAAAA,cAACJ,EAAU,CAACpD,MAAM,YAChBwD,EAAAA,cAAC+D,EAAe,CACdvH,MAAM,kBACNwH,QAASiE,EACTzH,SAAU+D,GA1XIA,KACnB4C,EAAc,WAAY5C,GAC1B4C,EAAc,eAAgB5C,EAAO/H,OAC1C,IAAK,MAAMqG,KAAQ4E,EACb5E,EAAK+E,YACFT,EAActE,EAAK8E,SAAUpD,EAAO1B,EAAK8E,UAElD,EAmX8BgC,CAAiBpF,GACrC7H,MAAOwK,EAAOpL,SAASY,WAM/BsD,EAAAA,cAAA,WACG1G,EAAM4N,GAAQ3J,wBACbyC,EAAAA,cAAA,OAAKC,UAAU,QACbD,EAAAA,cAAA,MAAIC,UAAU,qCAAoC,gBAClDD,EAAAA,cAAA,KACE+B,MA5XI1I,EA4XSF,OAAO+N,EAAO3J,uBZlYzC,SAAoByE,GAClB,IAEE,OADA,IAAIC,IAAID,IACD,CACT,CAAE,MAAOE,GACP,OAAO,CACT,CACF,CYAWC,CAAW9I,GAAOA,EAAM,GAAGS,KAAkBT,KA4X1C6H,OAAO,SACPjB,UAAU,wHACVmC,IAAI,cACL,eAMPpC,EAAAA,cAAA,OAAKC,UAAU,eACZiH,GACCO,EAAgB7E,KAAIgH,GAClB5J,EAAAA,cAAC+E,EAAgB,CACf1B,IAAKuG,EAAQjC,SACbzC,cAAe0E,EAAQhC,WACvB3C,MAAO2E,EAAQlC,YACf1C,QAAS4E,EAAQjC,SACjBnH,SAAU2G,EACVzK,MAAOwK,EAAO0C,EAAQjC,eAK9B3H,EAAAA,cAAA,OAAKC,UAAU,oBACbD,EAAAA,cAAA,MAAIC,UAAU,6BAA4B,iBAC1CD,EAAAA,cAACqC,EAAY,CACXC,cAAe4E,EAAO9K,OACtBgE,SAAUyJ,GAAW1C,EAAc,SAAU0C,MAIjD7J,EAAAA,cAAA,OACED,MAAO,CAAEN,SAAU,QAASqK,OAAQ,OAAQrG,MAAO,QACnDxD,UAAU,wEAEVD,EAAAA,cAAA,UAAQC,UAAU,qEAAoE,UAGtFD,EAAAA,cAAA,UACEC,UAAU,oEACV2B,QAASA,IAAMwF,KAChB,sBA1HHpH,EAAAA,cAAA,OAAKC,UAAU,yHACZ3G,EAAMN,GACLgH,EAAAA,cAAA,QAAMC,UAAU,gDAA+C,2BAI/DD,EAAAA,cAAA,QAAMC,UAAU,kCAAiC,4DAlTzC5G,MAqRSmI,CAqJjB,ECvfV,GAKEtG,G,SAQA6O,gBAAiBA,EAAGC,kBAAiBC,kBAAiBC,gBAAgB,CAAC,MAAtDH,EAOjBI,eAAgBA,EAAGH,kBAAiBC,kBAAiBG,sBAC5C,CACL,CACErJ,KAAM,SACNsJ,SAAU,kBACVC,UAAW,SACX9N,MAAO,SACP+N,UAAWC,IAUjBC,kBAAmBA,EAAGT,kBAAiBC,kBAAiBG,uBAArCK,EAOnBC,iBAAkBA,EAAGV,kBAAiBC,kBAAiBG,uBAArCM,EASlBC,wBAAyBA,EAAGX,kBAAiBC,kBAAiBG,uBAArCO,EAOzBC,yBAA0BA,EAAGZ,kBAAiBC,kBAAiBG,uBAArCQ,EAQ1BC,yBAA0BA,EAAGb,kBAAiBC,kBAAiBG,uBAArCS,EAQ1BC,kBAAmBA,EAAGd,kBAAiBC,kBAAiBG,uBAArCU,EAOnBC,iBAAkBA,EAAGf,kBAAiBC,kBAAiBG,uBAArCW,EAMlBC,qBAAsBA,EAAGhB,kBAAiBC,kBAAiBG,uBAArCY,E","sources":["webpack:///../../../extensions/ReportExtension/Report/storage.ts","webpack:///../../../extensions/ReportExtension/Report/src/utils.ts","webpack:///../../../extensions/ReportExtension/Report/src/api.ts","webpack:///../../../extensions/ReportExtension/Report/src/types/ReportAnalysisTypes.ts","webpack:///../../../extensions/ReportExtension/Report/src/components/notify.ts","webpack:///../../../extensions/ReportExtension/Report/src/components/LabelHWrap.tsx","webpack:///../../../extensions/ReportExtension/Report/src/components/CustomInput.tsx","webpack:///../../../extensions/ReportExtension/Report/src/components/CustomImageUpload.tsx","webpack:///../../../extensions/ReportExtension/Report/src/components/utils.ts","webpack:///../../../extensions/ReportExtension/Report/src/components/ReportImages.tsx","webpack:///../../../extensions/ReportExtension/Report/src/components/CustomSelectBox.tsx","webpack:///../../../extensions/ReportExtension/Report/src/components/DiagnosisSection.tsx","webpack:///../../../extensions/ReportExtension/Report/src/hooks/useToken.ts","webpack:///../../../extensions/ReportExtension/Report/src/Report.tsx","webpack:///../../../extensions/ReportExtension/Report/src/index.tsx"],"sourcesContent":["import secureLocalStorage from 'react-secure-storage';\n\n/**** purpose of admin login ******/\nconst setApiToken = (token: string) => {\n  return secureLocalStorage.setItem('token', token);\n};\n\nconst removeApiToken = () => {\n  return secureLocalStorage.removeItem('token');\n};\nconst getApiToken = (): string => {\n  const token = secureLocalStorage.getItem('token');\n  return String(token);\n};\n\n/**\n * set storage item\n * @param key\n * @param value\n */\n\nconst setStorageItem = (key: string, value: string) => {\n  return secureLocalStorage.setItem(key, value);\n};\n/**\n * get storage item\n * @param key\n */\n\nconst getStorageItem = (key: string) => {\n  return secureLocalStorage.getItem(key);\n};\n\n/**\n * remove storage item\n * @param key\n */\n\nconst removeStorageItem = (key: string) => {\n  return secureLocalStorage.removeItem(key);\n};\n\nexport {\n  setApiToken,\n  getApiToken,\n  removeApiToken,\n  setStorageItem,\n  getStorageItem,\n  removeStorageItem,\n};\n","import lodash from 'lodash';\n/**\n * check if given domain or url is https enabled or not\n * @param url\n */\nfunction ensureHTTPS(url: string | null) {\n  if (!url) {\n    return '';\n  }\n  return url;\n  /*    if (!/^https?:\\/\\//i.test(url)) {\n        url = 'https://' + url;\n    } else if (/^http:\\/\\//i.test(url)) {\n        url = url.replace(/^http:/i, 'https:');\n    }\n    return url;*/\n}\n\n/**\n * check if given string is non empty valid string\n * @param str\n */\nfunction isValidString(str: any): boolean {\n  return str !== undefined && str !== null && str?.length > 0;\n}\n\n/**\n * check if given string is non empty valid string\n * @param str\n */\nfunction isStr(str: any): boolean {\n  return str !== undefined && str !== null && str?.length > 0;\n}\n\n/**\n * check is an array is non-empty valid array\n * @param array\n */\n\nfunction isArray(array: any[] | undefined | null): boolean {\n  return array !== undefined && array !== null && array?.length > 0;\n}\n\n/**\n * converts string to lowercase\n * @param str\n */\nfunction convertToLower(str: string) {\n  if (str?.length <= 0) {\n    return str;\n  }\n  return str?.toLowerCase();\n}\n\n/**\n * formats string to lowercase to compare with each other\n * @param str\n */\n\nfunction strcmp(str: string | undefined) {\n  str = str?.replace(/\\s/g, '-');\n  str = str?.replace(/[^a-zA-Z ]/g, '-');\n  return convertToLower(str ?? '');\n}\n\nfunction filterDigits(inputString: string): string {\n  return inputString.replace(/\\D/g, '');\n}\n\n/**\n * check if given string is non-empty valid number\n * @param num\n */\nfunction isNum(num: number | undefined | null): boolean {\n  return num !== undefined && num !== null && num > 0;\n}\n\nfunction isValidUrl(string: string) {\n  try {\n    new URL(string);\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nfunction humanTimeDiff(date: string) {\n  const givenDate = new Date(date);\n  // Current date\n  const currentDate = new Date();\n  // Calculate the difference in milliseconds\n  const timeDifference = currentDate.getTime() - givenDate.getTime();\n  // Convert milliseconds to days\n  const days = Math.floor(timeDifference / (1000 * 60 * 60 * 24));\n  return isNum(days) ? days : 1;\n}\n\nfunction formatTitle(title: string) {\n  return lodash.startCase(title);\n}\n\nfunction formatDate(date: any) {\n  // Extract day, month, and year\n  date = new Date(date);\n  const day = date.getDate();\n  const month = date.getMonth() + 1; // Note: January is 0\n  const year = date.getFullYear();\n\n  // Pad day and month with leading zeros if needed\n  const paddedDay = day < 10 ? '0' + day : day;\n  const paddedMonth = month < 10 ? '0' + month : month;\n\n  // Format the date as dd/mm/yyyy\n  return `${paddedDay}/${paddedMonth}/${year}`;\n}\n\nexport {\n  isNum,\n  strcmp,\n  isValidUrl,\n  filterDigits,\n  ensureHTTPS,\n  isArray,\n  formatDate,\n  formatTitle,\n  humanTimeDiff,\n  isValidString,\n  isStr,\n};\n","import axios from 'axios';\nimport { getApiToken } from '../storage';\nimport { ensureHTTPS } from './utils';\n\n// api base url should change according to environment it is deployed\n\nconst BASE_URL = 'https://dev-api.smaro.app/api';\nexport const AWS_BUCKET_URL = 'https://myradonapp.s3.amazonaws.com';\n\nexport const api = {\n  get: async (url: string, params?: any) => {\n    const token = getApiToken();\n    console.log(token);\n    url = ensureHTTPS(url);\n    const config = {\n      headers: {\n        Token: token,\n      },\n      params,\n    };\n    return axios.get(url, config);\n  },\n\n  post: async (url: string, formData: any, headers = {}) => {\n    const token = getApiToken();\n    const config = {\n      method: 'post',\n      url: ensureHTTPS(url),\n      headers: {\n        ...headers,\n        Token: token,\n      },\n      data: formData,\n    };\n    return axios(config);\n  },\n  put: async (url: string, params: any, headers = {}) => {\n    const token = getApiToken();\n    const config = {\n      method: 'put',\n      url: ensureHTTPS(url),\n      headers: {\n        ...headers,\n        Token: token,\n      },\n      data: params,\n    };\n    return axios(config);\n  },\n  delete: async (url: string, params: any, headers = {}) => {\n    const token = getApiToken();\n    const config = {\n      method: 'delete',\n      url: ensureHTTPS(url),\n      headers: {\n        ...headers,\n        Token: token,\n      },\n      data: params,\n    };\n    return axios(config);\n  },\n  endpoints: {\n    report: {\n      get: BASE_URL + '/diagnostics/patient/report',\n    },\n    report_analysis: {\n      get: {\n        id: BASE_URL + '/patient/report/analysis',\n        radiologist: BASE_URL + '/radiologist/report/analysis',\n        patient: BASE_URL + '/radiologist/report/analysis/patient',\n      },\n      update: BASE_URL + '/patient/report/analysis/update',\n      reportPDF: BASE_URL + '/patient/report/analysis/pdf',\n    },\n    upload: {\n      image: BASE_URL + '/upload/picture',\n      document: BASE_URL + '/upload/picture',\n    },\n    modality: {\n      get: BASE_URL + '/modality',\n    },\n    test_type: {\n      get: BASE_URL + '/test-type',\n      get_by_modality: BASE_URL + '/test-type/by/modality-id',\n    },\n    dicom: {\n      upload: BASE_URL + '/upload/dicom/file ',\n    },\n    template: {\n      get_radiologist_templates: BASE_URL + '/report-templates/template/by/radiologist-id',\n    },\n    report_images: {\n      create: BASE_URL + '/patient/report/analysis/image/create',\n      get: BASE_URL + '/patient/report/analysis/image',\n      update: BASE_URL + '/patient/report/analysis/image/update',\n    },\n    authCheck: BASE_URL + '/check-auth-status',\n  },\n};\n","interface AnalysisTypes {\n  report_analysis_id: number;\n  patient_report_id: number;\n  findings: string;\n  impression: string;\n  comments: string;\n  report_status: string;\n  radiologist_id: number;\n  radiologist_name: string;\n  assigned_by: number;\n  registration_date?: any;\n  updated_time?: any;\n}\n\ninterface PatientTypes {\n  PatientId: string;\n  gender: string;\n  dob: string | Date;\n  patient_name: string;\n  patient_email: string;\n  patient_mobile: string;\n  address: string;\n  age: number;\n}\n\nexport interface ReportTypes {\n  id: number; // report table id\n  report_title: string;\n  referral_doctor: string;\n  ref_code: string;\n  patient_id: number;\n  patient_study_id: string;\n  techniques: string;\n  clinical_history: string | null;\n  clinical_history_file: string | null;\n  results_type: string;\n  doctor_id: number;\n  hospital_id: number;\n  client_login_id: number;\n  client_id: number;\n  branch_id: number;\n  doctor_name: string | null;\n  modality_id: number;\n  test_type_id: number;\n  modality: string;\n  test_type: string;\n  report_status: string;\n  clinical_history_count: number;\n  priority_type: string;\n  patient_study_instance_id: string;\n  inserted_time: string;\n  estatus: number;\n  short_code: string;\n  client_name: string;\n  branch_name: string;\n  impression: string;\n  images: string[];\n  template: {\n    label: string;\n    value: number;\n    findings: string;\n    impressions: string;\n    comments: string;\n    modality_id: string;\n  };\n}\n\nexport const initialAnalysisValues: ReportAnalysisTypes = {\n  images: [],\n  template: { comments: '', findings: '', impressions: '', label: '', modality_id: '', value: 0 },\n  PatientId: '',\n  address: '',\n  age: 0,\n  assigned_by: 0,\n  branch_id: 0,\n  branch_name: '',\n  client_id: 0,\n  client_login_id: 0,\n  client_name: '',\n  clinical_history: '',\n  findings: '',\n  comments: '',\n  techniques: '',\n  clinical_history_count: 0,\n  clinical_history_file: '',\n  dob: '',\n  doctor_id: 0,\n  doctor_name: '',\n  estatus: 0,\n  gender: '',\n  hospital_id: 0,\n  id: 0,\n  referral_doctor: '',\n  report_title: '',\n  radiologist_name: '',\n  impression: '',\n  inserted_time: '',\n  modality: '',\n  modality_id: 0,\n  patient_email: '',\n  patient_id: 0,\n  patient_mobile: '',\n  patient_name: '',\n  patient_report_id: 0,\n  patient_study_id: '',\n  patient_study_instance_id: '',\n  priority_type: '',\n  radiologist_id: 0,\n  ref_code: '',\n  registration_date: undefined,\n  report_analysis_id: 0,\n  report_status: '',\n  results_type: '',\n  short_code: '',\n  test_type: '',\n  test_type_id: 0,\n  updated_time: undefined,\n};\n\nexport type ReportAnalysisTypes = AnalysisTypes & ReportTypes & PatientTypes;\n","import toast from 'react-hot-toast';\n\nfunction notify(message: string) {\n  toast(message, {\n    position: 'top-right',\n  });\n}\nfunction showSuccessToast(message: string) {\n  toast.success(message, {\n    position: 'top-right',\n  });\n}\n\nfunction showErrorToast(message: string) {\n  toast.error(message, {\n    position: 'top-right',\n  });\n}\n\nexport { notify, showSuccessToast, showErrorToast };\n","import React from 'react';\nimport classNames from 'classnames';\nimport { FunctionComponent } from 'react';\n\ninterface LabelContainerProps {\n  label: string;\n  children: React.ReactNode;\n  bold?: boolean;\n  style?: React.CSSProperties;\n}\n\nconst LabelHWrap: FunctionComponent<LabelContainerProps> = ({ label, children, bold, style }) => {\n  return (\n    <div className=\"mr-[10px] flex items-center\">\n      <div className=\"w-[35%]\">\n        <h3\n          style={style}\n          className={classNames(\n            'min-w-max text-sm font-normal capitalize text-black',\n            bold && 'font-bold'\n          )}\n        >\n          {label}\n        </h3>\n      </div>\n      <div className=\"text-wrap w-[65%] p-1 text-sm capitalize\">{children}</div>\n    </div>\n  );\n};\n\nexport default LabelHWrap;\n","import React from 'react';\ninterface CustomInputProps {\n  value?: string;\n  onChange?: (arg: React.ChangeEvent<HTMLInputElement>) => void;\n  placeholder?: string;\n  type?: React.HTMLInputTypeAttribute;\n}\n\nconst CustomInput: React.FC<CustomInputProps> = ({\n  onChange,\n  value,\n  placeholder = 'Choose file',\n  type = 'text',\n}) => {\n  return (\n    <input\n      type={type}\n      className=\"w-full rounded-[6px] border border-[#DEE2E6] bg-white px-2 py-[5px] text-base font-normal text-black outline-none\"\n      value={value}\n      onChange={onChange}\n      placeholder={placeholder}\n    />\n  );\n};\n\nexport default CustomInput;\n","import React, { useRef } from 'react';\nimport { FormikErrors, FormikTouched } from 'formik';\nimport { showErrorToast } from './notify';\nimport { api, AWS_BUCKET_URL } from '../api';\nimport { isValidUrl } from './utils';\nimport classNames from 'classnames';\nimport { isStr } from '../utils';\n\ninterface CustomUploaderWithSelectBoxProps {\n  label: string;\n  value: string;\n  width?: number | string;\n  setValue: (filepath: string) => void;\n  errorText?: string | string[] | FormikErrors<any> | FormikErrors<any>[];\n  touched?: boolean | FormikTouched<any> | FormikTouched<any>[] | undefined;\n  bold?: boolean;\n}\n\nconst CustomImageUpload: React.FC<CustomUploaderWithSelectBoxProps> = ({\n  label,\n  value,\n  setValue,\n  errorText,\n  touched,\n  bold,\n}) => {\n  const inputRef = useRef<any>(null);\n  // const auth = useAuth();\n\n  const onChange = async (event: any) => {\n    const file = event?.target?.files[0];\n    if (!file) {\n      showErrorToast('Invalid file');\n      return;\n    }\n\n    const size = file.size / (1024 * 1024);\n\n    if (size <= 0) {\n      showErrorToast('Please upload valid file');\n      return;\n    }\n    if (size > 3) {\n      showErrorToast('File size is more than 3MB,please upload file size less than 3 mb');\n      return;\n    }\n\n    const type = file.type;\n    const formData = new FormData();\n    formData.append('file', file);\n\n    try {\n      let API_URL: string;\n      if (type === 'application/pdf') {\n        API_URL = `${api.endpoints.upload.document}/${1}`;\n      } else {\n        API_URL = `${api.endpoints.upload.image}/${1}`;\n      }\n\n      const headers = {\n        'Content-Type': 'multipart/form-data',\n      };\n\n      const { status: apiStatus, data: apiData } = await api.post(API_URL, formData, headers);\n\n      if (apiStatus === 200) {\n        const { statusCode, data }: any = apiData;\n        if (statusCode === 200) {\n          setValue(data); // Ensure the returned data is the correct file path\n        }\n      } else {\n        showErrorToast('Failed to upload file');\n      }\n    } catch (error) {\n      showErrorToast('An error occurred during the file upload');\n    }\n  };\n\n  const getUrl = (url: string) => {\n    return isValidUrl(url) ? url : `${AWS_BUCKET_URL}/${url}`;\n  };\n\n  return (\n    <div className=\"flex flex-col\">\n      <h4\n        className={classNames(\n          'mb-[6px] text-sm capitalize text-black',\n          bold && '!text-base !font-normal'\n        )}\n      >\n        {label}\n      </h4>\n      <div className=\"rounded border border-dashed border-gray-400 p-4\">\n        <input\n          ref={inputRef}\n          type=\"file\"\n          accept=\".png ,.jpg ,.jpeg\"\n          name=\"file\"\n          className=\"hidden\"\n          onChange={onChange}\n        />\n        <label\n          onClick={() => inputRef?.current?.click()}\n          className=\"cursor-pointer text-blue-500 hover:underline\"\n        >\n          Choose file\n        </label>\n      </div>\n      <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-300\">PNG or JPG (MAX.3MB).</p>\n      {isStr(value) && (\n        <a\n          href={getUrl(value)}\n          className=\"h-[25px] w-[75px] cursor-pointer content-center rounded-lg bg-green-700 text-center text-xs font-medium text-white\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          View File\n        </a>\n      )}\n      {touched && errorText && String(errorText)?.length > 0 && (\n        <span className=\"text-xs text-red-600\">{String(errorText)}</span>\n      )}\n    </div>\n  );\n};\n\nexport default CustomImageUpload;\n","import lodash from 'lodash';\n/**\n * check if given domain or url is https enabled or not\n * @param url\n */\nfunction ensureHTTPS(url: string | null) {\n  if (!url) {\n    return '';\n  }\n  return url;\n  /*    if (!/^https?:\\/\\//i.test(url)) {\n        url = 'https://' + url;\n    } else if (/^http:\\/\\//i.test(url)) {\n        url = url.replace(/^http:/i, 'https:');\n    }\n    return url;*/\n}\n\n/**\n * check if given string is non empty valid string\n * @param str\n */\nfunction isValidString(str: any): boolean {\n  return str !== undefined && str !== null && str?.length > 0;\n}\n\n/**\n * check if given string is non empty valid string\n * @param str\n */\nfunction isStr(str: any): boolean {\n  return str !== undefined && str !== null && str?.length > 0;\n}\n\n/**\n * check is an array is non-empty valid array\n * @param array\n */\n\nfunction isArray(array: any[] | undefined | null): boolean {\n  return array !== undefined && array !== null && array?.length > 0;\n}\n\n/**\n * converts string to lowercase\n * @param str\n */\nfunction convertToLower(str: string) {\n  if (str?.length <= 0) {\n    return str;\n  }\n  return str?.toLowerCase();\n}\n\n/**\n * formats string to lowercase to compare with each other\n * @param str\n */\n\nfunction strcmp(str: string | undefined) {\n  str = str?.replace(/\\s/g, '-');\n  str = str?.replace(/[^a-zA-Z ]/g, '-');\n  return convertToLower(str ?? '');\n}\n\nfunction filterDigits(inputString: string): string {\n  return inputString.replace(/\\D/g, '');\n}\n\n/**\n * check if given string is non-empty valid number\n * @param num\n */\nfunction isNum(num: number | undefined | null): boolean {\n  return num !== undefined && num !== null && num > 0;\n}\n\nfunction isValidUrl(string: string) {\n  try {\n    new URL(string);\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nfunction humanTimeDiff(date: string) {\n  const givenDate = new Date(date);\n  // Current date\n  const currentDate = new Date();\n  // Calculate the difference in milliseconds\n  const timeDifference = currentDate.getTime() - givenDate.getTime();\n  // Convert milliseconds to days\n  const days = Math.floor(timeDifference / (1000 * 60 * 60 * 24));\n  return isNum(days) ? days : 1;\n}\n\nfunction formatTitle(title: string) {\n  return lodash.startCase(title);\n}\n\nfunction formatDate(date: any) {\n  // Extract day, month, and year\n  date = new Date(date);\n  const day = date.getDate();\n  const month = date.getMonth() + 1; // Note: January is 0\n  const year = date.getFullYear();\n\n  // Pad day and month with leading zeros if needed\n  const paddedDay = day < 10 ? '0' + day : day;\n  const paddedMonth = month < 10 ? '0' + month : month;\n\n  // Format the date as dd/mm/yyyy\n  return `${paddedDay}/${paddedMonth}/${year}`;\n}\n\nexport {\n  isNum,\n  strcmp,\n  isValidUrl,\n  filterDigits,\n  ensureHTTPS,\n  isArray,\n  formatDate,\n  formatTitle,\n  humanTimeDiff,\n  isValidString,\n  isStr,\n};\n","import React, { useEffect, useState } from 'react';\nimport { IoMdTrash } from 'react-icons/io';\nimport CustomImageUpload from './CustomImageUpload';\nimport { isArray } from '../utils';\n\ninterface ReportImagesProps {\n  initialImages?: string[]; // URLs or base64 strings of the images\n  onChange: (images: string[]) => void;\n}\n\nconst ReportImages: React.FC<ReportImagesProps> = ({ initialImages = [], onChange }) => {\n  const [uploads, setUploads] = useState<any[]>([]);\n\n  const handleOnChange = (filter: any[]) => {\n    const images = filter.map(item => {\n      return item.file;\n    });\n    onChange(images);\n  };\n\n  const handleAddUpload = () => {\n    setUploads([...uploads, { id: Date.now(), file: '' }]);\n  };\n\n  const handleSetFile = (id: number, value: string) => {\n    const updatedUploads = uploads.map(upload =>\n      upload.id === id ? { ...upload, file: value } : upload\n    );\n    setUploads(updatedUploads);\n    handleOnChange(updatedUploads);\n  };\n\n  const handleRemoveUpload = (id: number) => {\n    const filter = uploads.filter(upload => upload.id !== id);\n    setUploads(filter);\n    handleOnChange(filter);\n  };\n\n  useEffect(() => {\n    if (!isArray(uploads) && isArray(initialImages)) {\n      const arr = initialImages.map((img, index) => ({\n        id: Date.now() + index, // Create unique ids for initial images\n        file: img,\n      }));\n      setUploads(arr);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [initialImages]);\n\n  return (\n    <div className=\"flex flex-wrap gap-10\" style={{ gap: '20px' }}>\n      {uploads.map((upload, index) => (\n        <div key={upload.id} className=\"relative\" style={{ position: 'relative' }}>\n          <CustomImageUpload\n            label={`Upload ${index + 1}`}\n            value={upload.file}\n            setValue={value => handleSetFile(upload.id, value)}\n          />\n          <IoMdTrash\n            style={{ position: 'absolute', right: '-8px', top: '-15px' }}\n            className=\"absolute -top-2 -right-2 mt-2 mr-2 cursor-pointer text-red-500\"\n            size={24}\n            onClick={() => handleRemoveUpload(upload.id)}\n          />\n        </div>\n      ))}\n      <button\n        className=\"mt-4 h-fit rounded bg-blue-500 p-2 text-white\"\n        onClick={handleAddUpload}\n        style={{ backgroundColor: '#0ea5e9', height: 'fit-content' }}\n      >\n        Upload\n      </button>\n    </div>\n  );\n};\n\nexport default ReportImages;\n","import React, { useEffect, useState } from 'react';\nimport Select, { StylesConfig } from 'react-select';\n\ninterface OwnProps {\n  label: string;\n  value: any;\n  setValue: (val: any) => void;\n  options: { label: string; value: any; color: string }[];\n}\n\ntype Props = OwnProps;\n\nconst CustomSelectBox: React.FC<Props> = ({ label, value, setValue, options }) => {\n  const selectStyles: StylesConfig<{ label: string; value: string; color: string }, true> = {\n    option: baseStyles => {\n      return {\n        ...baseStyles,\n        color: 'black',\n      };\n    },\n    container: baseStyles => {\n      return {\n        ...baseStyles,\n        width: '100%',\n        backgroundColor: 'white',\n      };\n    },\n    singleValue: baseStyle => {\n      return {\n        ...baseStyle,\n        paddingLeft: '10px',\n        paddingRight: '10px',\n      };\n    },\n  };\n\n  const [selected, setSelected] = useState({\n    value: '',\n    label: label,\n    color: 'black',\n  });\n\n  useEffect(() => {\n    const item = options.find(item => item.value === value);\n    if (item !== undefined && item !== null) {\n      setSelected(item);\n    } else {\n      setSelected({ color: '', label: label, value: '' });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [options, value]);\n  return (\n    <Select\n      value={selected}\n      styles={selectStyles}\n      onChange={item => setValue(item)}\n      options={options}\n      className=\"bg-white text-base font-normal text-black\"\n      placeholder={label}\n    />\n  );\n};\n\nexport default CustomSelectBox;\n","import React, { useEffect, useState } from 'react';\n\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport { MdEdit } from 'react-icons/md';\nimport { FaEye } from 'react-icons/fa';\n\nimport DOMPurify from 'dompurify';\nimport { ReportAnalysisTypes } from '../types/ReportAnalysisTypes';\n\ninterface OwnProps {\n  title: string;\n  value: string;\n  dataKey: keyof ReportAnalysisTypes;\n  isEditEnabled: boolean;\n  setValue: (dataName: keyof ReportAnalysisTypes, diagnosisText: string) => void;\n}\n\ntype Props = OwnProps;\n\nconst DiagnosisSection: React.FC<Props> = ({ value, setValue, dataKey, title, isEditEnabled }) => {\n  const [isEdit, setIsEdit] = useState(true);\n\n  const [editorText, setEditorText] = useState(decodeURIComponent(value));\n\n  const onChangeValue = (html: string) => {\n    html = DOMPurify.sanitize(html);\n    setEditorText(html);\n    setValue(dataKey, encodeURIComponent(html));\n  };\n\n  useEffect(() => {\n    setEditorText(decodeURIComponent(value));\n  }, [value]);\n\n  return (\n    <div className=\"mb-3\">\n      <div className=\"flex items-center justify-between text-black\">\n        <h5 className=\"mb-2 text-sm font-bold\">{title}</h5>\n        <div>\n          {isEditEnabled && !isEdit && (\n            <MdEdit className=\"fill-green-600\" size={20} onClick={() => setIsEdit(true)} />\n          )}\n          {isEditEnabled && isEdit && (\n            <FaEye className=\"fill-blue-600\" size={20} onClick={() => setIsEdit(false)} />\n          )}\n        </div>\n      </div>\n      {isEdit && isEditEnabled ? (\n        <ReactQuill onChange={onChangeValue} className=\"text-black\" value={editorText} />\n      ) : (\n        <div className=\"text-black\" dangerouslySetInnerHTML={{ __html: editorText }} />\n      )}\n    </div>\n  );\n};\n\nexport default DiagnosisSection;\n","import { useLocation } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { isStr } from '../utils';\nimport { setApiToken } from '../../storage';\nexport default function useToken() {\n  const location = useLocation();\n  const [token, setToken] = useState<string | null>(null);\n  const [reportId, setReportId] = useState<number | null>(null);\n\n  useEffect(() => {\n    const params = new URLSearchParams(location.search);\n    const _token = params.get('bearer');\n    if (isStr(_token)) {\n      const decoded_token = decodeURIComponent(_token);\n      setApiToken(decoded_token);\n      setToken(decoded_token);\n    }\n    const report_id = params.get('reportId');\n    if (isStr(report_id)) {\n      setReportId(Number(report_id));\n    }\n  }, [location.search]);\n\n  return { token, reportId };\n}\n","import React, { useEffect, useState } from 'react';\nimport { useFormik } from 'formik';\n\nimport { api, AWS_BUCKET_URL } from './api';\nimport { isNum, isStr, isArray, isValidUrl } from './utils';\nimport { ReportAnalysisTypes } from './types/ReportAnalysisTypes';\nimport { initialAnalysisValues } from './types/ReportAnalysisTypes';\nimport { showErrorToast, showSuccessToast } from './components/notify';\nimport { Toaster } from 'react-hot-toast';\nimport LabelHWrap from './components/LabelHWrap';\nimport CustomInput from './components/CustomInput';\nimport ReportImages from './components/ReportImages';\nimport CustomSelectBox from './components/CustomSelectBox';\nimport DiagnosisSection from './components/DiagnosisSection';\nimport useToken from './hooks/useToken';\n\ninterface TemplateDataTypes {\n  id: number;\n  label: string;\n  findings: keyof ReportAnalysisTypes;\n  comments: keyof ReportAnalysisTypes;\n  impression: keyof ReportAnalysisTypes;\n  modality_id: number;\n  report_template_name: string;\n}\n\ntype ApiDataTypes = {\n  statusCode: number;\n  data?: any;\n  message?: string;\n  error?: string;\n};\n\ninterface DefaultSectionDataTypes {\n  sectionName: string;\n  dataName: keyof ReportAnalysisTypes;\n  isEditable: boolean;\n}\nconst DataLabel = ({ label, value }: { label: string; value: any }) => {\n  return (\n    <div className=\"w-full min-w-max\">\n      <LabelHWrap label={label}>\n        <p className=\"min-w-max font-bold text-black\">{value}</p>\n      </LabelHWrap>\n    </div>\n  );\n};\n\nconst report_result_options = [\n  { label: 'Select Result Status', value: '', color: 'black' },\n  { label: 'Normal', value: 'Normal', color: 'black' },\n  { label: 'Abnormal', value: 'Abnormal', color: 'black' },\n];\n\nconst Report: React.FC = () => {\n  const { token, reportId } = useToken();\n  const { values, setFieldValue, handleSubmit } = useFormik({\n    initialValues: initialAnalysisValues,\n    onSubmit: async (params: ReportAnalysisTypes) => {\n      await updatePatientReportAnalysis(params);\n    },\n  });\n\n  const defaultSections: DefaultSectionDataTypes[] = [\n    { sectionName: 'Clinical Information', dataName: 'clinical_history', isEditable: false },\n    { sectionName: 'Technique', dataName: 'techniques', isEditable: false },\n    { sectionName: 'Findings', dataName: 'findings', isEditable: true },\n    { sectionName: 'Impressions', dataName: 'impression', isEditable: true },\n    { sectionName: 'Comments', dataName: 'comments', isEditable: true },\n  ];\n  const [modalities, setModalities] = useState<any[]>([]);\n  const [testTypes, setTestTypes] = useState<any[]>([]);\n  const [templates, setTemplates] = useState([]);\n  const onSelectTemplate = (option: any) => {\n    void setFieldValue('template', option);\n    void setFieldValue('report_title', option.label);\n    for (const item of defaultSections) {\n      if (item.isEditable) {\n        void setFieldValue(item.dataName, option[item.dataName]);\n      }\n    }\n  };\n\n  const getUrl = (url: string) => {\n    return isValidUrl(url) ? url : `${AWS_BUCKET_URL}/${url}`;\n  };\n\n  const onSelectModality = async (option: { value: number; label: string }) => {\n    void setFieldValue('modality_id', option.value);\n    await fetchTestTypes(option.value);\n    await getTemplates(values.radiologist_id, option.value);\n  };\n\n  const fetchModalities = async () => {\n    try {\n      const { status: apiStatus, data: apiData } = await api.get(api.endpoints.modality.get, {});\n      if (apiStatus === 200) {\n        const { statusCode, data } = apiData;\n        if (statusCode === 200) {\n          const filtered = data.map((item: { id: number; modality: string }) => {\n            return {\n              value: item.id,\n              label: item.modality,\n            };\n          });\n          setModalities(filtered);\n        }\n      }\n    } catch (e) {\n      showErrorToast('Not able to get modalities');\n    }\n  };\n\n  const fetchTestTypes = async (modalityId: number) => {\n    setTestTypes([]);\n    if (!isNum(modalityId)) {\n      return;\n    }\n    const { status, data: apiData } = await api.get(\n      api.endpoints.test_type.get_by_modality + '/' + modalityId,\n      {}\n    );\n    if (status === 200) {\n      const { statusCode, data } = apiData;\n      if (statusCode === 200) {\n        const list = data.map((item: { id: number; test_type: string }) => {\n          return {\n            value: item.id,\n            label: item.test_type,\n            color: 'black',\n          };\n        });\n        setTestTypes([...[{ label: 'Select Test Type', value: '' }], ...list]);\n      }\n    } else {\n      setTestTypes([]);\n    }\n  };\n\n  const getTemplates = async (radiologist_id: number, modality_id: number) => {\n    try {\n      if (!isNum(modality_id)) {\n        return;\n      }\n      if (!isNum(radiologist_id)) {\n        showErrorToast('Invalid User Id');\n        return;\n      }\n      const headers = {\n        'Content-Type': 'application/json',\n      };\n      const params = JSON.stringify({\n        radiologist_id: radiologist_id,\n        modality_id: modality_id,\n      });\n      const { status: apiStatus, data: apiData } = await api.post(\n        `${api.endpoints.template.get_radiologist_templates}`,\n        params,\n        headers\n      );\n\n      if (apiStatus === 200) {\n        const { statusCode, data } = apiData as unknown as ApiDataTypes;\n        if (statusCode === 200) {\n          const filtered = data.map((item: TemplateDataTypes) => {\n            return {\n              label: item.report_template_name,\n              value: item.id,\n              findings: item.findings,\n              impression: item.impression,\n              comments: item.comments,\n              modality_id: item.modality_id,\n            };\n          });\n\n          setTemplates(filtered);\n        } else {\n          showErrorToast('Report templates not found,please add some templates');\n        }\n      }\n    } catch (e) {\n      showErrorToast('Report templates not found,please add some templates');\n    }\n  };\n\n  const fetchReportImages = async (report_analysis_id: number) => {\n    if (!report_analysis_id) {\n      return;\n    }\n    try {\n      const { data: apiData } = await api.get(\n        `${api.endpoints.report_images.get}/${report_analysis_id}`\n      );\n      const { data, statusCode } = apiData;\n      if (statusCode === 200) {\n        const images_map = data.map((item: { image: string }) => {\n          return `${AWS_BUCKET_URL}/${item.image}`;\n        });\n        void setFieldValue('images', images_map);\n      }\n    } catch (e) {\n      showErrorToast('Something went wrong');\n    }\n  };\n\n  const createReportImages = async () => {\n    const params = values.images.map(item => {\n      return { report_analysis_id: values.report_analysis_id, image: item };\n    });\n    const payload = { reportImages: params };\n    try {\n      const { data: apiData } = await api.post(api.endpoints.report_images.create, payload);\n      const { statusCode, data } = apiData as unknown as ApiDataTypes;\n\n      if (statusCode === 200) {\n        showSuccessToast('Image uploaded successfully');\n        void setFieldValue('images', data);\n      } else {\n        showErrorToast('Something went wrong');\n      }\n    } catch (e) {\n      showErrorToast('Something went wrong,please try again');\n    }\n  };\n\n  const updatePatientReportAnalysis = async (params: ReportAnalysisTypes) => {\n    try {\n      if (!params.id) {\n        showErrorToast('Invalid Report Id');\n        return;\n      }\n      if (!params.report_analysis_id) {\n        showErrorToast('Invalid Report Analysis ID');\n        return;\n      }\n      const headers = {\n        'Content-Type': 'application/json',\n      };\n\n      const { status: apiStatus, data: apiData } = await api.post(\n        api.endpoints.report_analysis.update,\n        JSON.stringify({\n          ...params,\n          techniques: encodeURIComponent(params.techniques),\n          clinical_history: encodeURIComponent(params.clinical_history),\n        }),\n        headers\n      );\n      if (apiStatus === 200) {\n        const { statusCode } = apiData as unknown as ApiDataTypes;\n        if (statusCode === 200) {\n          if (isArray(values.images)) {\n            await handleReportImages();\n            await getPatientReport(values.id);\n          }\n          showSuccessToast('Success! Patient Report Saved');\n        }\n      } else {\n        showErrorToast('Failure! Patient Report Not Saved');\n      }\n    } catch (e) {\n      showErrorToast('Something went wrong,please try again');\n    }\n  };\n\n  const getPatientReport = async (id: number) => {\n    if (!isNum(id)) {\n      showErrorToast('Invalid Report Id');\n      return;\n    }\n    try {\n      const { status: apiStatus, data: apiData } = await api.get(\n        `${api.endpoints.report.get}/${id}`\n      );\n\n      if (apiStatus === 200) {\n        const { statusCode, data } = apiData;\n        if (statusCode === 200) {\n          if (isArray(data)) {\n            const result = data[0];\n            void setFieldValue('id', result?.id);\n            void setFieldValue('radiologist_id', result?.radiologist_id);\n            void setFieldValue('branch_name', result?.branch_name);\n            void setFieldValue('radiologist_name', result?.radiologist_name);\n            void setFieldValue('report_analysis_id', result?.report_analysis_id);\n            void setFieldValue(\n              'PatientId',\n              isStr(result?.PatientId) ? result?.PatientId : result?.patient_id ?? ''\n            );\n            void setFieldValue('patient_id', result?.patient_id);\n            void setFieldValue('patient_name', result?.patient_name);\n            void setFieldValue('age', result?.age);\n            void setFieldValue('gender', result?.gender);\n            void setFieldValue(\n              'referral_doctor',\n              isStr(result?.referral_doctor) ? result?.referral_doctor : result?.doctor_name ?? ''\n            );\n            void setFieldValue('priority_type', result?.priority_type);\n            void setFieldValue('results_type', result?.results_type);\n            void setFieldValue('report_status', result?.report_status);\n            void setFieldValue('modality_id', result?.modality_id);\n            void setFieldValue('test_type_id', result?.test_type_id);\n            void setFieldValue('clinical_history', result?.clinical_history);\n            void setFieldValue('clinical_history_file', result?.clinical_history_file);\n            void setFieldValue('techniques', result?.techniques);\n            void setFieldValue('findings', result?.findings);\n            void setFieldValue('impression', result?.impression);\n            void setFieldValue('comments', result?.comments);\n            void setFieldValue('report_title', result?.report_title);\n            await fetchTestTypes(result?.modality_id);\n            await getTemplates(result?.radiologist_id, result?.modality_id);\n            await fetchReportImages(result?.report_analysis_id);\n          } else {\n            showErrorToast('Unable to fetch patient report');\n          }\n        } else {\n          showErrorToast('Unable to fetch patient report');\n        }\n      }\n    } catch (e) {\n      showErrorToast('Unable to fetch patient report');\n    }\n  };\n\n  const updateReportImages = async (data: string[]) => {\n    const params = data.map(item => {\n      return { report_analysis_id: values.report_analysis_id, image: item };\n    });\n    const payload = {\n      report_analysis_id: values.report_analysis_id,\n      reportImages: params,\n    };\n    try {\n      const { data: apiData } = await api.put(api.endpoints.report_images.update, payload);\n      const { statusCode } = apiData as unknown as ApiDataTypes;\n      if (statusCode !== 200) {\n        showErrorToast('Something went wrong');\n      }\n    } catch (e) {\n      showErrorToast('Update failed');\n    }\n  };\n\n  const handleReportImages = async () => {\n    if (!values.images.length) {\n      await updateReportImages([]);\n      return;\n    }\n\n    const flag = values.images.find(item => item.includes(AWS_BUCKET_URL));\n    if (flag) {\n      const filtered_images = values.images.map(item => {\n        return item.replace(`${AWS_BUCKET_URL}/`, '');\n      });\n      await updateReportImages(filtered_images);\n      return;\n    }\n    await createReportImages();\n  };\n\n  const getReportStatus = (status: string) => {\n    if (status === 'Inprocess') {\n      return 'In Progress';\n    }\n    return status;\n  };\n\n  const referral_doctor = isStr(values?.referral_doctor)\n    ? values?.referral_doctor\n    : values?.doctor_name ?? '';\n\n  useEffect(() => {\n    if (isStr(token) && isNum(reportId)) {\n      void (async () => {\n        await fetchModalities();\n        await getPatientReport(reportId);\n      })();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [token, reportId]);\n\n  if (!isNum(values?.id)) {\n    return (\n      <div className=\"flex h-full w-full content-center items-center justify-center rounded border border-gray-400 bg-white p-1 text-center\">\n        {isStr(token) ? (\n          <span className=\"text-bold animate-pulse text-xl text-red-700\">\n            Loading, please wait...\n          </span>\n        ) : (\n          <span className=\"text-bold text-xl text-red-700\">\n            You are not authorised to view this panel, Please exit.\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      style={{ position: 'relative' }}\n      className=\"min-h-[calc(100vh-100px)] w-full overflow-y-auto rounded border border-gray-400 bg-white p-1\"\n    >\n      <Toaster />\n      <div className=\"w-full border-gray-400 bg-purple-200 p-1\">\n        <div className=\"mb-4 grid w-full grid-cols-2 gap-y-1 md:grid-cols-2 lg:grid-cols-2 xl:grid-cols-2\">\n          <DataLabel label=\"Patient Id\" value={values?.patient_id} />\n          <DataLabel label=\"Name\" value={values?.patient_name} />\n          <DataLabel label=\"Gender\" value={values?.gender} />\n          <DataLabel label=\"Age\" value={values?.age} />\n          <DataLabel label=\"Diagnostics\" value={values?.branch_name} />\n          <DataLabel label=\"Doctor\" value={referral_doctor} />\n          <DataLabel label=\"Radiologist\" value={values?.radiologist_name} />\n          <DataLabel label=\"Priority\" value={values?.priority_type} />\n          <DataLabel label=\"Report Status\" value={getReportStatus(values?.report_status)} />\n        </div>\n        <div className=\"grid w-full gap-y-3\">\n          <LabelHWrap label=\"Report Title\">\n            <CustomInput\n              value={values.report_title}\n              onChange={e => setFieldValue('report_title', e.target.value)}\n              placeholder=\"Enter Report Title\"\n            />\n          </LabelHWrap>\n          <LabelHWrap label=\"Result\">\n            <CustomSelectBox\n              label=\"Select Result\"\n              options={report_result_options}\n              setValue={option => setFieldValue('results_type', option.value)}\n              value={values.results_type}\n            />\n          </LabelHWrap>\n          <LabelHWrap label=\"Modality\">\n            <CustomSelectBox\n              label=\"Select Modality\"\n              value={values.modality_id}\n              setValue={option => onSelectModality(option)}\n              options={modalities}\n            />\n          </LabelHWrap>\n          <LabelHWrap label=\"Test Type\">\n            <CustomSelectBox\n              label=\"Select Test Type\"\n              options={testTypes}\n              setValue={option => setFieldValue('test_type_id', option.value)}\n              value={values.test_type_id}\n            />\n          </LabelHWrap>\n          <LabelHWrap label=\"Template\">\n            <CustomSelectBox\n              label=\"Select Template\"\n              options={templates}\n              setValue={option => onSelectTemplate(option)}\n              value={values.template.value}\n            />\n          </LabelHWrap>\n        </div>\n      </div>\n\n      <div>\n        {isStr(values?.clinical_history_file) && (\n          <div className=\"my-1\">\n            <h4 className=\"mb-2 text-sm font-bold text-black\">Prescription</h4>\n            <a\n              href={getUrl(String(values.clinical_history_file))}\n              target=\"_blank\"\n              className=\"h-[35px] w-[150px] content-center items-center rounded bg-blue-700 p-1 text-center text-sm text-white dark:text-white\"\n              rel=\"noreferrer\"\n            >\n              View File\n            </a>\n          </div>\n        )}\n      </div>\n      <div className=\"my-3 w-full\">\n        {values &&\n          defaultSections.map(section => (\n            <DiagnosisSection\n              key={section.dataName}\n              isEditEnabled={section.isEditable}\n              title={section.sectionName}\n              dataKey={section.dataName}\n              setValue={setFieldValue}\n              value={values[section.dataName]}\n            />\n          ))}\n      </div>\n\n      <div className=\"my-3 w-full pt-5\">\n        <h1 className=\"mb-5 font-bold text-black\">Upload Images</h1>\n        <ReportImages\n          initialImages={values.images}\n          onChange={_images => setFieldValue('images', _images)}\n        />\n      </div>\n\n      <div\n        style={{ position: 'fixed', bottom: '10px', right: '10px' }}\n        className=\"absolute flex items-center justify-end gap-x-2 border-[#CED4DA] px-4\"\n      >\n        <button className=\"rounded-[4px] bg-[#6C757D] p-2 text-base font-semibold text-white\">\n          Cancel\n        </button>\n        <button\n          className=\"rounded-[4px] bg-green-700 p-2 text-base font-semibold text-white\"\n          onClick={() => handleSubmit()}\n        >\n          Send Report Back\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Report;\n","import { id } from './id';\nimport PatientReportTab from './Report';\n\n/**\n * You can remove any of the following modules if you don't need them.\n */\nexport default {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   * Your ID can be anything you want, but it should be unique.\n   */\n  id,\n\n  /**\n   * Perform any pre-registration tasks here. This is called before the extension\n   * is registered. Usually we run tasks such as: configuring the libraries\n   * (e.g. cornerstone, cornerstoneTools, ...) or registering any services that\n   * this extension is providing.\n   */\n  preRegistration: ({ servicesManager, commandsManager, configuration = {} }) => {},\n  /**\n   * PanelModule should provide a list of panels that will be available in OHIF\n   * for Modes to consume and render. Each panel is defined by a {name,\n   * iconName, iconLabel, label, component} object. Example of a panel module\n   * is the StudyBrowserPanel that is provided by the default extension in OHIF.\n   */\n  getPanelModule: ({ servicesManager, commandsManager, extensionManager }) => {\n    return [\n      {\n        name: 'Report',\n        iconName: 'logo-ohif-small',\n        iconLabel: 'Report',\n        label: 'Report',\n        component: PatientReportTab,\n      },\n    ];\n  },\n  /**\n   * ViewportModule should provide a list of viewports that will be available in OHIF\n   * for Modes to consume and use in the viewports. Each viewport is defined by\n   * {name, component} object. Example of a viewport module is the CornerstoneViewport\n   * that is provided by the Cornerstone extension in OHIF.\n   */\n  getViewportModule: ({ servicesManager, commandsManager, extensionManager }) => {},\n  /**\n   * ToolbarModule should provide a list of tool buttons that will be available in OHIF\n   * for Modes to consume and use in the toolbar. Each tool button is defined by\n   * {name, defaultComponent, clickHandler }. Examples include radioGroupIcons and\n   * splitButton toolButton that the default extension is providing.\n   */\n  getToolbarModule: ({ servicesManager, commandsManager, extensionManager }) => {},\n  /**\n   * LayoutTemplateMOdule should provide a list of layout templates that will be\n   * available in OHIF for Modes to consume and use to layout the viewer.\n   * Each layout template is defined by a { name, id, component}. Examples include\n   * the default layout template provided by the default extension which renders\n   * a Header, left and right sidebars, and a viewport section in the middle\n   * of the viewer.\n   */\n  getLayoutTemplateModule: ({ servicesManager, commandsManager, extensionManager }) => {},\n  /**\n   * SopClassHandlerModule should provide a list of sop class handlers that will be\n   * available in OHIF for Modes to consume and use to create displaySets from Series.\n   * Each sop class handler is defined by a { name, sopClassUids, getDisplaySetsFromSeries}.\n   * Examples include the default sop class handler provided by the default extension\n   */\n  getSopClassHandlerModule: ({ servicesManager, commandsManager, extensionManager }) => {},\n  /**\n   * HangingProtocolModule should provide a list of hanging protocols that will be\n   * available in OHIF for Modes to use to decide on the structure of the viewports\n   * and also the series that hung in the viewports. Each hanging protocol is defined by\n   * { name, protocols}. Examples include the default hanging protocol provided by\n   * the default extension that shows 2x2 viewports.\n   */\n  getHangingProtocolModule: ({ servicesManager, commandsManager, extensionManager }) => {},\n  /**\n   * CommandsModule should provide a list of commands that will be available in OHIF\n   * for Modes to consume and use in the viewports. Each command is defined by\n   * an object of { actions, definitions, defaultContext } where actions is an\n   * object of functions, definitions is an object of available commands, their\n   * options, and defaultContext is the default context for the command to run against.\n   */\n  getCommandsModule: ({ servicesManager, commandsManager, extensionManager }) => {},\n  /**\n   * ContextModule should provide a list of context that will be available in OHIF\n   * and will be provided to the Modes. A context is a state that is shared OHIF.\n   * Context is defined by an object of { name, context, provider }. Examples include\n   * the measurementTracking context provided by the measurementTracking extension.\n   */\n  getContextModule: ({ servicesManager, commandsManager, extensionManager }) => {},\n  /**\n   * DataSourceModule should provide a list of data sources to be used in OHIF.\n   * DataSources can be used to map the external data formats to the OHIF's\n   * native format. DataSources are defined by an object of { name, type, createDataSource }.\n   */\n  getDataSourcesModule: ({ servicesManager, commandsManager, extensionManager }) => {},\n};\n"],"names":["getApiToken","token","secureLocalStorage","getItem","String","ensureHTTPS","url","isStr","str","length","isArray","array","isNum","num","BASE_URL","AWS_BUCKET_URL","api","get","async","params","console","log","config","headers","Token","axios","post","formData","method","data","put","delete","endpoints","report","report_analysis","id","radiologist","patient","update","reportPDF","upload","image","document","modality","test_type","get_by_modality","dicom","template","get_radiologist_templates","report_images","create","authCheck","initialAnalysisValues","images","comments","findings","impressions","label","modality_id","value","PatientId","address","age","assigned_by","branch_id","branch_name","client_id","client_login_id","client_name","clinical_history","techniques","clinical_history_count","clinical_history_file","dob","doctor_id","doctor_name","estatus","gender","hospital_id","referral_doctor","report_title","radiologist_name","impression","inserted_time","patient_email","patient_id","patient_mobile","patient_name","patient_report_id","patient_study_id","patient_study_instance_id","priority_type","radiologist_id","ref_code","registration_date","undefined","report_analysis_id","report_status","results_type","short_code","test_type_id","updated_time","showSuccessToast","message","toast","success","position","showErrorToast","error","LabelHWrap","children","bold","style","React","className","classNames","CustomInput","onChange","placeholder","type","CustomImageUpload","setValue","errorText","touched","inputRef","useRef","ref","accept","name","file","event","target","files","size","FormData","append","API_URL","status","apiStatus","apiData","statusCode","onClick","current","click","href","string","URL","err","isValidUrl","rel","ReportImages","initialImages","uploads","setUploads","useState","handleOnChange","filter","map","item","useEffect","arr","img","index","Date","now","gap","key","handleSetFile","updatedUploads","IoMdTrash","right","top","handleRemoveUpload","handleAddUpload","backgroundColor","height","CustomSelectBox","options","selected","setSelected","color","find","Select","styles","option","baseStyles","container","width","singleValue","baseStyle","paddingLeft","paddingRight","DiagnosisSection","dataKey","title","isEditEnabled","isEdit","setIsEdit","editorText","setEditorText","decodeURIComponent","MdEdit","FaEye","ReactQuill","html","DOMPurify","sanitize","encodeURIComponent","dangerouslySetInnerHTML","__html","useToken","location","useLocation","setToken","reportId","setReportId","URLSearchParams","search","_token","decoded_token","setItem","setApiToken","report_id","Number","DataLabel","report_result_options","Report","values","setFieldValue","handleSubmit","useFormik","initialValues","onSubmit","updatePatientReportAnalysis","defaultSections","sectionName","dataName","isEditable","modalities","setModalities","testTypes","setTestTypes","templates","setTemplates","fetchTestTypes","modalityId","list","getTemplates","JSON","stringify","filtered","report_template_name","e","handleReportImages","getPatientReport","result","images_map","fetchReportImages","updateReportImages","payload","reportImages","includes","filtered_images","replace","createReportImages","fetchModalities","Toaster","onSelectModality","onSelectTemplate","section","_images","bottom","preRegistration","servicesManager","commandsManager","configuration","getPanelModule","extensionManager","iconName","iconLabel","component","PatientReportTab","getViewportModule","getToolbarModule","getLayoutTemplateModule","getSopClassHandlerModule","getHangingProtocolModule","getCommandsModule","getContextModule","getDataSourcesModule"],"sourceRoot":""}